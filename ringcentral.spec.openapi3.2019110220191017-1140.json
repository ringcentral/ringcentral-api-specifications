{
    "openapi": "3.0.0",
    "info": {
        "title": "RingCentral Connect Platform API",
        "description": "RingCentral Connect Platform API",
        "version": "1.0.39",
        "contact": {
            "name": "RingCentral Connect Platform",
            "url": "http://developers.ringcentral.com",
            "email": "platform@ringcentral.com"
        },
        "license": {
            "name": "RingCentral API License Agreement and Terms of Use",
            "url": "https://www.ringcentral.com/legal/apilitos.html"
        }
    },
    "tags": [
        {
            "name": "API Info"
        },
        {
            "name": "SMS and MMS"
        },
        {
            "name": "Fax"
        },
        {
            "name": "Internal Messages"
        },
        {
            "name": "Voicemail"
        },
        {
            "name": "Message Store Configuration"
        },
        {
            "name": "ADG"
        },
        {
            "name": "Presence"
        },
        {
            "name": "Subscriptions"
        },
        {
            "name": "Application Settings"
        },
        {
            "name": "Devices"
        },
        {
            "name": "SCIM"
        },
        {
            "name": "Verification Call",
            "description": " "
        },
        {
            "name": "Call Control"
        },
        {
            "name": "RDG"
        },
        {
            "name": "OAuth 2.0"
        }
    ],
    "security": [
        {
            "OAuth2": []
        }
    ],
    "x-auth-required": true,
    "x-blacklisting-strategy": "Off",
    "x-internal-api": false,
    "x-metered-api": true,
    "x-metering-group": "System",
    "x-service-interface": "rest",
    "x-service-name": "pas",
    "x-service-version": "v1",
    "paths": {
        "/restapi": {
            "get": {
                "tags": [
                    "API Info"
                ],
                "summary": "Get API Versions",
                "description": "Returns current API version(s) and server info.",
                "operationId": "readAPIVersions",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetVersionsResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "restapi",
                "x-auth-required": false,
                "x-throttling-group": "NoThrottling",
                "x-metered-api": true,
                "x-metering-group": "Free",
                "x-docs-level": "Public"
            }
        },
        "/restapi/{apiVersion}": {
            "get": {
                "tags": [
                    "API Info"
                ],
                "summary": "Get Version Info",
                "description": "Returns current API version info by apiVersion.",
                "operationId": "readAPIVersion",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "path",
                        "description": "API version to be requested, for example 'v1.0'",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API Version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetVersionResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "restapi/version",
                "x-auth-required": false,
                "x-throttling-group": "NoThrottling",
                "x-metered-api": true,
                "x-metering-group": "Free",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/status": {
            "get": {
                "tags": [
                    "API Info"
                ],
                "summary": "Get Service Status",
                "description": "Returns current PAS service status.",
                "operationId": "readAPIStatus",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "503": {
                        "description": "VoIP-only Mode"
                    }
                },
                "x-api-group": "restapi/status",
                "x-auth-required": false,
                "x-throttling-group": "NoThrottling",
                "x-metered-api": true,
                "x-metering-group": "Free",
                "x-docs-level": "Public",
                "x-availability": "Limited"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log": {
            "get": {
                "tags": [
                    "Call Log"
                ],
                "summary": "Get User Call Log Records",
                "description": "Returns call log records filtered by parameters specified.",
                "operationId": "readUserCallLog",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionNumber",
                        "in": "query",
                        "description": "Extension number of a user. If specified, returns call log for a particular extension only",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showBlocked",
                        "in": "query",
                        "description": "If 'True' then calls from/to blocked numbers are returned",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "phoneNumber",
                        "in": "query",
                        "description": "Phone number of a caller/callee. If specified, returns all calls (both incoming and outcoming) with the phone number specified",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "The direction for the resulting records. If not specified, both inbound and outbound records are returned. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Inbound",
                                    "Outbound"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sessionId",
                        "in": "query",
                        "description": "Internal identifier of a session",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Call type of a record. It is allowed to specify more than one type. If not specified, all call types are returned. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Voice",
                                    "Fax"
                                ]
                            }
                        }
                    },
                    {
                        "name": "transport",
                        "in": "query",
                        "description": "Call transport type. 'PSTN' specifies that a call leg is initiated from the PSTN network provider; 'VoIP' - from an RC phone. By default this filter is disabled",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "PSTN",
                                    "VoIP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "view",
                        "description": "View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Simple",
                                "Detailed"
                            ],
                            "default": "Simple"
                        }
                    },
                    {
                        "name": "withRecording",
                        "in": "query",
                        "description": "**Deprecated**. Supported for compatibility reasons. `True` if only recorded calls are returned. If both `withRecording` and `recordingType` are specified, then `withRecording` is ignored",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "recordingType",
                        "in": "query",
                        "description": "Type of a call recording. If not specified, then calls without recordings are also returned",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Automatic",
                                "OnDemand",
                                "All"
                            ]
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "The end datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are allowed",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "showDeleted",
                        "in": "query",
                        "description": "If 'True' then deleted calls are returned",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCallLogResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/call-log",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadCallLog",
                "x-user-permission": "ReadCallLog",
                "x-docs-level": "Public"
            },
            "delete": {
                "tags": [
                    "Call Log"
                ],
                "summary": "Delete User Call Log",
                "description": "Deletes filtered call log records.",
                "operationId": "deleteUserCallLog",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "The end datetime for records deletion in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "phoneNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Voice",
                                    "Fax"
                                ]
                            }
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Inbound",
                                    "Outbound"
                                ]
                            }
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success"
                    }
                },
                "x-api-group": "extension/call-log",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditCallLog",
                "x-user-permission": "EditCallLog",
                "x-docs-level": "Public",
                "x-availability": "Limited"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log-sync": {
            "get": {
                "tags": [
                    "Call Log"
                ],
                "summary": "Sync User Call Log",
                "description": "Synchronizes call log records",
                "operationId": "syncUserCallLog",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "syncType",
                        "in": "query",
                        "description": "Type of synchronization",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "FSync",
                                    "ISync"
                                ]
                            }
                        }
                    },
                    {
                        "name": "syncToken",
                        "in": "query",
                        "description": "Value of syncToken property of last sync request response",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "For 'FSync' the parameter is mandatory, it limits the number of records to be returned in response. For 'ISync' it specifies with how many records to extend sync Frame to the past, the maximum number of records is 250",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "statusGroup",
                        "in": "query",
                        "description": "Type of calls to be returned. The default value is 'All'",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Missed",
                                    "All"
                                ]
                            }
                        }
                    },
                    {
                        "name": "view",
                        "in": "query",
                        "description": "View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Simple",
                                "Detailed"
                            ],
                            "default": "Simple"
                        }
                    },
                    {
                        "name": "showDeleted",
                        "in": "query",
                        "description": "Supproted for ISync. If 'True' then deleted call records are returned",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallLogSync"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/call-log-sync",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadCallLog",
                "x-user-permission": "ReadCallLog",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/call-log/{callRecordId}": {
            "get": {
                "tags": [
                    "Call Log"
                ],
                "summary": "Get User Call Record",
                "description": "Returns call log records by ID.",
                "operationId": "readUserCallRecord",
                "parameters": [
                    {
                        "name": "callRecordId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "view",
                        "description": "View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Simple",
                                "Detailed"
                            ],
                            "default": "Simple"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Call Log Record",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCallLogRecord"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/call-log",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadCallLog",
                "x-user-permission": "ReadCallLog",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/active-calls": {
            "get": {
                "tags": [
                    "Call Log"
                ],
                "summary": "Get User Active Calls",
                "description": "Returns records of all extension calls that are in progress, ordered by start time in descending order.",
                "operationId": "listExtensionActiveCalls",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Inbound",
                                    "Outbound"
                                ]
                            }
                        }
                    },
                    {
                        "name": "view",
                        "description": "View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Simple",
                                "Detailed"
                            ],
                            "default": "Simple"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Call type of a record. If not specified, all call types are returned. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Voice",
                                    "Fax"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are allowed",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActiveCallsResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/active-calls",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadCallLog",
                "x-user-permission": "ReadCallLog",
                "x-docs-level": "Public",
                "x-availability": "Limited"
            }
        },
        "/restapi/v1.0/account/{accountId}/call-log": {
            "get": {
                "tags": [
                    "Call Log"
                ],
                "summary": "Get Company Call Log Records",
                "description": "Returns call log records filtered by parameters specified.",
                "operationId": "readCompanyCallLog",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionNumber",
                        "in": "query",
                        "description": "Extension number of a user. If specified, returns call log for a particular extension only",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "phoneNumber",
                        "in": "query",
                        "description": "Phone number of a caller/call recipient. If specified, returns all calls (both incoming and outcoming) with the phone number specified. Cannot be specified together with the extensionNumber filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Inbound",
                                    "Outbound"
                                ]
                            }
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Call type of a record. If not specified, all call types are returned. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Voice",
                                    "Fax"
                                ]
                            }
                        }
                    },
                    {
                        "name": "view",
                        "description": "View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Simple",
                                "Detailed"
                            ],
                            "default": "Simple"
                        }
                    },
                    {
                        "name": "withRecording",
                        "in": "query",
                        "description": "**Deprecated**. Supported for compatibility reasons only. `true` if only recorded calls are returned. The default value is `false`. If both `withRecording` and `recordingType` are specified, `withRecording` is ignored",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "recordingType",
                        "in": "query",
                        "description": "Type of a call recording. If not specified, then calls without recordings are also returned",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Automatic",
                                "OnDemand",
                                "All"
                            ]
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "The end datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "sessionId",
                        "description": "Internal identifier of a session",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountCallLogResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/call-log",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadCallLog",
                "x-user-permission": "FullCompanyCallLog",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/call-log-sync": {
            "get": {
                "tags": [
                    "Call Log"
                ],
                "summary": "Sync Company Call Log",
                "description": "Synchronizes company call log records.",
                "operationId": "syncAccountCallLog",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "syncType",
                        "in": "query",
                        "description": "Type of synchronization. 'FSync' is a default value",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "enum": [
                                "FSync",
                                "ISync"
                            ]
                        }
                    },
                    {
                        "name": "syncToken",
                        "in": "query",
                        "description": "Value of syncToken property of last sync request response",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "For 'FSync' the parameter is mandatory, it limits the number of records to be returned in response. For 'ISync' it specifies with how many records to extend sync frame to the past, the maximum number of records is 250",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "statusGroup",
                        "in": "query",
                        "description": "Type of calls to be returned.",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "enum": [
                                "Missed",
                                "All"
                            ]
                        }
                    },
                    {
                        "name": "view",
                        "in": "query",
                        "description": "View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Simple",
                                "Detailed"
                            ],
                            "default": "Simple"
                        }
                    },
                    {
                        "name": "showDeleted",
                        "in": "query",
                        "description": "Supported for ISync. If 'True' then deleted call records are returned",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountCallLogSyncResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/call-log-sync",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadCallLog",
                "x-user-permission": "ReadCallLog",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/call-log/{callRecordId}": {
            "get": {
                "tags": [
                    "Call Log"
                ],
                "summary": "Get Company Call Log Record(s)",
                "description": "Returns individual call log record(s) by ID(s). Batch request is supported.",
                "operationId": "readCompanyCallRecord",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "callRecordId",
                        "in": "path",
                        "description": "Internal identifier of a call log record",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompanyCallLogRecord"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/call-log",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadCallLog",
                "x-user-permission": "FullCompanyCallLog",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/active-calls": {
            "get": {
                "tags": [
                    "Call Log"
                ],
                "summary": "Get Company Active Calls",
                "description": "Returns records of all calls that are in progress, ordered by start time in descending order.",
                "operationId": "listCompanyActiveCalls",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "The direction for the result records. If not specified, both inbound and outbound records are returned. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Inbound",
                                    "Outbound"
                                ]
                            }
                        }
                    },
                    {
                        "name": "view",
                        "description": "View of call records. The same view parameter specified for FSync will be applied for ISync, the view cannot be changed for ISync",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Simple",
                                "Detailed"
                            ],
                            "default": "Simple"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Call type of a record. If not specified, all call types are returned. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Voice",
                                    "Fax"
                                ]
                            }
                        }
                    },
                    {
                        "name": "transport",
                        "in": "query",
                        "description": "Call transport type. 'PSTN' specifies that a call leg is initiated from the PSTN network provider; 'VoIP' - from an RC phone. By default this filter is disabled",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "PSTN",
                                    "VoIP"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActiveCallsResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/active-calls",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadCallLog",
                "x-user-permission": "ReadCallLog",
                "x-docs-level": "Public",
                "x-availability": "Limited"
            }
        },
        "/restapi/v1.0/account/{accountId}/recording/{recordingId}": {
            "get": {
                "tags": [
                    "Call Recordings"
                ],
                "summary": "Get Call Recording",
                "description": "Returns call recordings by ID(s).",
                "operationId": "readCallRecording",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "recordingId",
                        "in": "path",
                        "description": "Internal identifier of a recording (returned in Call Log)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCallRecordingResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/recording",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadCallRecording",
                "x-user-permission": "ReadCallRecording",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/recording/{recordingId}/content": {
            "get": {
                "tags": [
                    "Call Recordings"
                ],
                "summary": "Get Call Recordings Data",
                "description": "Returns media content of a call recording.",
                "operationId": "listCallRecordingData",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "recordingId",
                        "in": "path",
                        "description": "Internal identifier of a recording (returned in Call Log)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Call Recording Media Data",
                        "content": {
                            "audio/x-wav": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "audio/mpeg": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/recording/content",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadCallRecording",
                "x-user-permission": "ReadCallRecording",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/sms": {
            "post": {
                "tags": [
                    "SMS"
                ],
                "summary": "Send SMS",
                "description": "Creates and sends a new text message. You can send SMS messages simultaneously to different recipients up to 50 requests per minute; this limitation is relevant for all client applications. Sending and receiving SMS is available for Toll-Free Numbers within the USA. You can send up to 10 attachments in one MMS message; the size of all attachments linked is limited to 1500000 bytes.",
                "operationId": "createSMSMessage",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSMSMessage"
                            }
                        },
                        "multipart/mixed": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSMSMessage"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSMSMessage"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMessageInfoResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/sms",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "Messaging",
                "x-app-permission": "SMS",
                "x-user-permission": "OutboundSMS",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/mms": {
            "post": {
                "tags": [
                    "MMS"
                ],
                "summary": "Create MMS Message",
                "description": "Creates and sends media messages. Sending MMS messages simultaneously to different recipients is limited up to 50 requests per minute; relevant for all client applications.",
                "operationId": "createMMS",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/mixed": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSMSMessage"
                            }
                        },
                        "multipart/formdata": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSMSMessage"
                            }
                        }
                    },
                    "description": "MMS envelope and content",
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "MMS Message",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMessageInfoResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/sms",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "Messaging",
                "x-app-permission": "SMS",
                "x-user-permission": "OutboundSMS",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/company-pager": {
            "post": {
                "tags": [
                    "Pager Messages"
                ],
                "summary": "Create Internal Text Message",
                "description": "Creates and sends an internal text message.",
                "operationId": "createInternalTextMessage",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateInternalTextMessageRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Created Text Message",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMessageInfoResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/company-pager",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "Messaging",
                "x-app-permission": "InternalMessages",
                "x-user-permission": "InternalSMS",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/fax": {
            "post": {
                "tags": [
                    "Fax"
                ],
                "summary": "Create Fax Message",
                "operationId": "createFaxMessage",
                "description": "Creates and sends/resends a new fax message. Resend can be done if sending failed.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account (integer) or tilde (~) to indicate the account which was logged-in within the current session.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension (integer) or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "attachment": {
                                        "description": "File to upload",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "faxResolution": {
                                        "description": "Resolution of Fax",
                                        "type": "string",
                                        "enum": [
                                            "High",
                                            "Low"
                                        ]
                                    },
                                    "to": {
                                        "description": "To Phone Number",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "sendTime": {
                                        "description": "Timestamp to send fax at. If not specified (current or the past), the fax is sent immediately",
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "isoCode": {
                                        "description": "ISO Code. e.g UK",
                                        "type": "string"
                                    },
                                    "coverIndex": {
                                        "description": "Cover page identifier. For the list of available cover page identifiers please call the method Fax Cover Pages. If not specified, the default cover page which is configured in 'Outbound Fax Settings' is attached",
                                        "type": "integer"
                                    },
                                    "coverPageText": {
                                        "description": "Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "attachment",
                                    "to"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Fax Message",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FaxResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/fax",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "Time-based",
                "x-app-permission": "Faxes",
                "x-user-permission": "OutboundFaxes",
                "x-docs-level": "Public",
                "x-team": "PLA Inno",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/dictionary/fax-cover-page": {
            "get": {
                "tags": [
                    "Fax"
                ],
                "summary": "Get Fax Cover Page List",
                "operationId": "listFaxCoverPages",
                "description": "Returns fax cover pages available for the current extension.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Fax Cover Pages",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListFaxCoverPagesResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "dictionary/fax-cover-page",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-team": "PLA Inno"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store": {
            "get": {
                "tags": [
                    "Message Store"
                ],
                "summary": "Get Message List",
                "description": "Returns the list of messages from an extension mailbox.",
                "operationId": "listMessages",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "availability",
                        "in": "query",
                        "description": "Specifies the availability status for the resulting messages. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Alive",
                                    "Deleted",
                                    "Purged"
                                ]
                            }
                        }
                    },
                    {
                        "name": "conversationId",
                        "in": "query",
                        "description": "Specifies the conversation identifier for the resulting messages",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Inbound",
                                    "Outbound"
                                ]
                            }
                        }
                    },
                    {
                        "name": "distinctConversations",
                        "in": "query",
                        "description": "If 'True', then the latest messages per every conversation ID are returned",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "messageType",
                        "in": "query",
                        "description": "The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Fax",
                                    "SMS",
                                    "VoiceMail",
                                    "Pager",
                                    "Text"
                                ]
                            }
                        }
                    },
                    {
                        "name": "readStatus",
                        "in": "query",
                        "description": "The read status for the resulting messages. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Read",
                                    "Unread"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "phoneNumber",
                        "in": "query",
                        "description": "The phone number. If specified, messages are returned for this particular phone number only",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMessageList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/message-store",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadMessages",
                "x-user-permission": "ReadMessages",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-notifications": [
                    {
                        "$ref": "#/components/schemas/InboundMessageEvent"
                    },
                    {
                        "$ref": "#/components/schemas/InstantMessageEvent"
                    },
                    {
                        "$ref": "#/components/schemas/MessageEvent"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Message Store"
                ],
                "summary": "Delete Conversation",
                "description": "Deletes conversation(s) by conversation ID(s). Batch request is supported.",
                "operationId": "deleteMessageByFilter",
                "parameters": [
                    {
                        "name": "conversationId",
                        "in": "query",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "required": false,
                        "description": "Messages received earlier then the date specified will be deleted. The default value is 'Now'",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "description": "Type of messages to be deleted",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Fax",
                                "SMS",
                                "VoiceMail",
                                "Pager",
                                "Text",
                                "All"
                            ],
                            "default": "All"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "extension/message-store",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditMessages",
                "x-user-permission": "EditMessages",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}": {
            "get": {
                "tags": [
                    "Message Store"
                ],
                "summary": "Get Message",
                "description": "Returns individual message record(s) by the given message ID(s). The length of inbound messages is unlimited. Batch request is supported.",
                "operationId": "readMessage",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "messageId",
                        "in": "path",
                        "description": "Internal identifier of a message",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMessageInfoResponse"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Multi-Status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMessageMultiResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/message-store",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadMessages",
                "x-user-permission": "ReadMessages",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-notifications": [
                    {
                        "$ref": "#/components/schemas/VoicemailMessageEvent"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Message Store"
                ],
                "summary": "Update Message(s)",
                "description": "Updates message(s) by ID(s). Batch request is supported, see Batch Requests for details. Currently, only the message read status updating is supported.",
                "operationId": "updateMessage",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "messageId",
                        "in": "path",
                        "description": "Internal identifier of a message",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMessageRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMessageInfoResponse"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Multi-Status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMessageMultiResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/message-store",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditMessages",
                "x-user-permission": "EditMessages",
                "x-docs-level": "Public"
            },
            "delete": {
                "tags": [
                    "Message Store"
                ],
                "summary": "Delete Message",
                "description": "Deletes message(s) by the given message ID(s). The first call of this method transfers the message to the 'Delete' status. The second call transfers the deleted message to the 'Purged' status. If it is required to make the message 'Purged' immediately (from the first call), then set the query parameter purge to 'True'.",
                "operationId": "deleteMessage",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "messageId",
                        "in": "path",
                        "description": "Internal identifier of a message",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "purge",
                        "in": "query",
                        "description": "If the value is 'True', then the message is purged immediately with all the attachments",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "conversationId",
                        "in": "query",
                        "description": "Internal identifier of a message thread",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "extension/message-store",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditMessages",
                "x-user-permission": "EditMessages",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}/content/{attachmentId}": {
            "get": {
                "tags": [
                    "Message Store"
                ],
                "summary": "Get Message Content",
                "operationId": "readMessageContent",
                "description": "Returns a specific message attachment data as media stream.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "attachmentId",
                        "in": "path",
                        "description": "Internal identifier of a message attachment",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "messageId",
                        "in": "path",
                        "description": "Internal identifier of a message",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "Range",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "contentDisposition",
                        "in": "query",
                        "required": false,
                        "description": "Content disposition of a response",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Inline",
                                "Attachment"
                            ],
                            "default": "Inline"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attachment Data",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "image/tiff": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/message-store/content",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadMessages",
                "x-user-permission": "ReadMessageContent",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/message-sync": {
            "get": {
                "tags": [
                    "Message Store"
                ],
                "summary": "Sync Messages",
                "description": "Synchronizes messages.",
                "operationId": "syncMessages",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "conversationId",
                        "in": "query",
                        "description": "Conversation identifier for the resulting messages. Meaningful for SMS and Pager messages only.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "The start datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is dateTo minus 24 hours",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "The end datetime for resulting messages in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is current time",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Inbound",
                                    "Outbound"
                                ]
                            }
                        }
                    },
                    {
                        "name": "distinctConversations",
                        "in": "query",
                        "description": "If 'True', then the latest messages per every conversation ID are returned",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "messageType",
                        "in": "query",
                        "description": "Type for the resulting messages. If not specified, all types of messages are returned. Multiple values are accepted",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Fax",
                                    "SMS",
                                    "VoiceMail",
                                    "Pager",
                                    "Text"
                                ]
                            }
                        }
                    },
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "Limits the number of records to be returned (works in combination with dateFrom and dateTo if specified)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "syncToken",
                        "in": "query",
                        "description": "Value of syncToken property of last sync request response",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "syncType",
                        "in": "query",
                        "description": "Type of message synchronization",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "FSync",
                                    "ISync"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMessageSyncResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/message-sync",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadMessages",
                "x-user-permission": "ReadMessages",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/message-store-configuration": {
            "get": {
                "tags": [
                    "Message Store"
                ],
                "summary": "Get Message Store Configuration",
                "operationId": "readMessageStoreConfiguration",
                "description": "Returns message store settings.",
                "parameters": [
                    {
                        "name": "accountId",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageStoreConfiguration"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/message-store-configuration",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-user-permission": "AccountAdministration",
                "x-app-permission": "EditAccounts",
                "x-docs-level": "Public"
            },
            "put": {
                "tags": [
                    "Message Store"
                ],
                "summary": "Update Message Store Configuration",
                "operationId": "updateMessageStoreConfiguration",
                "description": "Updates message store settings.",
                "parameters": [
                    {
                        "name": "accountId",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageStoreConfiguration"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageStoreConfiguration"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/message-store-configuration",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-user-permission": "AccountAdministration",
                "x-app-permission": "EditAccounts",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ring-out": {
            "post": {
                "tags": [
                    "RingOut"
                ],
                "summary": "Make RingOut Call",
                "description": "Makes a 2-leg RingOut call.",
                "operationId": "createRingOutCall",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/MakeRingOutRequest"
                },
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRingOutStatusResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/ringout",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "Time-based",
                "x-app-permission": "RingOut",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ring-out/{ringoutId}": {
            "get": {
                "tags": [
                    "RingOut"
                ],
                "summary": "Get RingOut Call Status",
                "description": "Returns the status of a 2-leg RingOut call.",
                "operationId": "readRingOutCallStatus",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "ringoutId",
                        "in": "path",
                        "description": "Internal identifier of a RingOut call",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRingOutStatusResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/ringout",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "Time-based",
                "x-app-permission": "RingOut",
                "x-docs-level": "Public"
            },
            "delete": {
                "tags": [
                    "RingOut"
                ],
                "summary": "Cancel RingOut Call",
                "description": "Cancels a 2-leg RingOut call.",
                "operationId": "deleteRingOutCall",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "ringoutId",
                        "in": "path",
                        "description": "Internal identifier of a RingOut call",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success"
                    }
                },
                "x-api-group": "extension/ringout",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "Time-based",
                "x-app-permission": "RingOut",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ringout": {
            "post": {
                "tags": [
                    "RingOut"
                ],
                "summary": "Make RingOut Call",
                "deprecated": true,
                "description": "Makes a 2-leg RingOut call.",
                "operationId": "createRingOutCallDeprecated",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/MakeRingOutRequest"
                },
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRingOutStatusResponseIntId"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/ringout",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "Time-based",
                "x-app-permission": "RingOut",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/ringout/{ringoutId}": {
            "get": {
                "tags": [
                    "RingOut"
                ],
                "deprecated": true,
                "summary": "Get RingOut Call Status",
                "description": "Returns status of a 2-leg RingOut call.",
                "operationId": "readRingOutCallStatusDeprecated",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "ringoutId",
                        "in": "path",
                        "description": "Internal identifier of a RingOut call",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRingOutStatusResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/ringout",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "Time-based",
                "x-app-permission": "RingOut",
                "x-docs-level": "Public"
            },
            "delete": {
                "tags": [
                    "RingOut"
                ],
                "deprecated": true,
                "summary": "Cancel RingOut Call",
                "description": "Cancels a 2-leg RingOut call.",
                "operationId": "deleteRingOutCallDeprecated",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "ringoutId",
                        "in": "path",
                        "description": "Internal identifier of a RingOut call",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "extension/ringout",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "Time-based",
                "x-app-permission": "RingOut",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact": {
            "get": {
                "tags": [
                    "External Contacts"
                ],
                "summary": "Get Contact List",
                "description": "Returns user personal contacts.",
                "operationId": "listContacts",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "startsWith",
                        "in": "query",
                        "description": "If specified, only contacts whose First name or Last name start with the mentioned substring are returned. Case-insensitive",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sorts results by the specified property",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "FirstName",
                                    "LastName",
                                    "Company"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "phoneNumber",
                        "in": "query",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/address-book/contact",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadContacts",
                "x-user-permission": "ReadPersonalContacts",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "post": {
                "tags": [
                    "External Contacts"
                ],
                "summary": "Create Contact",
                "description": "Creates personal user contact.",
                "operationId": "createContact",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "dialingPlan",
                        "in": "query",
                        "description": "A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/PersonalContactRequest"
                },
                "responses": {
                    "200": {
                        "description": "New Contact",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonalContactResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Contact cannot be created: max contacts count reached ($limit)"
                    }
                },
                "x-api-group": "extension/address-book/contact",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Contacts",
                "x-user-permission": "EditPersonalContacts",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book/contact/{contactId}": {
            "get": {
                "tags": [
                    "External Contacts"
                ],
                "summary": "Get Contact",
                "description": "Returns contact(s) by ID(s). Batch request is supported.",
                "operationId": "readContact",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Internal identifier of a contact record in the RingCentral database",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Contact",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonalContactResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/address-book/contact",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadContacts",
                "x-user-permission": "ReadPersonalContacts",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "External Contacts"
                ],
                "summary": "Update Contact",
                "description": "Updates personal contact information by contact ID(s). Batch request is supported",
                "operationId": "updateContact",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Internal identifier of a contact record in the RingCentral database",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "dialingPlan",
                        "in": "query",
                        "description": "A country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. The default value is home country of the current extension",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/PersonalContactRequest"
                },
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonalContactResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/address-book/contact",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Contacts",
                "x-user-permission": "EditPersonalContacts",
                "x-docs-level": "Public"
            },
            "delete": {
                "tags": [
                    "External Contacts"
                ],
                "summary": "Delete Contact",
                "description": "Deletes contact(s) by ID(s). Batch request is supported.",
                "operationId": "deleteContact",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Internal identifier of a contact record in the RingCentral database",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success"
                    }
                },
                "x-api-group": "extension/address-book/contact",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Contacts",
                "x-user-permission": "EditPersonalContacts",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/address-book-sync": {
            "get": {
                "tags": [
                    "External Contacts"
                ],
                "summary": "Address Book Synchronization",
                "description": "Synchronizes user contacts.",
                "operationId": "syncAddressBook",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "syncType",
                        "in": "query",
                        "description": "Type of synchronization",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "FSync",
                                    "ISync"
                                ]
                            }
                        }
                    },
                    {
                        "name": "syncToken",
                        "in": "query",
                        "description": "Value of syncToken property of the last sync request response",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of records per page to be returned. The max number of records is 250, which is also the default. For 'FSync' if the number of records exceeds the parameter value (either specified or default), all of the pages can be retrieved in several requests. For 'ISync' if the number of records exceeds the page size, the number of incoming changes to this number is limited",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageId",
                        "in": "query",
                        "description": "Internal identifier of a page. It can be obtained from the 'nextPageId' parameter passed in response body",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressBookSync"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/address-book-sync",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadContacts",
                "x-user-permission": "ReadPersonalContacts",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/favorite": {
            "get": {
                "tags": [
                    "External Contacts"
                ],
                "summary": "Get Favorite Contact List",
                "description": "Returns the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).",
                "operationId": "listFavoriteContacts",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Favorite Contact List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FavoriteContactList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/favorite",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-user-permission": "ReadPersonalContacts",
                "x-app-permission": "ReadContacts",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-notifications": [
                    {
                        "$ref": "#/components/schemas/ExtensionFavoritesEvent"
                    }
                ]
            },
            "put": {
                "tags": [
                    "External Contacts"
                ],
                "summary": "Update Favorite Contact List",
                "description": "Updates the list of favorite contacts of the current extension. Favorite contacts include both company contacts (extensions) and personal contacts (address book records).**Please note**: currently personal address book size is limited to 10 000 contacts.",
                "operationId": "updateFavoriteContactList",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FavoriteCollection"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Favorite Contact List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FavoriteContactList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/favorite",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Contacts",
                "x-user-permission": "EditPersonalContacts",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/directory/entries/search": {
            "post": {
                "tags": [
                    "Internal Contacts"
                ],
                "summary": "Search Company Directory Entries",
                "operationId": "searchDirectoryEntries",
                "description": "Returns contact information on corporate users of federated accounts according to the specified filtering and ordering.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchDirectoryEntriesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Paged collection of all contacts information for a given account according to filtering and ordering. Records can be empty if no data found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DirectoryResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Current request cannot be processed due to error in its body and/or url",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Some unexpected error during current request processing.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Network error during request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/directory/entries/search",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadExtensions",
                "x-auth-required": true,
                "x-internal-api": false,
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/directory/(.*)",
                "x-rewrite-uri-to": "/account-directory/v1/account/$1/directory/$2",
                "x-service-interface": "rest",
                "x-service-name": "adg",
                "x-service-version": "v1",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/directory/entries/{entryId}": {
            "get": {
                "tags": [
                    "Internal Contacts"
                ],
                "summary": "Get Corporate Directory Entry",
                "description": "Returns contact information on a particular corporate user of a federated account.",
                "operationId": "readDirectoryEntry",
                "parameters": [
                    {
                        "name": "entryId",
                        "in": "path",
                        "description": "Internal identifier of extension to read information for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of owning account",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact information for given parameters. If value doesn't found then empty body will be returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Current request cannot be processed due to error in its body and/or url",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Some unexpected error during current request processing",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Network error during request. One should check connection between ADG processing node and ADX data node",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/directory/entries/single",
                "x-app-permission": "ReadAccounts",
                "x-auth-required": true,
                "x-internal-api": false,
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/directory/(.*)",
                "x-rewrite-uri-to": "/account-directory/v1/account/$1/directory/$2",
                "x-service-interface": "rest",
                "x-service-name": "adg",
                "x-service-version": "v1",
                "x-throttling-group": "Medium",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/directory/entries": {
            "get": {
                "tags": [
                    "Internal Contacts"
                ],
                "summary": "Get Company Directory Entries",
                "operationId": "listDirectoryEntries",
                "description": "Returns contact information on corporate users of federated accounts. Please note: 1. `User`, `DigitalUser`, `VirtualUser` and `FaxUser` types are returned as `User` type. 2. `ApplicationExtension` type is not returned. 3. Only extensions in `Enabled`, `Disabled` and `NotActivated` state are returned.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showFederated",
                        "in": "query",
                        "description": "If 'True' then contacts of all accounts in federation are returned. If 'False' then only contacts of the current account are returned, and account section is eliminated in this case",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of an extension",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "User",
                                "Department",
                                "Announcement",
                                "Voicemail",
                                "SharedLinesGroup",
                                "PagingOnly",
                                "IvrMenu",
                                "ParkLocation",
                                "Limited"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "1"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Records count to be returned per one page. The default value is 1000. Specific keyword values: `all` - all records are returned in one page; `max` - maximum count of records that can be returned in one page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 2000,
                            "default": 1000
                        }
                    },
                    {
                        "name": "siteId",
                        "in": "query",
                        "description": "Internal identifier of the business site to which extensions belong",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-None-Match",
                        "in": "header",
                        "description": "If-None-Match",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paged collection of all contacts information for a given account. Records can be empty if no data found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DirectoryResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Current request cannot be processed due to error in its body and/or url.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Some unexpected error during current request processing.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Network error during request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/directory/entries",
                "x-app-permission": "ReadAccounts",
                "x-auth-required": true,
                "x-internal-api": false,
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/directory/(.*)",
                "x-rewrite-uri-to": "/account-directory/v1/account/$1/directory/$2",
                "x-service-interface": "rest",
                "x-service-name": "adg",
                "x-service-version": "v1",
                "x-throttling-group": "Medium",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/directory/federation": {
            "get": {
                "tags": [
                    "Internal Contacts"
                ],
                "summary": "Get Account Federation",
                "description": "Returns information on a federation and associated accounts.",
                "operationId": "readAccountFederation",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "RCExtensionId",
                        "in": "header",
                        "description": "RCExtensionId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of found federations. Records array can be empty if no data found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FederationResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Current request cannot be processed due to error in its body and/or url",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Some unexpected error during current request processing.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Network error during request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/directory/federation",
                "x-app-permission": "ReadAccounts",
                "x-auth-required": true,
                "x-internal-api": false,
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/directory/(.*)",
                "x-rewrite-uri-to": "/account-directory/v1/account/$1/directory/$2",
                "x-service-interface": "rest",
                "x-service-name": "adg",
                "x-service-version": "v1",
                "x-throttling-group": "Medium",
                "x-user-permission": "ReadCompanyInfo",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/presence": {
            "get": {
                "tags": [
                    "Presence"
                ],
                "summary": "Get User Presence Status",
                "description": "Returns presence status of an extension or several extensions by their ID(s). Batch request is supported. The 'presenceStatus' is returned as Offline (the parameters 'telephonyStatus', 'message', 'userStatus' and 'dndStatus' are not returned at all) for the following extension types: Department/Announcement Only/Take Messages Only (Voicemail)/Fax User/Paging Only Group/Shared Lines Group/IVR Menu/Application Extension/Park Location.If the user requests his/her own presence status, the response contains actual presence status even if the status publication is turned off. Batch request is supported. For batch requests the number of extensions in one request is limited to 30. If more extensions are included in the request, the error code 400 Bad Request is returned with the logical error code InvalidMultipartRequest and the corresponding message 'Extension Presence Info multipart request is limited to 30 extensions'.",
                "operationId": "readUserPresenceStatus",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "detailedTelephonyState",
                        "in": "query",
                        "description": "Whether to return detailed telephony state",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sipData",
                        "in": "query",
                        "description": "Whether to return SIP data",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPresenceInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/presence",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadPresence",
                "x-user-permission": "ReadPresenceStatus",
                "x-docs-level": "Public",
                "x-notifications": [
                    {
                        "$ref": "#/components/schemas/ExtensionPresenceEvent"
                    },
                    {
                        "$ref": "#/components/schemas/DetailedExtensionPresenceEvent"
                    },
                    {
                        "$ref": "#/components/schemas/DetailedExtensionPresenceWithSIPEvent"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Presence"
                ],
                "summary": "Update User Presence Status",
                "operationId": "updateUserPresenceStatus",
                "description": "Updates user-defined extension presence status, status message and DnD status by extension ID. Supported for regular User extensions only. The extension types listed do not support presence status: Department, Announcement Only, Take Messages Only (Voicemail), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.",
                "parameters": [
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PresenceInfoResource"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PresenceInfoResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/presence",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditPresence",
                "x-docs-level": "Public",
                "x-notifications": [
                    {
                        "$ref": "#/components/schemas/IncomingCallEvent"
                    },
                    {
                        "$ref": "#/components/schemas/MissedCallEvent"
                    }
                ]
            }
        },
        "/restapi/v1.0/account/{accountId}/presence": {
            "get": {
                "tags": [
                    "Presence"
                ],
                "summary": "Get User Presence Status List",
                "operationId": "readAccountPresence",
                "description": "Returns presence status of all extensions of an account. Please note: The presenceStatus is returned as Offline (the parameters telephonyStatus, message, userStatus and dndStatus are not returned at all) for the following extension types: Department, Announcement Only, Voicemail (Take Messages Only), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "detailedTelephonyState",
                        "in": "query",
                        "description": "Whether to return detailed telephony state",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sipData",
                        "in": "query",
                        "description": "Whether to return SIP data",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for account presence information",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number for account presence information items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountPresenceInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/presence",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadPresence",
                "x-user-permission": "ReadPresenceStatus",
                "x-docs-level": "Public",
                "x-notifications": [
                    {
                        "$ref": "#/components/schemas/AccountPresenceEvent"
                    }
                ]
            }
        },
        "/restapi/v1.0/glip/chats": {
            "get": {
                "tags": [
                    "Chats"
                ],
                "operationId": "listGlipChats",
                "summary": "Get Chats",
                "description": "Returns the list of chats where the user is a member and also public teams that can be joined. All records in response are sorted by creation time of a chat in ascending order.",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of chats to be fetched. By default all type of chats will be fetched",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Everyone",
                                    "Group",
                                    "Personal",
                                    "Direct",
                                    "Team"
                                ]
                            }
                        }
                    },
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "Number of chats to be fetched by one request. The maximum value is 250, by default - 30.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 250,
                            "default": 30
                        }
                    },
                    {
                        "name": "pageToken",
                        "in": "query",
                        "description": "Pagination token.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipChatsList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "glip/chats",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats",
                "x-rewrite-uri-to": "/glip/v1/chats",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/chats/{chatId}": {
            "get": {
                "tags": [
                    "Chats"
                ],
                "summary": "Get Chat",
                "operationId": "readGlipChat",
                "description": "Returns information about a chat by ID.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a chat. If tilda (~) is specified, then `/me` (Personal) chat will be returned",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipChatInfo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Chat Not Found."
                    }
                },
                "x-api-group": "glip/chats",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/(.*)",
                "x-rewrite-uri-to": "/glip/v1/chats/$1",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/conversations": {
            "get": {
                "tags": [
                    "Conversations"
                ],
                "operationId": "listGlipConversations",
                "summary": "Get Conversations",
                "description": "Returns the list of conversations where the user is a member. All records in response are sorted by creation time of a chat in ascending order.",
                "parameters": [
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "Number of conversations to be fetched by one request. The maximum value is 250, by default - 30",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 250,
                            "default": 30
                        }
                    },
                    {
                        "name": "pageToken",
                        "in": "query",
                        "description": "Pagination token.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipConversationsList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "glip/conversations",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/conversations",
                "x-rewrite-uri-to": "/glip/v1/conversations",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "post": {
                "tags": [
                    "Conversations"
                ],
                "operationId": "createGlipConversation",
                "summary": "Create/Open Conversation",
                "description": "Creates a new conversation or opens the existing one. If the conversation already exists, then its ID will be returned in response. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description. If you add a person to the existing conversation, it creates a whole new conversation.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateGlipConversationRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Conversation is opened",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipConversationInfo"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Conversation is created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipConversationInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    }
                },
                "x-api-group": "glip/conversations",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/conversations",
                "x-rewrite-uri-to": "/glip/v1/conversations",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/conversations/{chatId}": {
            "get": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Get Conversation",
                "operationId": "readGlipConversation",
                "description": "Returns information about the specified conversation, including the list of conversation participants. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description. If you add a person to the existing conversation, it creates a whole new conversation.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a conversation to be returned.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipConversationInfo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Conversation Not Found."
                    }
                },
                "x-api-group": "glip/conversations",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/conversations/(.*)",
                "x-rewrite-uri-to": "/glip/v1/conversations/$1",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/teams": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "operationId": "listGlipTeams",
                "summary": "Get Teams",
                "description": "Returns the list of teams where the user is a member (both archived and active) combined with a list of public teams that can be joined by the current user. All records in response are sorted by creation time of a chat in ascending order.",
                "parameters": [
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "Number of teams to be fetched by one request. The maximum value is 250, by default - 30",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 250,
                            "default": 30
                        }
                    },
                    {
                        "name": "pageToken",
                        "in": "query",
                        "description": "Pagination token.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipTeamsList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "glip/teams",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/teams",
                "x-rewrite-uri-to": "/glip/v1/teams",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "post": {
                "tags": [
                    "Teams"
                ],
                "operationId": "createGlipTeam",
                "summary": "Create Team",
                "description": "Creates a team, and adds a list of people to the team.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlipPostTeamBody"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipTeamInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "One of body parameters has invalid value."
                    }
                },
                "x-api-group": "glip/teams",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/teams",
                "x-rewrite-uri-to": "/glip/v1/teams",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/teams/{chatId}": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Get Team",
                "operationId": "readGlipTeam",
                "description": "Returns information about the specified team.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a team to be returned.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipTeamInfo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Team Not Found."
                    }
                },
                "x-api-group": "glip/teams",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/teams/(.*)",
                "x-rewrite-uri-to": "/glip/v1/teams/$1",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "patch": {
                "tags": [
                    "Teams"
                ],
                "summary": "Update Team",
                "operationId": "patchGlipTeam",
                "description": "Updates the name and description of the specified team.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a team to be updated.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlipPatchTeamBody"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipTeamInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "One of body parameters has invalid value."
                    },
                    "403": {
                        "description": "User is not Team Admin or Team is not active."
                    },
                    "404": {
                        "description": "Team Not Found."
                    }
                },
                "x-api-group": "glip/teams",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/teams/(.*)",
                "x-rewrite-uri-to": "/glip/v1/teams/$1",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "delete": {
                "tags": [
                    "Teams"
                ],
                "summary": "Delete Team",
                "operationId": "deleteGlipTeam",
                "description": "Deletes the specified team.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a team.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content."
                    },
                    "403": {
                        "description": "User is not Team Admin."
                    },
                    "404": {
                        "description": "Team Not Found."
                    }
                },
                "x-api-group": "glip/teams",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/teams/(.*)",
                "x-rewrite-uri-to": "/glip/v1/teams/$1",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/teams/{chatId}/join": {
            "post": {
                "tags": [
                    "Teams"
                ],
                "operationId": "joinGlipTeam",
                "summary": "Join Team",
                "description": "Adds the current user to the specified team.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a team to be joined.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "205": {
                        "description": "Reset Content"
                    },
                    "403": {
                        "description": "Team status is not Active or Team is not public"
                    },
                    "404": {
                        "description": "Team Not Found."
                    }
                },
                "x-api-group": "glip/teams/join",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/teams/(.*)/join",
                "x-rewrite-uri-to": "/glip/v1/teams/$1/join",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/teams/{chatId}/leave": {
            "post": {
                "tags": [
                    "Teams"
                ],
                "operationId": "leaveGlipTeam",
                "summary": "Leave Team",
                "description": "Removes the current user from the specified team.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a team to be left.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "205": {
                        "description": "Reset Content."
                    },
                    "403": {
                        "description": "Team status is not Active."
                    },
                    "404": {
                        "description": "Team Not Found."
                    }
                },
                "x-api-group": "glip/teams/leave",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/teams/(.*)/leave",
                "x-rewrite-uri-to": "/glip/v1/teams/$1/leave",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/teams/{chatId}/add": {
            "post": {
                "tags": [
                    "Teams"
                ],
                "operationId": "addGlipTeamMembers",
                "summary": "Add Team Members",
                "description": "Adds members to the specified team.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a team to add members to.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlipPostMembersListBody"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content."
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "403": {
                        "description": "User is not Team Admin."
                    },
                    "404": {
                        "description": "Team Not Found."
                    }
                },
                "x-api-group": "glip/teams/add-members",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/teams/(.*)/add",
                "x-rewrite-uri-to": "/glip/v1/teams/$1/add",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/teams/{chatId}/remove": {
            "post": {
                "tags": [
                    "Teams"
                ],
                "operationId": "removeGlipTeamMembers",
                "summary": "Remove Team Members",
                "description": "Removes members from the specified team.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a team to remove members from.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlipPostMembersIdsListBody"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content."
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "403": {
                        "description": "User is not Team Admin."
                    },
                    "404": {
                        "description": "Team Not Found."
                    }
                },
                "x-api-group": "glip/teams/remove-members",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/teams/(.*)/remove",
                "x-rewrite-uri-to": "/glip/v1/teams/$1/remove",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/teams/{chatId}/archive": {
            "post": {
                "tags": [
                    "Teams"
                ],
                "operationId": "archiveGlipTeam",
                "summary": "Archive Team",
                "description": "Changes the status of the specified team to 'Archived'.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a team to be archived.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "205": {
                        "description": "Reset Content"
                    },
                    "403": {
                        "description": "User is not Team Admin"
                    },
                    "404": {
                        "description": "Team Not Found"
                    }
                },
                "x-api-group": "glip/teams/archive",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/teams/(.*)/archive",
                "x-rewrite-uri-to": "/glip/v1/teams/$1/archive",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/teams/{chatId}/unarchive": {
            "post": {
                "tags": [
                    "Teams"
                ],
                "operationId": "unarchiveGlipTeam",
                "summary": "Unarchive Team",
                "description": "Changes the status of the specified team to 'Active'.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a team to be made active.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "205": {
                        "description": "Reset Content"
                    },
                    "403": {
                        "description": "User is not Team Admin"
                    },
                    "404": {
                        "description": "Team Not Found"
                    }
                },
                "x-api-group": "glip/teams/unarchive",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/teams/(.*)/unarchive",
                "x-rewrite-uri-to": "/glip/v1/teams/$1/unarchive",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/everyone": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Get Everyone Chat",
                "operationId": "readGlipEveryone",
                "description": "Returns information about Everyone chat.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipEveryoneInfo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Chat Not Found."
                    }
                },
                "x-api-group": "glip/everyone",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/everyone",
                "x-rewrite-uri-to": "/glip/v1/everyone",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "patch": {
                "tags": [
                    "Teams"
                ],
                "summary": "Update Everyone Сhat",
                "operationId": "patchGlipEveryone",
                "description": "Updates Everyone chat information.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGlipEveryoneRequest"
                            }
                        }
                    },
                    "description": "JSON body"
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipEveryoneInfo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Chat Not Found."
                    }
                },
                "x-api-group": "glip/everyone",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/everyone",
                "x-rewrite-uri-to": "/glip/v1/everyone",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/recent/chats": {
            "get": {
                "tags": [
                    "Chats"
                ],
                "summary": "Get Recent Chats",
                "operationId": "listRecentChats",
                "description": "Returns recent chats where the user is a member. All records in response are sorted by the `lastModifiedTime` in descending order (the latest changed chat is displayed first on page)",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of chats to be fetched. By default all chat types are returned",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Everyone",
                                    "Group",
                                    "Personal",
                                    "Direct",
                                    "Team"
                                ]
                            }
                        }
                    },
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "Max number of chats to be fetched by one request (Not more than 250).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 250,
                            "default": 30
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipChatsListWithoutNavigation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    }
                },
                "x-api-group": "glip/recent",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/recent/chats",
                "x-rewrite-uri-to": "/glip/v1/recent/chats",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/favorites": {
            "get": {
                "tags": [
                    "Chats"
                ],
                "summary": "Get Favorite Chats",
                "operationId": "listFavoriteChats",
                "description": "Returns a list of the current user's favorite chats.",
                "parameters": [
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "Max number of chats to be fetched by one request (Not more than 250).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 250,
                            "default": 30
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipChatsListWithoutNavigation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    }
                },
                "x-api-group": "glip/favorites",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/favorites",
                "x-rewrite-uri-to": "/glip/v1/favorites",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/chats/{chatId}/favorite": {
            "post": {
                "tags": [
                    "Chats"
                ],
                "operationId": "favoriteGlipChat",
                "summary": "Add Chat to Favorites",
                "description": "Adds the specified chat to the users's list of favorites.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a chat to add to favorite list.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Favorite chat list is limited to 250 unique chats"
                    },
                    "403": {
                        "description": "User is not member of chat"
                    },
                    "404": {
                        "description": "Chat not found"
                    }
                },
                "x-api-group": "glip/chats/favorite",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/(.*)/favorite",
                "x-rewrite-uri-to": "/glip/v1/chats/$1/favorite",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/chats/{chatId}/unfavorite": {
            "post": {
                "tags": [
                    "Chats"
                ],
                "operationId": "unfavoriteGlipChat",
                "summary": "Remove Chat from Favorites",
                "description": "Removes the specified chat from the users's list of favorites.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a chat to remove from favorite list.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Chat not found"
                    }
                },
                "x-api-group": "glip/chats/unfavorite",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/(.*)/unfavorite",
                "x-rewrite-uri-to": "/glip/v1/chats/$1/unfavorite",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/chats/{chatId}/read": {
            "post": {
                "tags": [
                    "Chats"
                ],
                "operationId": "markChatRead",
                "summary": "Mark Chat as Read",
                "description": "Sets the specified chat status to 'Read' for the current user.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Id of chat to be marked",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "403": {
                        "description": "You have no permissions to mark this chat"
                    },
                    "404": {
                        "description": "Chat is not found"
                    }
                },
                "x-api-group": "glip/glpum",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "GlipInternal",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/([0-9]+)/read",
                "x-rewrite-uri-to": "/glip/v1/chats/$1/read",
                "x-docs-level": "Public",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/chats/{chatId}/unread": {
            "post": {
                "tags": [
                    "Chats"
                ],
                "operationId": "markChatUnread",
                "summary": "Mark Chat as Unread",
                "description": "Sets the specified chat status to 'Unread' for the current user.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Id of chat to be marked",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "403": {
                        "description": "You have no permissions to mark this chat"
                    },
                    "404": {
                        "description": "Chat is not found"
                    }
                },
                "x-api-group": "glip/glpum",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "GlipInternal",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/([0-9]+)/unread",
                "x-rewrite-uri-to": "/glip/v1/chats/$1/unread",
                "x-docs-level": "Public",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/chats/{chatId}/posts/{postId}": {
            "get": {
                "tags": [
                    "Posts"
                ],
                "summary": "Get Post",
                "operationId": "readGlipPost",
                "description": "Returns information about the specified post.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a chat.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "description": "Internal identifier of a post.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipPostInfo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Post Not Found."
                    }
                },
                "x-api-group": "glip/chats/posts",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/(.*)/posts/(.*)",
                "x-rewrite-uri-to": "/glip/v1/chats/$1/posts/$2",
                "x-beta-api": true
            },
            "patch": {
                "tags": [
                    "Posts"
                ],
                "operationId": "patchGlipPost",
                "description": "Updates a specific post within a chat.",
                "summary": "Update Post",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a chat.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "description": "Internal identifier of a post to be updated.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlipPatchPostBody"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipPostInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "One of body parameters has invalid value."
                    },
                    "403": {
                        "description": "Requestor has no permissions to do this action."
                    },
                    "404": {
                        "description": "Chat not found."
                    }
                },
                "x-api-group": "glip/chats/posts",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/(.*)/posts/(.*)",
                "x-rewrite-uri-to": "/glip/v1/chats/$1/posts/$2",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "delete": {
                "tags": [
                    "Posts"
                ],
                "operationId": "deleteGlipPost",
                "description": "Deletes the specified post from the chat.",
                "summary": "Delete Post",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a chat.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "description": "Internal identifier of a post to be deleted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content."
                    },
                    "403": {
                        "description": "Requestor has no permissions to do this action."
                    },
                    "404": {
                        "description": "Post Not Found."
                    }
                },
                "x-api-group": "glip/chats/posts",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/(.*)/posts/(.*)",
                "x-rewrite-uri-to": "/glip/v1/chats/$1/posts/$2",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/chats/{chatId}/posts": {
            "get": {
                "tags": [
                    "Posts"
                ],
                "operationId": "readGlipPosts",
                "summary": "Get Posts",
                "description": "Returns a list of posts from the specified chat.",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a chat.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "Max number of posts to be fetched by one request (Not more than 250).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 250,
                            "default": 30
                        }
                    },
                    {
                        "name": "pageToken",
                        "in": "query",
                        "description": "Pagination token.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipPostsList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "glip/chats/posts",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/(.*)/posts/?",
                "x-rewrite-uri-to": "/glip/v1/chats/$1/posts",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "post": {
                "tags": [
                    "Posts"
                ],
                "operationId": "createGlipPost",
                "description": "Creates a post within the specified chat. Attachments are supported.",
                "summary": "Create Post",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a chat.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlipPostPostBody"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipPostInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "One of body parameters has invalid value."
                    },
                    "404": {
                        "description": "Resource for parameter [chatId] is not found."
                    }
                },
                "x-api-group": "glip/chats/posts",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/(.*)/posts/?",
                "x-rewrite-uri-to": "/glip/v1/chats/$1/posts",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/groups/{groupId}/posts": {
            "get": {
                "tags": [
                    "Posts"
                ],
                "deprecated": true,
                "operationId": "listGlipGroupPosts",
                "summary": "Get Group Posts",
                "description": "Returns posts which are available for the current user by group ID.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Internal identifier of a group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "Max number of records to be returned",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 250,
                            "default": 30
                        }
                    },
                    {
                        "name": "pageToken",
                        "in": "query",
                        "description": "Pagination token",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipPosts"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Group with specified ID is not found."
                    }
                },
                "x-api-group": "glip/posts",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/groups/([0-9]+)/posts",
                "x-rewrite-uri-to": "/glip/v1/groups/$1/posts",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-notifications": [
                    {
                        "$ref": "#/components/schemas/GlipPostEvent"
                    }
                ],
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "post": {
                "tags": [
                    "Posts"
                ],
                "deprecated": true,
                "summary": "Create Post in Group",
                "operationId": "createGlipGroupPost",
                "description": "Creates a new post in a group specified.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Internal identifier of a group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlipCreatePost"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipPostInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "404": {
                        "description": "Group not found."
                    }
                },
                "x-api-group": "glip/posts",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/groups/([0-9]+)/posts",
                "x-rewrite-uri-to": "/glip/v1/groups/$1/posts",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/groups/{groupId}/posts/{postId}/text": {
            "put": {
                "tags": [
                    "Posts"
                ],
                "deprecated": true,
                "summary": "Update Post",
                "operationId": "updateGlipPostText",
                "description": "Modifies text of a post.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Internal identifier of a group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "description": "Internal identifier of a post",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "text/*": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "x-api-group": "glip/posts",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/groups/([0-9]+)/posts/([0-9]+)/text",
                "x-rewrite-uri-to": "/glip/v1/groups/$1/posts/$2/text",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/cards": {
            "post": {
                "tags": [
                    "Posts"
                ],
                "deprecated": true,
                "operationId": "createGlipCard",
                "summary": "Create Card",
                "description": "Creates a new message.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "query",
                        "description": "Internal identifier of a group where to create a post with the card",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/GlipMessageAttachmentInfoRequest"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipMessageAttachmentInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    }
                },
                "x-api-group": "glip/cards",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/cards",
                "x-rewrite-uri-to": "/glip/v1/cards",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/cards/{cardId}": {
            "get": {
                "tags": [
                    "Posts"
                ],
                "deprecated": true,
                "operationId": "readGlipCard",
                "summary": "Get Card",
                "description": "Returns card(s) with given id(s).",
                "parameters": [
                    {
                        "name": "cardId",
                        "in": "path",
                        "description": "Internal identifier of a card or comma separated list of card IDs.",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipMessageAttachmentInfo"
                                }
                            },
                            "multipart/mixed": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipMessageAttachmentInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "404": {
                        "description": "Card not found."
                    }
                },
                "x-api-group": "glip/cards",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/cards/(.*)",
                "x-rewrite-uri-to": "/glip/v1/cards/$1",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "put": {
                "tags": [
                    "Posts"
                ],
                "deprecated": true,
                "summary": "Update Card",
                "operationId": "updateGlipCard",
                "description": "Updates a card.",
                "parameters": [
                    {
                        "name": "cardId",
                        "in": "path",
                        "description": "Internal identifier of a card",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/GlipMessageAttachmentInfoRequest"
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "404": {
                        "description": "Card for update does not exist."
                    }
                },
                "x-api-group": "glip/cards",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/cards/(.*)",
                "x-rewrite-uri-to": "/glip/v1/cards/$1",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "delete": {
                "tags": [
                    "Posts"
                ],
                "deprecated": true,
                "summary": "Delete Card",
                "operationId": "deleteGlipCard",
                "description": "Deletes a card by ID.",
                "parameters": [
                    {
                        "name": "cardId",
                        "in": "path",
                        "description": "Card ID to be deleted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "404": {
                        "description": "Card not found."
                    }
                },
                "x-api-group": "glip/cards",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/cards/(.*)",
                "x-rewrite-uri-to": "/glip/v1/cards/$1",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/events": {
            "get": {
                "tags": [
                    "Calendar Events"
                ],
                "description": "Returns all calendar events created by the current user.",
                "summary": "Get User Events List",
                "operationId": "readGlipEvents",
                "parameters": [
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "Number of groups to be fetched by one request. The maximum value is 250, by default - 30.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 250,
                            "default": 30
                        }
                    },
                    {
                        "name": "pageToken",
                        "in": "query",
                        "description": "Token of a page to be returned",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipEventsInfo"
                                }
                            },
                            "multipart/mixed": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipEventsInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "glip/events",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/events",
                "x-rewrite-uri-to": "/glip/v1/events",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "post": {
                "tags": [
                    "Calendar Events"
                ],
                "summary": "Create Event",
                "description": "Creates a new calendar event.",
                "operationId": "createEvent",
                "requestBody": {
                    "$ref": "#/components/requestBodies/GlipEventCreate"
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipEventInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    }
                },
                "x-api-group": "glip/events",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/events",
                "x-rewrite-uri-to": "/glip/v1/events",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/events/{eventId}": {
            "get": {
                "tags": [
                    "Calendar Events"
                ],
                "description": "Returns the specified calendar event(s) by ID(s).",
                "summary": "Get Event",
                "operationId": "readEvent",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "event id or comma separated list of event ids.",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipEventInfo"
                                }
                            },
                            "multipart/mixed": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipEventInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "404": {
                        "description": "Event not found."
                    }
                },
                "x-api-group": "glip/events",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/events/(.*)",
                "x-rewrite-uri-to": "/glip/v1/events/$1",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "put": {
                "tags": [
                    "Calendar Events"
                ],
                "description": "Updates the specified calendar event.",
                "summary": "Update Event",
                "operationId": "updateEvent",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "Internal identifier of an event",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/GlipEventCreate"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipEventInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "404": {
                        "description": "Event to update not exists."
                    }
                },
                "x-api-group": "glip/events",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/events/(.*)",
                "x-rewrite-uri-to": "/glip/v1/events/$1",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "delete": {
                "tags": [
                    "Calendar Events"
                ],
                "description": "Deletes the specified calendar event.",
                "summary": "Delete Event",
                "operationId": "deleteEvent",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "Internal identifier of an event to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "404": {
                        "description": "Event not found."
                    }
                },
                "x-api-group": "glip/events",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/events/(.*)",
                "x-rewrite-uri-to": "/glip/v1/events/$1",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/groups/{groupId}/events": {
            "post": {
                "tags": [
                    "Calendar Events"
                ],
                "summary": "Create Event by Group ID",
                "description": "Creates a new calendar event within the specified group.",
                "operationId": "createEventbyGroupId",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Internal identifier of a group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/GlipEventCreate"
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipEventInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    }
                },
                "x-api-group": "glip/groups/events",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/groups/([0-9]+)/events",
                "x-rewrite-uri-to": "/glip/v1/groups/$1/events",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "get": {
                "tags": [
                    "Calendar Events"
                ],
                "operationId": "listGroupEvents",
                "summary": "Get Group Events",
                "description": "Returns a list of calendar events available for the current user within the specified group. Users can only see their personal tasks and public tasks.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Internal identifier of a group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipEventInfo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Group with specified Id is not found."
                    }
                },
                "x-api-group": "glip/events",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/groups/([0-9]+)/events",
                "x-rewrite-uri-to": "/glip/v1/groups/$1/events",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/chats/{chatId}/notes": {
            "post": {
                "tags": [
                    "Notes"
                ],
                "description": "Creates a new note in the specified chat.",
                "operationId": "createChatNote",
                "summary": "Create Note",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a chat to create a note in",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/GlipNoteCreate"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipNoteInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "403": {
                        "description": "You do not have permissions to create note in the specified group."
                    },
                    "404": {
                        "description": "Group not found."
                    }
                },
                "x-api-group": "glip/notes",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Medium",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/([0-9]+)/notes",
                "x-rewrite-uri-to": "/glip/v1/chats/$1/notes",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "get": {
                "tags": [
                    "Notes"
                ],
                "description": "Returns the list of notes created in the specified chat.",
                "operationId": "listChatNotes",
                "summary": "Get Chat Notes",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a chat to fetch notes from.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creationTimeTo",
                        "in": "query",
                        "description": "The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45. The default value is Now.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creationTimeFrom",
                        "in": "query",
                        "description": "The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creatorId",
                        "in": "query",
                        "description": "Internal identifier of the user that created the note. Multiple values are supported",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status of notes to be fetched; if not specified all notes are fetched by default.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Active",
                                "Draft"
                            ]
                        }
                    },
                    {
                        "name": "pageToken",
                        "in": "query",
                        "description": "Pagination token",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "Max number of notes to be fetched by one request; the value range is 1-250.",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "maximum": 250,
                            "default": 30
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipNotesInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "403": {
                        "description": "You do not have permissions to get such kind of information."
                    },
                    "404": {
                        "description": "Group Not Found."
                    }
                },
                "x-api-group": "glip/notes",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Heavy",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/([0-9]+)/notes",
                "x-rewrite-uri-to": "/glip/v1/chats/$1/notes",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/notes/{noteId}": {
            "get": {
                "tags": [
                    "Notes"
                ],
                "description": "Returns the specified note(s). It is possible to fetch up to 50 notes per request.",
                "summary": "Get Note",
                "operationId": "readUserNote",
                "parameters": [
                    {
                        "name": "noteId",
                        "in": "path",
                        "description": "Internal identifier of a note to be fetched",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetGlipNoteInfo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "When note is not found."
                    }
                },
                "x-api-group": "glip/notes",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Medium",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/notes/(.*)",
                "x-rewrite-uri-to": "/glip/v1/notes/$1",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "patch": {
                "tags": [
                    "Notes"
                ],
                "description": "Edits a note. Notes can be edited by any user if posted to a chat the user belongs to.",
                "summary": "Update Note",
                "operationId": "patchNote",
                "parameters": [
                    {
                        "name": "noteId",
                        "in": "path",
                        "description": "Internal identifier of a note to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/GlipNoteCreate"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipNoteInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Note is locked by another user"
                    },
                    "403": {
                        "description": "You have no permissions to update the note"
                    },
                    "404": {
                        "description": "Note is not found"
                    }
                },
                "x-api-group": "glip/notes",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Medium",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/notes/([0-9]+)",
                "x-rewrite-uri-to": "/glip/v1/notes/$1",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "delete": {
                "tags": [
                    "Notes"
                ],
                "description": "Deletes the specified note.",
                "operationId": "deleteNote",
                "summary": "Delete Note",
                "parameters": [
                    {
                        "name": "noteId",
                        "in": "path",
                        "description": "Internal identifier of a note to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Note is locked by another user"
                    },
                    "403": {
                        "description": "You have no permissions to delete note"
                    },
                    "404": {
                        "description": "Note is not found"
                    }
                },
                "x-api-group": "glip/notes",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Medium",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/notes/(.*)",
                "x-rewrite-uri-to": "/glip/v1/notes/$1",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/notes/{noteId}/lock": {
            "post": {
                "tags": [
                    "Notes"
                ],
                "description": "Locks a note providing the user with the unique write access for 5 hours.",
                "summary": "Lock Note",
                "operationId": "lockNote",
                "parameters": [
                    {
                        "name": "noteId",
                        "in": "path",
                        "description": "Internal identifier of a note to be locked",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Сontent"
                    },
                    "400": {
                        "description": "Note is locked by another user"
                    },
                    "403": {
                        "description": "You have no permissions to lock the note"
                    },
                    "404": {
                        "description": "Note is not found"
                    }
                },
                "x-api-group": "glip/notes",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Light",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/notes/([0-9]+)/lock",
                "x-rewrite-uri-to": "/glip/v1/notes/$1/lock",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/notes/{noteId}/unlock": {
            "post": {
                "tags": [
                    "Notes"
                ],
                "description": "Unlocks a note letting other users edit this note. Once the note is locked (by another user) it cannot be unlocked during 5 hours since the lock datetime.",
                "operationId": "unlockNote",
                "summary": "Unlock Note",
                "parameters": [
                    {
                        "name": "noteId",
                        "in": "path",
                        "description": "Internal identifier of a note to be unlocked",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Note is locked by another user"
                    },
                    "403": {
                        "description": "You have no permissions to unlock the note"
                    },
                    "404": {
                        "description": "Note is not found"
                    }
                },
                "x-api-group": "glip/notes",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Light",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/notes/([0-9]+)/unlock",
                "x-rewrite-uri-to": "/glip/v1/notes/$1/unlock",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/notes/{noteId}/publish": {
            "post": {
                "tags": [
                    "Notes"
                ],
                "description": "Publishes a note making it visible to other users.",
                "operationId": "publishNote",
                "summary": "Publish Note",
                "parameters": [
                    {
                        "name": "noteId",
                        "in": "path",
                        "description": "Internal identifier of a note to be published",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "User is not a creator of note"
                    },
                    "404": {
                        "description": "Note is not found"
                    }
                },
                "x-api-group": "glip/notes",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Medium",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/notes/([0-9]+)/publish",
                "x-rewrite-uri-to": "/glip/v1/notes/$1/publish",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/chats/{chatId}/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "description": "Returns the list of tasks of the specified chat.",
                "summary": "Get Chat Tasks",
                "operationId": "listChatTasks",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a chat",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creationTimeTo",
                        "in": "query",
                        "description": "The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2019-03-10T18:23:45Z",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "now"
                        }
                    },
                    {
                        "name": "creationTimeFrom",
                        "in": "query",
                        "description": "The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, e.g. 2016-02-23T00:00:00",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creatorId",
                        "in": "query",
                        "description": "Internal identifier of a task creator",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Task execution status",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Pending",
                                    "InProgress",
                                    "Completed"
                                ]
                            }
                        }
                    },
                    {
                        "name": "assignmentStatus",
                        "in": "query",
                        "description": "Task assignment status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Unassigned",
                                "Assigned"
                            ]
                        }
                    },
                    {
                        "name": "assigneeId",
                        "in": "query",
                        "description": "Internal identifier of a task assignee",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "assigneeStatus",
                        "in": "query",
                        "description": "Task execution status by assignee(-s) specified in assigneeId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Pending",
                                "Completed"
                            ]
                        }
                    },
                    {
                        "name": "pageToken",
                        "in": "query",
                        "description": "Token of the current page. If token is omitted then the first page should be returned",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "Number of records to be returned per screen",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 250,
                            "default": 30
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipTaskList"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input parameter(-s)"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Specified chat ID doesn`t exist"
                    }
                },
                "x-api-group": "glip/chats/tasks",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Heavy",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/(.*)/tasks",
                "x-rewrite-uri-to": "/glip/v1/chats/$1/tasks",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "post": {
                "tags": [
                    "Tasks"
                ],
                "description": "Creates a task in the specified chat.",
                "operationId": "createTask",
                "summary": "Create Task",
                "parameters": [
                    {
                        "name": "chatId",
                        "in": "path",
                        "description": "Internal identifier of a chat",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlipCreateTask"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Task information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipTaskInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input parameter(-s)"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Specified chat ID doesn`t exist"
                    }
                },
                "x-api-group": "glip/tasks",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Medium",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/chats/(.*)/tasks",
                "x-rewrite-uri-to": "/glip/v1/chats/$1/tasks",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/tasks/{taskId}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "description": "Returns information about the specified task(s) by ID(s).",
                "operationId": "readTask",
                "summary": "Get Task",
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "description": "Internal identifier of a task, or comma separated list of task IDs",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task Information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipTaskInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input parameter(-s)"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Requested task ID doesn`t exist"
                    }
                },
                "x-api-group": "glip/tasks",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Medium",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/tasks/(.*)",
                "x-rewrite-uri-to": "/glip/v1/tasks/$1",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "patch": {
                "tags": [
                    "Tasks"
                ],
                "description": "Updates the specified task by ID.",
                "operationId": "patchTask",
                "summary": "Patch Task",
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "description": "Internal identifier of a task",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlipUpdateTask"
                            }
                        }
                    },
                    "description": "JSON body"
                },
                "responses": {
                    "200": {
                        "description": "Updated Tasks",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipTaskList"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input parameter(-s)"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Task with the specified ID doesn`t exist"
                    }
                },
                "x-api-group": "glip/tasks",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Medium",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/tasks/(.*)",
                "x-rewrite-uri-to": "/glip/v1/tasks/$1",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "description": "Deletes the specified task.",
                "summary": "Delete Task",
                "operationId": "deleteTask",
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "description": "Internal identifier of a task",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Task with the specified ID doesn`t exist"
                    }
                },
                "x-api-group": "glip/tasks",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Medium",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/tasks/(.*)",
                "x-rewrite-uri-to": "/glip/v1/tasks/$1",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/tasks/{taskId}/complete": {
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Complete Task",
                "operationId": "completeTask",
                "description": "Completes a task in the specified chat.",
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "description": "Internal identifier of a task",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlipCompleteTask"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid input parameter(-s)"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Requested task ID doesn`t exist"
                    }
                },
                "x-api-group": "glip/tasks/complete",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Medium",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/tasks/(.*)/complete",
                "x-rewrite-uri-to": "/glip/v1/tasks/$1/complete",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/persons/{personId}": {
            "get": {
                "tags": [
                    "Glip Profile"
                ],
                "summary": "Get Person",
                "operationId": "readGlipPerson",
                "description": "Returns a user or multiple users by their ID(s). Batch request is supported.",
                "parameters": [
                    {
                        "name": "personId",
                        "in": "path",
                        "description": "Internal identifier of a user to be returned, the maximum number of IDs is 30",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipPersonInfo"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Mixed Result"
                    },
                    "403": {
                        "description": "You do not have permissions to get such kind of information"
                    },
                    "404": {
                        "description": "Person Not Found"
                    }
                },
                "x-api-group": "glip/persons",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/persons/(.*)",
                "x-rewrite-uri-to": "/glip/v1/persons/$1",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/companies/{companyId}": {
            "get": {
                "tags": [
                    "Glip Profile"
                ],
                "summary": "Get Company Info",
                "operationId": "readGlipCompany",
                "description": "Returns information about one or more companies by their IDs.",
                "parameters": [
                    {
                        "name": "companyId",
                        "in": "path",
                        "description": "Internal identifier of an RC account/Glip company, or tilde (~) to indicate a company the current user belongs to.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipCompany"
                                }
                            },
                            "multipart/mixed": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipCompany"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Mixed Result"
                    },
                    "403": {
                        "description": "You do not have permissions to get such kind of information"
                    },
                    "404": {
                        "description": "Company Not Found"
                    }
                },
                "x-api-group": "glip/companies",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/companies/(.*)",
                "x-rewrite-uri-to": "/glip/v1/companies/$1",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/groups/{groupId}/webhooks": {
            "post": {
                "tags": [
                    "Glip Webhooks"
                ],
                "summary": "Create Webhook in Group",
                "operationId": "createGlipGroupWebhook",
                "description": "Creates a new webhook",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Internal identifier of a group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipWebhookInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    }
                },
                "x-api-group": "glip/webhooks",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/groups/([0-9]+)/webhooks",
                "x-rewrite-uri-to": "/glip/v1/groups/$1/webhooks",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "get": {
                "tags": [
                    "Glip Webhooks"
                ],
                "summary": "Get Webhooks in Group",
                "operationId": "listGlipGroupWebhooks",
                "description": "Returns webhooks which are available for the current user by group ID.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Internal identifier of a group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipWebhookList"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Group with specified ID is not found."
                    }
                },
                "x-api-group": "glip/webhooks",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/groups/([0-9]+)/webhooks",
                "x-rewrite-uri-to": "/glip/v1/groups/$1/webhooks",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/webhooks": {
            "get": {
                "tags": [
                    "Glip Webhooks"
                ],
                "summary": "Get Webhooks",
                "operationId": "listGlipWebhooks",
                "description": "Returns a list of all webhooks associated with the current account.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipWebhookList"
                                }
                            },
                            "multipart/mixed": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipWebhookList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "glip/webhooks",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/webhooks",
                "x-rewrite-uri-to": "/glip/v1/webhooks",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/webhooks/{webhookId}": {
            "get": {
                "tags": [
                    "Glip Webhooks"
                ],
                "summary": "Get Webhook",
                "operationId": "readGlipWebhook",
                "description": "Returns webhooks(s) with the specified id(s).",
                "parameters": [
                    {
                        "name": "webhookId",
                        "in": "path",
                        "description": "Internal identifier of a webhook or comma separated list of webhooks IDs",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipWebhookList"
                                }
                            },
                            "multipart/mixed": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipWebhookList"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "404": {
                        "description": "Webhooks not found."
                    }
                },
                "x-api-group": "glip/webhooks",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/webhooks/(.*)",
                "x-rewrite-uri-to": "/glip/v1/webhooks/$1",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            },
            "delete": {
                "tags": [
                    "Glip Webhooks"
                ],
                "summary": "Delete Webhook",
                "operationId": "deleteGlipWebhook",
                "description": "Deletes the webhook by ID.",
                "parameters": [
                    {
                        "name": "webhookId",
                        "in": "path",
                        "description": "Internal identifier of a webhook",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The resource was deleted successfully."
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "404": {
                        "description": "Webhook not found."
                    }
                },
                "x-api-group": "glip/webhooks",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/webhooks/(.*)",
                "x-rewrite-uri-to": "/glip/v1/webhooks/$1",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/webhooks/{webhookId}/activate": {
            "post": {
                "tags": [
                    "Glip Webhooks"
                ],
                "summary": "Activate Webhook",
                "operationId": "activateGlipWebhook",
                "description": "Activates webhook by ID.",
                "parameters": [
                    {
                        "name": "webhookId",
                        "in": "path",
                        "description": "Internal identifier of a webhook",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "404": {
                        "description": "Webhook not found."
                    }
                },
                "x-api-group": "glip/webhooks",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/webhooks/(.*)",
                "x-rewrite-uri-to": "/glip/v1/webhooks/$1",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/webhooks/{webhookId}/suspend": {
            "post": {
                "tags": [
                    "Glip Webhooks"
                ],
                "summary": "Suspend Webhook",
                "operationId": "suspendGlipWebhook",
                "description": "Suspends webhook by ID.",
                "parameters": [
                    {
                        "name": "webhookId",
                        "in": "path",
                        "description": "Internal identifier of a webhook",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "404": {
                        "description": "Webhook not found."
                    }
                },
                "x-api-group": "glip/webhooks",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/webhooks/(.*)",
                "x-rewrite-uri-to": "/glip/v1/webhooks/$1",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/preferences": {
            "get": {
                "tags": [
                    "Glip Profile"
                ],
                "summary": "Get Preferences",
                "operationId": "readGlipPreferences",
                "description": "Returns information about user preferences.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipPreferencesInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "glip/preferences",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/preferences/?",
                "x-rewrite-uri-to": "/glip/v1/preferences",
                "x-docs-level": "Public",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/groups": {
            "get": {
                "deprecated": true,
                "tags": [
                    "Chats"
                ],
                "operationId": "listGlipGroups",
                "summary": "Get User Groups",
                "description": "Returns the list of groups where the user is a member.",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of groups to be fetched (by default all type of groups will be fetched)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Group",
                                "Team",
                                "PrivateChat",
                                "PersonalChat"
                            ]
                        }
                    },
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "Number of groups to be fetched by one request. The maximum value is 250, by default - 30",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 250,
                            "default": 30
                        }
                    },
                    {
                        "name": "pageToken",
                        "in": "query",
                        "description": "Pagination token.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipGroupList"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Group with the specified ID is not found."
                    }
                },
                "x-api-group": "glip/groups",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-throttling-group": "Medium",
                "x-notifications": [
                    {
                        "$ref": "#/components/schemas/GlipGroupsEvent"
                    }
                ],
                "x-rewrite-uri-from": "/restapi/v1.0/glip/groups",
                "x-rewrite-uri-to": "/glip/v1/groups",
                "x-beta-api": true
            },
            "post": {
                "deprecated": true,
                "tags": [
                    "Chats"
                ],
                "summary": "Create Group",
                "operationId": "createGlipGroup",
                "description": "Creates a new private chat/team.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlipCreateGroup"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipGroupInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "x-api-group": "glip/groups",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/groups",
                "x-rewrite-uri-to": "/glip/v1/groups",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-throttling-group": "Medium",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/groups/{groupId}": {
            "get": {
                "deprecated": true,
                "tags": [
                    "Chats"
                ],
                "summary": "Get Group",
                "operationId": "readGlipGroup",
                "description": "Returns information about a group or multiple groups by their ID(s). Batch request is supported.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Internal identifier of a group to be returned, the maximum number of IDs is 30",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipGroupInfo"
                                }
                            },
                            "multipart/mixed": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipGroupInfo"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Mixed Result"
                    },
                    "403": {
                        "description": "You do not have permissions to get such kind of information."
                    },
                    "404": {
                        "description": "Person Not Found."
                    }
                },
                "x-api-group": "glip/groups",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/groups/(.*)",
                "x-rewrite-uri-to": "/glip/v1/groups/$1",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/groups/{groupId}/bulk-assign": {
            "post": {
                "deprecated": true,
                "tags": [
                    "Chats"
                ],
                "summary": "Edit Group Members",
                "operationId": "assignGlipGroupMembers",
                "description": "Updates group members. **Please note:** Only groups of 'Team' type can be updated. Currently only one operation at a time (either adding or removal) is supported.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Internal identifier of a group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EditGroupRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipGroupInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "x-api-group": "glip/groups",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/groups/([0-9]+)/bulk-assign",
                "x-rewrite-uri-to": "/glip/v1/groups/$1/bulk-assign",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-throttling-group": "Medium",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/posts": {
            "get": {
                "tags": [
                    "Posts"
                ],
                "summary": "Get Posts",
                "operationId": "listGlipPosts",
                "deprecated": true,
                "description": "Returns posts available for the current user by group ID.",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "query",
                        "description": "Identifier of a group to filter posts",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageToken",
                        "in": "query",
                        "description": "Token of a page to be returned",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "recordCount",
                        "in": "query",
                        "description": "Number of records to be returned. The maximum value is 250, by default - 30",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "maximum": 250,
                            "default": 30
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipPosts"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Group with the specified ID is not found."
                    }
                },
                "x-api-group": "glip/posts",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/posts",
                "x-rewrite-uri-to": "/glip/v1/posts",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "post": {
                "tags": [
                    "Posts"
                ],
                "summary": "Create Post",
                "operationId": "createPost",
                "deprecated": true,
                "description": "Creates a post.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GlipCreatePost"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlipPostInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "404": {
                        "description": "Group not found."
                    }
                },
                "x-api-group": "glip/posts",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/posts",
                "x-rewrite-uri-to": "/glip/v1/posts",
                "x-app-permission": "Glip",
                "x-user-permission": "Glip",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/unified-presence": {
            "get": {
                "tags": [
                    "Presence"
                ],
                "description": "Returns the unified presence status of the requested user(s). The set of parameters returned by this method differs whether you return the requester's presence or any other user presence.",
                "operationId": "readUnifiedPresence",
                "summary": "Get Unified Presence",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": null
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": null
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnifiedPresence"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Multi-Status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnifiedPresenceList"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format."
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "x-api-group": "extension/unified-presence",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadPresence",
                "x-user-permission": "ReadPresenceStatus",
                "x-throttling-group": "Medium",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/extension/(.*)/unified-presence",
                "x-rewrite-uri-to": "/glip/v1/company/$1/contact/$2/presence",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "patch": {
                "tags": [
                    "Presence"
                ],
                "description": "Updates the unified presence for the current user specified in path.",
                "summary": "Update Unified Presence",
                "operationId": "updateUnifiedPresence",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": null
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": null
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUnifiedPresence"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnifiedPresence"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Some of parameters are missing or have invalid format"
                    },
                    "403": {
                        "description": "User is not allowed to do this action"
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                },
                "x-api-group": "extension/unified-presence",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditPresence",
                "x-user-permission": "EditPresenceStatus",
                "x-throttling-group": "Medium",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/extension/(.*)/unified-presence",
                "x-rewrite-uri-to": "/glip/v1/company/$1/contact/$2/presence",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting": {
            "get": {
                "tags": [
                    "Meeting Management"
                ],
                "summary": "Get Scheduled Meetings",
                "operationId": "listMeetings",
                "description": "Returns a list of meetings for a particular extension. The list of meetings does not include meetings of 'Instant' type.",
                "parameters": [
                    {
                        "name": "extensionId",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Scheduled Meeting List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeetingsResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/meeting",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-user-permission": "Meetings",
                "x-app-permission": "Meetings",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "post": {
                "tags": [
                    "Meeting Management"
                ],
                "summary": "Create Meetings",
                "operationId": "createMeeting",
                "description": "Creates a new meeting.",
                "parameters": [
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/MeetingRequestResource"
                },
                "responses": {
                    "201": {
                        "description": "Created Meeting",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeetingResponseResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/meeting",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-user-permission": "Meetings",
                "x-app-permission": "Meetings",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}": {
            "get": {
                "tags": [
                    "Meeting Management"
                ],
                "summary": "Get Meeting Info",
                "operationId": "readMeeting",
                "description": "Returns a particular meetings details by ID.",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral meeting",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Meeting Info",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeetingResponseResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/meeting",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Meetings",
                "x-user-permission": "Meetings",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "put": {
                "tags": [
                    "Meeting Management"
                ],
                "summary": "Update Meeting",
                "operationId": "updateMeeting",
                "description": "Modifies a particular meeting.",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral meeting",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/MeetingRequestResource"
                },
                "responses": {
                    "200": {
                        "description": "OK: Updated Meeting Info",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeetingResponseResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/meeting",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Meetings",
                "x-user-permission": "Meetings",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "delete": {
                "tags": [
                    "Meeting Management"
                ],
                "summary": "Delete Meeting",
                "operationId": "deleteMeeting",
                "description": "Deletes a scheduled meeting.",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral meeting",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "extension/meeting",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Meetings",
                "x-user-permission": "Meetings",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/{meetingId}/end": {
            "post": {
                "tags": [
                    "Meeting Management"
                ],
                "summary": "End Meeting",
                "operationId": "endMeeting",
                "description": "Ends a meetings which is in progress.",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral meeting",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "extension/meeting/end",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Meetings",
                "x-user-permission": "Meetings",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meeting/service-info": {
            "get": {
                "tags": [
                    "Meeting Configuration"
                ],
                "summary": "Get Meeting Service Info",
                "operationId": "readMeetingServiceInfo",
                "description": "Returns information on dial-in numbers for meetings, support and international dial-in numbers URIs and meeting account information.",
                "parameters": [
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Meeting Service Info",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeetingServiceInfoResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/meeting/service-info",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Meetings",
                "x-user-permission": "Meetings",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meetings-configuration/assistants": {
            "get": {
                "tags": [
                    "Meeting Configuration"
                ],
                "summary": "Get Assistants",
                "operationId": "readAssistants",
                "description": "Returns assistants information.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Assistants Info",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssistantsResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/meeting/assistant-info",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Meetings",
                "x-user-permission": "Meetings",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/meetings-configuration/assisted": {
            "get": {
                "tags": [
                    "Meeting Configuration"
                ],
                "summary": "Get Assisted Users",
                "operationId": "readAssistedUsers",
                "description": "Returns assisted users information.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Assisted User Info",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssistedUsersResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/meeting/assistant-info",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "Meetings",
                "x-user-permission": "Meetings",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/subscription": {
            "get": {
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Get Subscriptions",
                "operationId": "listSubscriptions",
                "description": "Returns a list of subscriptions created by a particular user on a particular client app.",
                "responses": {
                    "200": {
                        "description": "List of Subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecordsCollectionResourceSubscriptionResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "subscription",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public"
            },
            "post": {
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Create Subscription",
                "description": "Creates a new subscription.",
                "operationId": "createSubscription",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSubscriptionRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Created Subscription",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "subscription",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/subscription/{subscriptionId}": {
            "get": {
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Get Subscription",
                "description": "Returns the requested subscription.",
                "operationId": "readSubscription",
                "parameters": [
                    {
                        "name": "subscriptionId",
                        "in": "path",
                        "description": "Internal identifier of a subscription",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Existing Subscription",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "subscription",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public"
            },
            "put": {
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Renew Subscription / Update Event Filters",
                "description": "Renews the existent subscription if the request body is empty. If event filters are specified, calling this method modifies the event filters for the existing subscription. The client application can extend or narrow the events for which it receives notifications in the frame of one subscription.",
                "operationId": "updateSubscription",
                "parameters": [
                    {
                        "name": "subscriptionId",
                        "in": "path",
                        "description": "Internal identifier of a subscription",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "aggregated",
                        "in": "query",
                        "description": "If 'True' then aggregated presence status is returned in a notification payload",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModifySubscriptionRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Updated Subscription",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "subscription",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public"
            },
            "delete": {
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Cancel Subscription",
                "description": "Cancels the existent subscription.",
                "operationId": "deleteSubscription",
                "parameters": [
                    {
                        "name": "subscriptionId",
                        "in": "path",
                        "description": "Internal identifier of a subscription",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "subscription",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/subscription/{subscriptionId}/renew": {
            "post": {
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Renew Subscription",
                "description": "Renews an existent subscription by ID by posting request with an empty body.",
                "operationId": "renewSubscription",
                "parameters": [
                    {
                        "name": "subscriptionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated Subscription",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "subscription",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/authz-profile": {
            "get": {
                "tags": [
                    "User Permissions"
                ],
                "summary": "Get Authorization Profile",
                "operationId": "readAuthorizationProfile",
                "description": "Returns a list of user permissions granted at authorization procedure. Please note: Some permissions may be restricted by extension type.",
                "parameters": [
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthProfileResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/authz-profile",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/authz-profile/check": {
            "get": {
                "tags": [
                    "User Permissions"
                ],
                "summary": "Check User Permission",
                "operationId": "checkUserPermission",
                "description": "Checks if a certain user permission is activated for a particular extension.",
                "parameters": [
                    {
                        "name": "permissionId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetExtensionId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthProfileCheckResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/authz-profile/check",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/business-hours": {
            "get": {
                "tags": [
                    "Business Hours"
                ],
                "summary": "Get User Business Hours",
                "description": "Returns the user hours when the call handling rules are applied. **Please note:** If user hours are set to 'Custom hours' then a particular schedule is returned; however if set to '24 hours/7 days a week' an empty schedule is returned.",
                "operationId": "readUserBusinessHours",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserBusinessHoursResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/business-hours",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadExtensions",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "Business Hours"
                ],
                "summary": "Update User Business Hours",
                "operationId": "updateUserBusinessHours",
                "description": "Updates the extension user hours when answering rules are to be applied.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserBusinessHoursUpdateRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserBusinessHoursUpdateResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/business-hours",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditUserAnsweringRules",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/business-hours": {
            "get": {
                "tags": [
                    "Business Hours"
                ],
                "summary": "Get Company Business Hours",
                "description": "Returns company hours when answering rules are to be applied.",
                "operationId": "readCompanyBusinessHours",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompanyBusinessHours"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/answering-rule",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadUserAnsweringRules",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "Business Hours"
                ],
                "summary": "Update Company Business Hours",
                "description": "Updates company hours when answering rules are to be applied.",
                "operationId": "updateCompanyBusinessHours",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CompanyBusinessHoursUpdateRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompanyBusinessHours"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/answering-rule",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditUserAnsweringRules",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking": {
            "get": {
                "tags": [
                    "Call Blocking"
                ],
                "summary": "Get Caller Blocking Settings",
                "description": "Returns the current caller blocking settings of a user.",
                "operationId": "readCallerBlockingSettings",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallerBlockingSettings"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/caller-blocking",
                "x-throttling-group": "Light",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadBlockedNumbers",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "Call Blocking"
                ],
                "summary": "Update Caller Blocking Settings",
                "operationId": "updateCallerBlockingSettings",
                "description": "Updates the current caller blocking settings of a user.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CallerBlockingSettingsUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallerBlockingSettings"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/caller-blocking",
                "x-throttling-group": "Light",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditBlockedNumbers",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking/phone-numbers": {
            "get": {
                "tags": [
                    "Call Blocking"
                ],
                "summary": "Get Blocked/Allowed Phone Numbers",
                "description": "Returns the lists of blocked and allowed phone numbers.",
                "operationId": "listBlockedAllowedNumbers",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Blocked",
                                "Allowed"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockedAllowedPhoneNumbersList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/caller-blocking/phone-numbers",
                "x-throttling-group": "Light",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadBlockedNumbers",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "post": {
                "tags": [
                    "Call Blocking"
                ],
                "summary": "Add Blocked/Allowed Number",
                "description": "Updates either blocked or allowed phone number list with a new phone number.",
                "operationId": "createBlockedAllowedNumber",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddBlockedAllowedPhoneNumber"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockedAllowedPhoneNumberInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/caller-blocking/phone-numbers",
                "x-throttling-group": "Medium",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditBlockedNumbers",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-blocking/phone-numbers/{blockedNumberId}": {
            "get": {
                "tags": [
                    "Call Blocking"
                ],
                "summary": "Get Blocked/Allowed Number",
                "operationId": "readBlockedAllowedNumber",
                "description": "Returns blocked or allowed phone number(s) by their ID(s). Batch request is supported.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "blockedNumberId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockedAllowedPhoneNumberInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/caller-blocking/phone-numbers",
                "x-throttling-group": "Light",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadBlockedNumbers",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "delete": {
                "tags": [
                    "Call Blocking"
                ],
                "summary": "Delete Blocked/Allowed Number",
                "operationId": "deleteBlockedAllowedNumber",
                "description": "Deletes blocked or allowed phone number(s) by their ID(s). Batch request is supported.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "blockedNumberId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-api-group": "extension/caller-blocking/phone-numbers",
                "x-throttling-group": "Medium",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditBlockedNumbers",
                "x-docs-level": "Public"
            },
            "put": {
                "tags": [
                    "Call Blocking"
                ],
                "summary": "Update Blocked/Allowed Number",
                "operationId": "updateBlockedAllowedNumber",
                "description": "Updates blocked or allowed phone number(s) by their ID(s). Batch request is supported.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "blockedNumberId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddBlockedAllowedPhoneNumber"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockedAllowedPhoneNumberInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/caller-blocking/phone-numbers",
                "x-throttling-group": "Medium",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditBlockedNumbers",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number": {
            "get": {
                "tags": [
                    "Call Forwarding"
                ],
                "summary": "Get Forwarding Number List",
                "description": "Returns the list of extension phone numbers used for call forwarding and call flip. The returned list contains all the extension phone numbers used for call forwarding and call flip.",
                "operationId": "listForwardingNumbers",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetExtensionForwardingNumberListResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/forwarding-number",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadUserForwardingFlipNumbers",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "post": {
                "tags": [
                    "Call Forwarding"
                ],
                "summary": "Create Forwarding Number",
                "description": "Adds a new forwarding number to the forwarding number list.",
                "operationId": "createForwardingNumber",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateForwardingNumberRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForwardingNumberInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/forwarding-number",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditUserForwardingFlipNumbers",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/forwarding-number/{forwardingNumberId}": {
            "get": {
                "tags": [
                    "Call Forwarding"
                ],
                "summary": "Get Forwarding Number",
                "operationId": "readForwardingNumber",
                "description": "Returns a specific forwarding number.",
                "parameters": [
                    {
                        "name": "forwardingNumberId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForwardingNumberResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/forwarding-number",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadUserForwardingFlipNumbers",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "Call Forwarding"
                ],
                "summary": "Update Forwarding Number",
                "description": "Updates the existing forwarding number from the forwarding number list.",
                "operationId": "updateForwardingNumber",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "forwardingNumberId",
                        "in": "path",
                        "description": "Internal identifier of a forwarding number; returned in response in the 'id' field",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateForwardingNumberRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForwardingNumberInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/forwarding-number",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditUserForwardingFlipNumbers",
                "x-docs-level": "Public"
            },
            "delete": {
                "tags": [
                    "Call Forwarding"
                ],
                "summary": "Delete Forwarding Number",
                "description": "Deletes a forwarding number from the forwarding number list by its ID.",
                "operationId": "deleteForwardingNumber",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "forwardingNumberId",
                        "in": "path",
                        "description": "Internal identifier of a forwarding number",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-api-group": "extension/forwarding-number",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditUserForwardingFlipNumbers",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/answering-rule": {
            "get": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Get Call Handling Rules",
                "description": "Returns the extension answering rules.",
                "operationId": "listAnsweringRules",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "view",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Detailed",
                                "Simple"
                            ],
                            "default": "Simple"
                        }
                    },
                    {
                        "name": "enabledOnly",
                        "in": "query",
                        "description": "If true, then only active call handling rules are returned",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "1"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "100"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserAnsweringRuleList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/answering-rule",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadUserAnsweringRules",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "post": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Create Call Handling Rule",
                "description": "Creates a custom answering rule for a particular caller ID.",
                "operationId": "createAnsweringRule",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAnsweringRuleRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnsweringRuleInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/answering-rule",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditUserAnsweringRules",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/answering-rule/{ruleId}": {
            "get": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Get Call Handling Rule",
                "operationId": "readAnsweringRule",
                "description": "Returns an answering rule by ID.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "ruleId",
                        "in": "path",
                        "description": "Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either 'business-hours-rule' or 'after-hours-rule'",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showInactiveNumbers",
                        "in": "query",
                        "description": "Indicates whether inactive numbers should be returned or not",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnsweringRuleInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/answering-rule",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadUserAnsweringRules",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Update Call Handling Rule",
                "description": "Updates a custom answering rule for a particular caller ID.",
                "operationId": "updateAnsweringRule",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "ruleId",
                        "in": "path",
                        "description": "Internal identifier of an answering rule",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAnsweringRuleRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnsweringRuleInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/answering-rule",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditUserAnsweringRules",
                "x-docs-level": "Public"
            },
            "delete": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Delete Call Handling Rule",
                "operationId": "deleteAnsweringRule",
                "description": "Deletes a custom answering rule by a particular ID.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "ruleId",
                        "in": "path",
                        "description": "Internal identifier of an answering rule",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "extension/answering-rule",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditUserAnsweringRules",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/answering-rule": {
            "post": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Create Company Call Handling Rule",
                "operationId": "createCompanyAnsweringRule",
                "description": "Creates a company answering rule for a particular caller ID.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CompanyAnsweringRuleRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompanyAnsweringRuleInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/answering-rule",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "EditCompanyAnsweringRules",
                "x-docs-level": "Public"
            },
            "get": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Get Company Call Handling Rule List",
                "operationId": "listCompanyAnsweringRules",
                "description": "Returns a list of company answering rules.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompanyAnsweringRuleList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/answering-rule",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyAnsweringRules",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/answering-rule/{ruleId}": {
            "get": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Get Company Call Handling Rule",
                "operationId": "readCompanyAnsweringRule",
                "description": "Returns a company answering rule by ID.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "ruleId",
                        "in": "path",
                        "description": "Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either 'business-hours-rule' or 'after-hours-rule'",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompanyAnsweringRuleInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/answering-rule",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyAnsweringRules",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Update Company Call Handling Rule",
                "operationId": "updateCompanyAnsweringRule",
                "description": "Updates a company answering rule.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "ruleId",
                        "in": "path",
                        "description": "Internal identifier of an answering rule. The value can be standard digital ID or specific ID - either 'business-hours-rule' or 'after-hours-rule'",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CompanyAnsweringRuleUpdate"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompanyAnsweringRuleInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/answering-rule",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "EditCompanyAnsweringRules",
                "x-docs-level": "Public"
            },
            "delete": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Delete Company Call Handling Rule",
                "operationId": "deleteCompanyAnsweringRule",
                "description": "Deletes a company custom answering rule by a particular ID.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "ruleId",
                        "in": "path",
                        "description": "Internal identifier of an answering rule",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "account/answering-rule",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "EditCompanyAnsweringRules",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/dictionary/greeting": {
            "get": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Get Standard Greeting List",
                "description": "Returns the list of predefined standard greetings. Custom greetings recorded by user are not returned in response to this request. See Get Extension Custom Greetings.",
                "operationId": "listStandardGreetings",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of a greeting, specifying the case when the greeting is played",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Introductory",
                                "Announcement",
                                "ConnectingMessage",
                                "ConnectingAudio",
                                "Voicemail",
                                "Unavailable",
                                "HoldMusic",
                                "Company"
                            ]
                        }
                    },
                    {
                        "name": "usageType",
                        "in": "query",
                        "description": "Usage type of a greeting, specifying if the greeting is applied for user extension or department extension",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "UserExtensionAnsweringRule",
                                "ExtensionAnsweringRule",
                                "DepartmentExtensionAnsweringRule",
                                "CompanyAnsweringRule",
                                "CompanyAfterHoursAnsweringRule",
                                "VoicemailExtensionAnsweringRule",
                                "AnnouncementExtensionAnsweringRule"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DictionaryGreetingList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "dictionary/greeting",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/dictionary/greeting/{greetingId}": {
            "get": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Get Standard Greeting",
                "description": "Returns a standard greeting by ID.",
                "operationId": "readStandardGreeting",
                "parameters": [
                    {
                        "name": "greetingId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DictionaryGreetingInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "dictionary/greeting",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/greeting": {
            "post": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Create Company Greeting",
                "operationId": "createCompanyGreeting",
                "description": "Creates a custom company greeting.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "description": "Type of a greeting, specifying the case when the greeting is played.",
                                        "type": "string",
                                        "enum": [
                                            "Company",
                                            "StartRecording",
                                            "StopRecording",
                                            "AutomaticRecording"
                                        ]
                                    },
                                    "answeringRuleId": {
                                        "description": "Internal identifier of an answering rule",
                                        "type": "string"
                                    },
                                    "languageId": {
                                        "description": "Internal identifier of a language. See Get Language List",
                                        "type": "string"
                                    },
                                    "binary": {
                                        "description": "Meida file to upload",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "required": [
                                    "type",
                                    "binary"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomCompanyGreetingInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/greeting",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ReadUserInfo",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/greeting": {
            "post": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Create Custom User Greeting",
                "operationId": "createCustomUserGreeting",
                "description": "Creates custom greeting for an extension user.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "description": "Type of a greeting, specifying the case when the greeting is played.",
                                        "type": "string",
                                        "enum": [
                                            "Introductory",
                                            "Announcement",
                                            "ConnectingMessage",
                                            "ConnectingAudio",
                                            "Voicemail",
                                            "Unavailable",
                                            "HoldMusic"
                                        ]
                                    },
                                    "answeringRuleId": {
                                        "description": "Internal identifier of an answering rule",
                                        "type": "string"
                                    },
                                    "binary": {
                                        "description": "Meida file to upload",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "required": [
                                    "type",
                                    "answeringRuleId",
                                    "binary"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomUserGreetingInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/greeting",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditUserAnsweringRules",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/greeting/{greetingId}": {
            "get": {
                "tags": [
                    "Rule Management"
                ],
                "summary": "Get Custom Greeting",
                "operationId": "readCustomGreeting",
                "description": "Returns a custom user greeting by ID.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "greetingId",
                        "in": "path",
                        "description": "Internal identifier of a greeting",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomUserGreetingInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/greeting",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadUserInfo",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/ivr-prompts": {
            "post": {
                "tags": [
                    "Call Routing"
                ],
                "summary": "Create IVR Prompts",
                "operationId": "createIVRPrompt",
                "description": "Creates an IVR prompt.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "attachment": {
                                        "description": "Audio file that will be used as a prompt. Attachment cannot be empty, only audio files are supported",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "name": {
                                        "description": "Description of file contents.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "attachment"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PromptInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/ivr-prompts",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "EditCompanyGreetings",
                "x-docs-level": "Public"
            },
            "get": {
                "tags": [
                    "Call Routing"
                ],
                "summary": "Get IVR Prompt List",
                "operationId": "listIVRPrompts",
                "description": "Returns the list of IVR prompts.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IVRPrompts"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/ivr-prompts",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyGreetings",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/ivr-prompts/{promptId}": {
            "get": {
                "tags": [
                    "Call Routing"
                ],
                "summary": "Get IVR Prompt",
                "operationId": "readIVRPrompt",
                "description": "Returns an IVR prompt by ID.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "promptId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Prompt Information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PromptInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/ivr-prompts",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyGreetings",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "delete": {
                "tags": [
                    "Call Routing"
                ],
                "summary": "Delete IVR Prompt",
                "operationId": "deleteIVRPrompt",
                "description": "Deletes an IVR prompt by ID.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "promptId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "account/ivr-prompts",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "EditCompanyGreetings",
                "x-docs-level": "Public"
            },
            "put": {
                "tags": [
                    "Call Routing"
                ],
                "operationId": "updateIVRPrompt",
                "summary": "Update IVR Prompt",
                "description": "Updates an IVR prompt by ID",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "promptId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateIVRPromptRequest"
                            }
                        }
                    },
                    "description": "JSON body"
                },
                "responses": {
                    "200": {
                        "description": "Updated Prompt Information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PromptInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/ivr-prompts",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "EditCompanyGreetings",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/ivr-prompts/{promptId}/content": {
            "get": {
                "tags": [
                    "Call Routing"
                ],
                "summary": "Get IVR Prompt Content",
                "operationId": "readIVRPromptContent",
                "description": "Returns media content of an IVR prompt by ID.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "promptId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IVR Prompt Media Data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/ivr-prompts",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyGreetings",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/ivr-menus": {
            "post": {
                "tags": [
                    "Call Routing"
                ],
                "operationId": "createIVRMenu",
                "summary": "Create IVR Menu",
                "description": "Creates a company IVR menu.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/IVRMenuInfo"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IVRMenuInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/ivr-menus",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "AutoReceptionist",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/ivr-menus/{ivrMenuId}": {
            "get": {
                "tags": [
                    "Call Routing"
                ],
                "summary": "Get IVR Menu",
                "operationId": "readIVRMenu",
                "description": "Returns a company IVR menu by ID.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ivrMenuId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IVRMenuInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/ivr-menus",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "AutoReceptionist",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "Call Routing"
                ],
                "summary": "Update IVR Menu",
                "operationId": "updateIVRMenu",
                "description": "Updates a company IVR menu by ID.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ivrMenuId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/IVRMenuInfo"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IVRMenuInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/ivr-menus",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "AutoReceptionist",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/call-recording": {
            "get": {
                "tags": [
                    "Rule Management"
                ],
                "operationId": "readCallRecordingSettings",
                "description": "Returns call recording settings.",
                "summary": "Get Call Recording Settings",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallRecordingSettingsResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/call-recording",
                "x-throttling-group": "Light",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyInfo",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "Rule Management"
                ],
                "operationId": "updateCallRecordingSettings",
                "description": "Updates current call recording settings.",
                "summary": "Update Call Recording Settings",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CallRecordingSettingsResource"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK: Updated Call Recording Settings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallRecordingSettingsResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/call-recording",
                "x-throttling-group": "Medium",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "EditCompanyInfo",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/call-recording/extensions": {
            "get": {
                "tags": [
                    "Rule Management"
                ],
                "operationId": "listCallRecordingExtensions",
                "description": "Returns the list of extensions to be recorded.",
                "summary": "Get Call Recording Extension List",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Extension List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallRecordingExtensions"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/call-recording/extensions",
                "x-throttling-group": "Medium",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyInfo",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/call-recording/bulk-assign": {
            "post": {
                "tags": [
                    "Rule Management"
                ],
                "operationId": "updateCallRecordingExtensionList",
                "description": "Creates or updates the list of extensions to be recorded.",
                "summary": "Update Call Recording Extension List",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkAccountCallRecordingsResource"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "x-api-group": "account/call-recording/bulk-assign",
                "x-throttling-group": "Medium",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyInfo",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/call-recording/custom-greetings": {
            "get": {
                "tags": [
                    "Rule Management"
                ],
                "operationId": "listCallRecordingCustomGreetings",
                "summary": "Get Call Recording Custom Greeting List",
                "description": "Returns call recording custom greetings.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "StartRecording",
                                "StopRecording",
                                "AutomaticRecording"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallRecordingCustomGreetings"
                                }
                            }
                        }
                    }
                },
                "x-beta-api": true,
                "x-api-group": "account/call-recording/custom-greetings",
                "x-throttling-group": "Medium",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyInfo",
                "x-metered-api": true,
                "x-docs-level": "Public",
                "x-metering-group": "System",
                "x-availability": "High"
            },
            "delete": {
                "tags": [
                    "Rule Management"
                ],
                "operationId": "deleteCallRecordingCustomGreetingList",
                "summary": "Delete Call Recording Custom Greeting List",
                "description": "Deletes call recording custom greetings.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "account/call-recording/custom-greetings",
                "x-throttling-group": "Medium",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "EditCompanyInfo",
                "x-metered-api": true,
                "x-docs-level": "Public",
                "x-metering-group": "System"
            }
        },
        "/restapi/v1.0/account/{accountId}/call-recording/custom-greetings/{greetingId}": {
            "delete": {
                "tags": [
                    "Rule Management"
                ],
                "operationId": "deleteCallRecordingCustomGreeting",
                "description": "Deletes call recording custom greeting(s).",
                "summary": "Delete Call Recording Custom Greeting",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "greetingId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "x-api-group": "account/call-recording/custom-greetings",
                "x-throttling-group": "Medium",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "EditCompanyInfo",
                "x-metered-api": true,
                "x-docs-level": "Public",
                "x-metering-group": "System"
            }
        },
        "/restapi/v1.0/client-info/sip-provision": {
            "post": {
                "tags": [
                    "SIP"
                ],
                "summary": "Register SIP Device",
                "description": "Creates SIP registration of a device/application (WebPhone, Mobile, softphone)",
                "operationId": "createSIPRegistration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSipRegistrationRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateSipRegistrationResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "client-info/sip-provision",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "VoipCalling",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/phone-number": {
            "get": {
                "tags": [
                    "Phone Numbers"
                ],
                "summary": "Get Extension Phone Number List",
                "description": "Returns the list of phone numbers that are used by a particular extension, and can be filtered by the phone number type. The returned list contains all numbers which are directly mapped to a given extension plus the features and also company-level numbers which may be used when performing different operations on behalf of this extension.",
                "operationId": "listExtensionPhoneNumbers",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "usageType",
                        "in": "query",
                        "description": "Usage type of a phone number",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "MainCompanyNumber",
                                    "AdditionalCompanyNumber",
                                    "CompanyNumber",
                                    "DirectNumber",
                                    "CompanyFaxNumber",
                                    "ForwardedNumber",
                                    "ForwardedCompanyNumber"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are allowed. Default value is '1'",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items). If not specified, the value is '100' by default",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: User Phone Number List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetExtensionPhoneNumbersResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/phone-number",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadUserPhoneNumbers",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 1000
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}": {
            "get": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Get Extension",
                "description": "Returns basic information about a particular extension.",
                "operationId": "readExtension",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Extension information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetExtensionInfoResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadExtensions",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 500,
                "x-notifications": [
                    {
                        "$ref": "#/components/schemas/ExtensionInfoEvent"
                    }
                ]
            },
            "put": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Update Extension",
                "description": "Updates user settings.",
                "operationId": "updateExtension",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExtensionUpdateRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetExtensionInfoResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditUserInfo OR EditUserCredentials",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "delete": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Delete Extension",
                "description": "Deletes extension(s) by ID(s).",
                "operationId": "deleteExtension",
                "parameters": [
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "x-api-group": "extension",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "AddRemoveUsers",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/caller-id": {
            "get": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Get Extension Caller ID",
                "operationId": "readExtensionCallerId",
                "description": "Returns information on an outbound caller ID of an extension.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtensionCallerIdInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/caller-id",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCallerIDSettings",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Update Extension Caller ID",
                "operationId": "updateExtensionCallerId",
                "description": "Updates outbound caller ID information of an extension.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExtensionCallerIdInfo"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtensionCallerIdInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/caller-id",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditCallerIDSettings",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/grant": {
            "get": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Get Extension Grant List",
                "description": "Returns the list of extension grants.",
                "operationId": "listExtensionGrants",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "1"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "100"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetExtensionGrantListResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/grant",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadExtensions",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-notifications": [
                    {
                        "$ref": "#/components/schemas/ExtensionGrantListEvent"
                    }
                ],
                "x-service-level": 1000
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/users": {
            "get": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "summary": "Get User List",
                "description": "Returns the list of users with their status of Automatic Location Updates feature.",
                "operationId": "listAutomaticLocationUpdatesUsers",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Extension type. Multiple values are supported",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "User",
                                "Limited"
                            ]
                        }
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "Filters entries containing the specified substring in user name, extension or department. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "department",
                        "in": "query",
                        "description": "Department name to filter the users. The value range is 0-64; not case-sensitive. If not specified then the parameter is ignored. Multiple values are supported",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "siteId",
                        "in": "query",
                        "description": "Internal identifier of a site. To filter users of Main Site (Company) `main-site` must be specified. Supported only If Multi-Site feature is enabled for the account. Multiple values are supported",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "featureEnabled",
                        "in": "query",
                        "description": "Filters entries by their status of Automatic Location Updates feature",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Comma-separated list of fields to order results prefixed by plus sign '+' (ascending order) or minus sign '-' (descending order). Supported values: 'name', 'modelName', 'siteName', 'featureEnabled'",
                        "schema": {
                            "type": "string",
                            "default": "name"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items). The values supported: `Max` or numeric value. If not specified, 100 records are returned per one page",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are supported",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "User List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomaticLocationUpdatesUserList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/users",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Medium",
                "x-team": "PLA Inno",
                "x-availability": "High",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/users/bulk-assign": {
            "post": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "assignMultipleAutomaticaLocationUpdatesUsers",
                "summary": "Enable Automatic Location Updates for Users",
                "description": "Enables or disables Automatic Location Updates feature for multiple account users.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkAssignAutomaticaLocationUpdatesUsers"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/users/bulk-assign",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true,
                "x-team": "PLA Inno"
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points": {
            "get": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "summary": "Get Wireless Point List",
                "description": "Returns account wireless points configured and used for Automatic Location Updates feature.",
                "operationId": "listWirelessPoints",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "siteId",
                        "in": "query",
                        "description": "Internal identifier of a site. To filter Main Site (Company) 'main-site' must be specified. Supported only If multi-site feature is enabled for the account",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Comma-separated list of fields to order results prefixed by '+' sign (ascending order) or '-' sign (descending order). The default sorting is by `name`",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items). The values supported: `Max` or numeric value. If not specified, 100 records are returned per one page",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are supported",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wireless Points",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WirelessPointsList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/wireless-points",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Medium",
                "x-docs-level": "Public",
                "x-beta-api": true,
                "x-availability": "High"
            },
            "post": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "createWirelessPoint",
                "summary": "Create Wireless Point",
                "description": "Creates a new wireless point in network configuration with the emergency address assigned.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateWirelessPoint"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Wireless Point",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WirelessPointInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/wireless-points",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points/{pointId}": {
            "get": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "readWirelessPoint",
                "summary": "Get Wireless Point",
                "description": "Returns the specified wireless access point of a corporate map with the emergency address assigned.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "pointId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wireless Point",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WirelessPointInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/wireless-points",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Medium",
                "x-docs-level": "Public",
                "x-beta-api": true,
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "updateWirelessPoint",
                "summary": "Update Wireless Point",
                "description": "Updates the specified wireless access point of a corporate map by ID.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "pointId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateWirelessPoint"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Wireless Point",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WirelessPointInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/wireless-points",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "delete": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "deleteWirelessPoint",
                "summary": "Delete Wireless Point",
                "description": "Deletes wireless point(s) of a corporate map by ID(s).",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "pointId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/wireless-points",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/networks": {
            "get": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "summary": "Get Network Map",
                "description": "Returns corporate networks map with emergency addresses assigned to the current account.",
                "operationId": "listNetworks",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Networks List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NetworksList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/networks",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true,
                "x-availability": "High"
            },
            "post": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "description": "Creates a new network in corporate ethernet map for assignment of emergency addresses to network access points.",
                "summary": "Create Network",
                "operationId": "createNetwork",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateNetworkRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Created Network",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NetworkInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/networks",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/networks/{networkId}": {
            "get": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "description": "Returns the specified network with emergency addresses assigned to the current account.",
                "summary": "Get Network",
                "operationId": "readNetwork",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "networkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Network information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NetworkInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/networks",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Medium",
                "x-docs-level": "Public",
                "x-beta-api": true,
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "summary": "Update Network",
                "description": "Updates network in corporate ethernet map for assignment of emergency addresses to network access points.",
                "operationId": "updateNetwork",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "networkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateNetworkRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/networks",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "delete": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "summary": "Delete Network",
                "description": "Deletes network(s) in corporate ethernet map for Automatic Location Updates feature.",
                "operationId": "deleteNetwork",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "networkId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/networks",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/devices": {
            "get": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "summary": "Get Device List",
                "description": "Returns the list of common devices with their status of Automatic Location Updates feature.",
                "operationId": "listDevicesAutomaticLocationUpdates",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "siteId",
                        "in": "query",
                        "description": "Internal identifier of a site. To filter devices of Main Site (Company) `main-site` must be specified. Supported only If Multi-Site feature is enabled for the account",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "featureEnabled",
                        "in": "query",
                        "description": "Filters entries by their status of Automatic Location Updates feature",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "model",
                        "in": "query",
                        "description": "Internal identifier of a device model for filtering. Multiple values are supported",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "compatibleOnly",
                        "description": "Filters devices which support HELD protocol",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "Filters entries which have device name or model name containing the mentioned substring. The value should be split by spaces; the range is 0 - 64 characters, not case-sensitive. If empty the filter is ignored",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Comma-separated list of fields to order results prefixed by plus sign '+' (ascending order) or minus sign '-' (descending order). Supported values: 'name', 'modelName', 'siteName', 'featureEnabled'",
                        "schema": {
                            "type": "string",
                            "default": "name"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items). The values supported: `Max` or numeric value. If not specified, 100 records are returned per one page",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are supported",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Device List with their status of Automatic Location Updates feature",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListDevicesAutomaticLocationUpdates"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/devices",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Medium",
                "x-team": "PLA Inno",
                "x-availability": "High",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/devices/bulk-assign": {
            "post": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "assignMultipleDevicesAutomaticLocationUpdates",
                "summary": "Enable Automatic Location Updates for Devices",
                "description": "Enables or disables Automatic Location Updates feature for the specified common phones.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignMultipleDevicesAutomaticLocationUpdates"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/devices/bulk-assign",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-team": "PLA Inno",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches": {
            "get": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "summary": "Get Account Switch List",
                "description": "Returns corporate map of configured network switches with the assigned emergency addresses for the logged-in account.",
                "operationId": "listAccountSwitches",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "siteId",
                        "in": "query",
                        "description": "Internal identifier of a site. To filter Main Site (Company) main-site must be specified. Supported only If multi-site feature is enabled for the account",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "Filters entries by the specified substring (search by chassis ID, switch name or address) The characters range is 0-64 (if empty the filter is ignored)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Comma-separated list of fields to order results prefixed by '+' sign (ascending order) or '-' sign (descending order). The default sorting is by `name`",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items). The values supported: `Max` or numeric value. If not specified, 100 records are returned per one page",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are supported",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Switches Map",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SwitchesList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/switches",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true,
                "x-availability": "High"
            },
            "post": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "summary": "Create Switch",
                "description": "Creates a new switch in corporate map based on chassis ID and used for Automatic Locations Update feature.",
                "operationId": "createSwitch",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSwitchInfo"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Switch information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SwitchInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/switches",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-team": "PLA Inno",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches/{switchId}": {
            "get": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "readSwitch",
                "summary": "Get Switch",
                "description": "Returns the specified switch with the assigned emergency address.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "switchId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Switch information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SwitchInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/switches",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Medium",
                "x-team": "PLA Inno",
                "x-docs-level": "Public",
                "x-beta-api": true,
                "x-availablity": "High"
            },
            "put": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "summary": "Update Switch",
                "description": "Updates switch. Partial update is not supported, all switch parameters should be specified. If null value is received or parameter is missing, its value is removed.",
                "operationId": "updateSwitch",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "switchId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSwitchInfo"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Switch information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SwitchInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/switches",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-team": "PLA Inno",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "delete": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "deleteSwitch",
                "summary": "Delete Switch",
                "description": "Deletes wireless switch(es) in network configuration for Automatic Location Updates feature.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "switchId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/switches",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-team": "PLA Inno",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches-bulk-create": {
            "post": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "createMultipleSwitches",
                "summary": "Create Multiple Switches",
                "description": "Creates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMultipleSwitchesRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Multiple Switches Creation Task",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateMultipleSwitchesResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/switches-bulk-create",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true,
                "x-team": "PLA Inno"
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches-bulk-update": {
            "post": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "updateMultipleSwitches",
                "summary": "Update Multiple Switches",
                "description": "Updates multiple switches in corporate map. The maximum number of switches per request is 10 000; limitation for account is 10 000.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMultipleSwitchesRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Multiple Switches Update Task",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateMultipleSwitchesResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/switches-bulk-update",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true,
                "x-team": "PLA Inno"
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points-bulk-create": {
            "post": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "createMultipleWirelessPoints",
                "summary": "Create Multiple Wireless Points",
                "description": "Creates multiple wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMultipleWirelessPointsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Multiple Wireless Points Creation Task",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateMultipleWirelessPointsResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/wireless-points-bulk-create",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true,
                "x-team": "PLA Inno"
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points-bulk-update": {
            "post": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "updateMultipleWirelessPoints",
                "summary": "Update Multiple Wireless Points",
                "description": "Updates wireless points in corporate map. The maximum number of wireless points per request is 10 000; limitation for account is 70 000.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMultipleWirelessPointsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Multiple Wireless Points Update Task",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateMultipleWirelessPointsResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/wireless-points-bulk-update",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true,
                "x-team": "PLA Inno"
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/wireless-points-bulk-validate": {
            "post": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "validateMultipleWirelessPoints",
                "summary": "Validate Multiple Wireless Points",
                "description": "Validates wireless points before creation or update. The maximum number of wireless points per request is 10 000.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValidateMultipleWirelessPointsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidateMultipleWirelessPointsResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/wireless-points-bulk-validate",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true,
                "x-availability": "High",
                "x-team": "PLA Inno"
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/switches-bulk-validate": {
            "post": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "validateMultipleSwitches",
                "summary": "Validate Multiple Switches",
                "description": "Validates switches before creation or update. The maximum number of switches per request is 10 000.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValidateMultipleSwitchesRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidateMultipleSwitchesResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/switches-points-bulk-validate",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true,
                "x-availability": "High",
                "x-team": "PLA Inno"
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-address-auto-update/tasks/{taskId}": {
            "get": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "summary": "Get Emergency Map Configuration Task",
                "description": "Returns results of the task created within the frame of Automatic Location Updates feature. Currently four task types are supported: 'Wireless Points Bulk Create', 'Wireless Points Bulk Update', 'Switches Bulk Create', 'Switches Bulk Update'",
                "operationId": "readAutomaticLocationUpdatesTask",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task Information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AutomaticLocationUpdatesTaskInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-address-auto-update/tasks",
                "x-access-level": "Internal",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Light",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-team": "PLA Inno"
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-locations": {
            "post": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "createEmergencyLocation",
                "summary": "Add Emergency Location",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/EmergencyLocationInfoRequest"
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "x-api-group": "account/emergency-locations",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Medium",
                "x-team": "PLA Inno",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "get": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "listEmergencyLocations",
                "summary": "Get Emergency Location List",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "Filters entries containing the specified substring in address fields. The characters range is 0-64; not case-sensitive. If empty then the filter is ignored",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Comma-separated list of fields to order results prefixed by plus sign '+' (ascending order) or minus sign '-' (descending order). Supported values: 'address'",
                        "schema": {
                            "type": "string",
                            "default": "address"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items). The values supported: `Max` or numeric value. If not specified, 100 records are returned per one page",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are supported",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Emergency Location List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmergencyLocationList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-locations",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Light",
                "x-availability": "High",
                "x-team": "PLA Inno",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/emergency-locations/{locationId}": {
            "get": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "readEmergencyLocation",
                "summary": "Get Emergency Location",
                "description": "Returns emergency response location by ID",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "locationId",
                        "in": "path",
                        "required": true,
                        "description": "Internal identifier of the emergency location",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Emergency Location Information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmergencyLocationInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-locations",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Light",
                "x-docs-level": "Public",
                "x-beta-api": true
            },
            "put": {
                "tags": [
                    "Automatic Location Updates"
                ],
                "operationId": "updateEmergencyLocation",
                "summary": "Update Emergency Location",
                "description": "Updates the specified emergency response location.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "locationId",
                        "in": "path",
                        "required": true,
                        "description": "Internal identifier of the emergency location",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/EmergencyLocationInfoRequest"
                },
                "responses": {
                    "200": {
                        "description": "Emergency Location Information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmergencyLocationInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/emergency-locations",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "ConfigureEmergencyMaps",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/notification-settings": {
            "get": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Get Notification Settings",
                "description": "Returns notification settings for the current extension.\n <p>Knowledge Article: <a href=\"https://success.ringcentral.com/articles/RC_Knowledge_Article/9740\">User Settings - Set up Message Notifications</a></p>",
                "operationId": "readNotificationSettings",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationSettings"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/notification-settings",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadMessagesNotificationsSettings",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Update Notification Settings",
                "description": "Updates notification settings for the current extension.\n<p>Knowledge Article: <a href=\"https://success.ringcentral.com/articles/RC_Knowledge_Article/9740\">User Settings - Set up Message Notifications</a></p>",
                "operationId": "updateNotificationSettings",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationSettingsUpdateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationSettings"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/notification-settings",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditMessagesNotificationsSettings",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/profile-image": {
            "get": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Get User Profile Image",
                "description": "Returns a profile image of an extension.",
                "operationId": "readUserProfileImage",
                "parameters": [
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Profile Image Media Data",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "image/png": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "image/jpeg": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "image/gif": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/profile-image",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadExtensions",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 3000
            },
            "post": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Upload User Profile Image",
                "description": "Uploads the extension profile image.",
                "operationId": "createUserProfileImage",
                "parameters": [
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "required": [
                                    "image"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "extension/profile-image",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditUserInfo",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 3000,
                "x-team": "PLA RnD"
            },
            "put": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Update User Profile Image",
                "description": "Updates the extension profile image",
                "operationId": "updateUserProfileImage",
                "parameters": [
                    {
                        "name": "extensionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-api-group": "extension/profile-image",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "EditUserInfo",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 3000,
                "x-team": "PLA RnD"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/profile-image/{scaleSize}": {
            "get": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Get Scaled User Profile Image",
                "description": "Returns scaled profile image of an extension.",
                "operationId": "readScaledPofileImage",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "scaleSize",
                        "in": "path",
                        "description": "Dimensions of a profile image which will be returned in response. If this path parameter is not specified in request URI then",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Profile Image Media Data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/profile-image",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadExtensions",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 3000,
                "x-team": "PLA RnD"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/conferencing": {
            "get": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Get User Conferencing Settings",
                "description": "Returns the information on the Free Conference Calling (FCC) feature for a given extension.",
                "operationId": "readConferencingSettings",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "countryId",
                        "in": "query",
                        "description": "Internal identifier of a country. If not specified, the response is returned for the brand country",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetConferencingInfoResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/conferencing",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "OrganizeConference",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "User Settings"
                ],
                "summary": "Update User Conferencing Settings",
                "description": "Updates the default conferencing number for the current extension. The number can be selected from conferencing numbers of the current extension. Updates the setting, allowing participants join the conference before host.",
                "operationId": "updateConferencingSettings",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateConferencingInfoRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetConferencingInfoResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/conferencing",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-user-permission": "OrganizeConference",
                "x-app-permission": "EditExtensions",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}": {
            "get": {
                "tags": [
                    "Company"
                ],
                "summary": "Get Account Info",
                "description": "Returns basic information about a particular RingCentral customer account.",
                "operationId": "readAccountInfo",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAccountInfoResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyInfo",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/business-address": {
            "get": {
                "tags": [
                    "Company"
                ],
                "summary": "Get Account Business Address",
                "description": "Returns business address of a company.",
                "operationId": "readAccountBusinessAddress",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountBusinessAddressResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/business-address",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyInfo",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "Company"
                ],
                "summary": "Update Company Business Address",
                "description": "Updates the business address of a company that account is linked to. Batch request is supported.",
                "operationId": "updateAccountBusinessAddress",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModifyAccountBusinessAddressRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountBusinessAddressResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/business-address",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "EditCompanyInfo",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/service-info": {
            "get": {
                "tags": [
                    "Company"
                ],
                "summary": "Get Account Service Info",
                "description": "Returns the information about service plan, available features and limitations for a particular RingCentral customer account.",
                "operationId": "readAccountServiceInfo",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetServiceInfoResponse"
                                }
                            }
                        }
                    }
                },
                "x-beta-api": true,
                "x-api-group": "account/service-info",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadServicePlanInfo",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/dictionary/language": {
            "get": {
                "tags": [
                    "Regional Settings"
                ],
                "summary": "Get Language List",
                "description": "Returns the information about supported languages.",
                "operationId": "listLanguages",
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LanguageList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "dictionary/language",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 1000
            }
        },
        "/restapi/v1.0/dictionary/language/{languageId}": {
            "get": {
                "tags": [
                    "Regional Settings"
                ],
                "summary": "Get Language",
                "description": "Returns language by ID.",
                "operationId": "readLanguage",
                "parameters": [
                    {
                        "name": "languageId",
                        "in": "path",
                        "description": "Internal identifier of a language",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LanguageInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "dictionary/language",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/dictionary/country": {
            "get": {
                "tags": [
                    "Regional Settings"
                ],
                "summary": "Get Country List",
                "description": "Returns all the countries available for calling.",
                "operationId": "listCountries",
                "parameters": [
                    {
                        "name": "loginAllowed",
                        "in": "query",
                        "description": "Specifies whether login with the phone numbers of this country is enabled or not",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "signupAllowed",
                        "in": "query",
                        "description": "Indicates whether signup/billing is allowed for a country. If not specified all countries are returned (according to other filters specified if any)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "numberSelling",
                        "in": "query",
                        "description": "Specifies if RingCentral sells phone numbers of this country",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "freeSoftphoneLine",
                        "in": "query",
                        "description": "Specifies if free phone line for softphone is available for a country or not",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCountryListResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "dictionary/country",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/dictionary/country/{countryId}": {
            "get": {
                "tags": [
                    "Regional Settings"
                ],
                "summary": "Get Country",
                "description": "Returns the information on a specific country.",
                "operationId": "readCountry",
                "parameters": [
                    {
                        "name": "countryId",
                        "in": "path",
                        "description": "Internal identifier of a country",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCountryInfoDictionaryResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "dictionary/country",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/dictionary/location": {
            "get": {
                "tags": [
                    "Regional Settings"
                ],
                "summary": "Get Location List",
                "description": "Returns all available locations for a certain state.",
                "operationId": "listLocations",
                "parameters": [
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sorts results by the property specified",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Npa",
                                "City"
                            ],
                            "default": "City"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "stateId",
                        "in": "query",
                        "description": "Internal identifier of a state",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "withNxx",
                        "in": "query",
                        "description": "Specifies if nxx codes are returned",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetLocationListResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "dictionary/location",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 1000
            }
        },
        "/restapi/v1.0/dictionary/state": {
            "get": {
                "tags": [
                    "Regional Settings"
                ],
                "summary": "Get States List",
                "description": "Returns all the states of a certain country",
                "operationId": "listStates",
                "parameters": [
                    {
                        "name": "allCountries",
                        "in": "query",
                        "description": "If set to 'True' then states for all countries are returned and `countryId` is ignored, even if specified. If the value is empty then the parameter is ignored",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "countryId",
                        "in": "query",
                        "description": "Internal identifier of a country",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "withPhoneNumbers",
                        "in": "query",
                        "description": "If 'True', the list of states with phone numbers available for buying is returned",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetStateListResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "dictionary/state",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/dictionary/state/{stateId}": {
            "get": {
                "tags": [
                    "Regional Settings"
                ],
                "summary": "Get State",
                "description": "Returns the information on a specific state.",
                "operationId": "readState",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "Internal identifier of a state",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetStateInfoResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "dictionary/state",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/dictionary/timezone": {
            "get": {
                "tags": [
                    "Regional Settings"
                ],
                "summary": "Get Timezone List",
                "description": "Returns all available timezones.",
                "operationId": "listTimezones",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "1"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "100"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTimezoneListResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "dictionary/timezone",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/dictionary/timezone/{timezoneId}": {
            "get": {
                "tags": [
                    "Regional Settings"
                ],
                "summary": "Get Timezone",
                "description": "Returns the information on a certain timezone.",
                "operationId": "readTimezone",
                "parameters": [
                    {
                        "name": "timezoneId",
                        "in": "path",
                        "description": "Internal identifier of a timezone",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "1"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "100"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTimezoneInfoResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "dictionary/timezone",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/phone-number": {
            "get": {
                "tags": [
                    "Phone Numbers"
                ],
                "summary": "Get Company Phone Number List",
                "description": "Returns the list of phone numbers assigned to RingCentral customer account. Both company-level and extension-level numbers are returned.",
                "operationId": "listAccountPhoneNumbers",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "usageType",
                        "in": "query",
                        "description": "Usage type of a phone number",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "MainCompanyNumber",
                                    "AdditionalCompanyNumber",
                                    "CompanyNumber",
                                    "DirectNumber",
                                    "CompanyFaxNumber",
                                    "ForwardedNumber",
                                    "ForwardedCompanyNumber",
                                    "ContactCenterNumber",
                                    "ConferencingNumber",
                                    "MeetingsNumber"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountPhoneNumbers"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/phone-number",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyPhoneNumbers",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/phone-number/{phoneNumberId}": {
            "get": {
                "tags": [
                    "Phone Numbers"
                ],
                "summary": "Get Phone Number",
                "description": "Returns the phone number(s) belonging to a certain account or extension by phoneNumberId(s). Batch request is supported.",
                "operationId": "readAccountPhoneNumber",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "phoneNumberId",
                        "in": "path",
                        "description": "Internal identifier of a phone number",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompanyPhoneNumberInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/phone-number",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyPhoneNumbers",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension": {
            "get": {
                "tags": [
                    "Extensions"
                ],
                "summary": "Get Extension List",
                "operationId": "listExtensions",
                "description": "Returns the list of extensions created for a particular account. All types of extensions are included in this list.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "query",
                        "description": "Extension number to retrieve",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Extension email address",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are allowed",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "default": 100
                        }
                    },
                    {
                        "name": "status",
                        "allowEmptyValue": true,
                        "in": "query",
                        "description": "Extension current state. Multiple values are supported. If 'Unassigned' is specified, then extensions without extensionNumber are returned. If not specified, then all extensions are returned.",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Enabled",
                                    "Disabled",
                                    "NotActivated",
                                    "Unassigned"
                                ]
                            }
                        }
                    },
                    {
                        "name": "type",
                        "allowEmptyValue": true,
                        "in": "query",
                        "description": "Extension type. Multiple values are supported",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "User",
                                    "FaxUser",
                                    "VirtualUser",
                                    "DigitalUser",
                                    "Department",
                                    "Announcement",
                                    "Voicemail",
                                    "SharedLinesGroup",
                                    "PagingOnly",
                                    "IvrMenu",
                                    "ApplicationExtension",
                                    "ParkLocation",
                                    "Limited",
                                    "Bot"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetExtensionListResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadExtensions",
                "x-docs-level": "Public",
                "x-notifications": [
                    {
                        "$ref": "#/components/schemas/ExtensionListEvent"
                    }
                ],
                "x-service-level": 1000,
                "x-availability": "High"
            },
            "post": {
                "tags": [
                    "Extensions"
                ],
                "summary": "Create Extension",
                "operationId": "createExtension",
                "description": "Creates an extension.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExtensionCreationRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtensionCreationResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "AddRemoveUsers",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/templates": {
            "get": {
                "tags": [
                    "Extensions"
                ],
                "operationId": "listUserTemplates",
                "description": "Returns the list of user templates for the current account.",
                "summary": "Get User Template List",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "UserSettings",
                                "CallHandling"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserTemplates"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/templates",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyInfo",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 1000
            }
        },
        "/restapi/v1.0/account/{accountId}/templates/{templateId}": {
            "get": {
                "tags": [
                    "Extensions"
                ],
                "operationId": "readUserTemplate",
                "description": "Returns the user template by ID.",
                "summary": "Get User Template",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "templateId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateInfo"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/templates",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyInfo",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/call-queues": {
            "get": {
                "tags": [
                    "Call Queues"
                ],
                "summary": "Get Call Queues",
                "operationId": "listCallQueues",
                "description": "Returns call queue group list",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "memberExtensionId",
                        "in": "query",
                        "description": "Internal identifier of an extension that is a member of every group within the result",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallQueues"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/call-queues",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadExtensions",
                "x-throttling-group": "Medium",
                "x-docs-level": "Public",
                "x-service-level": 1000,
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/call-queues/{groupId}/members": {
            "get": {
                "tags": [
                    "Call Queues"
                ],
                "operationId": "listCallQueueMembers",
                "summary": "Get Call Queue Members",
                "description": "Returns call queue group members.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are allowed",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallQueueMembers"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/call-queues/members",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadExtensions",
                "x-throttling-group": "Light",
                "x-docs-level": "Public",
                "x-service-level": 1000,
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/call-queues/{groupId}/bulk-assign": {
            "post": {
                "tags": [
                    "Call Queues"
                ],
                "operationId": "assignMultipleCallQueueMembers",
                "summary": "Assign Multiple Call Queue Members",
                "description": "Updates a call queue group.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CallQueueBulkAssignResource"
                            }
                        }
                    },
                    "description": "Changes for the given group",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Extension of type [${extensionType}] cannot be included into call queue"
                    }
                },
                "x-api-group": "account/call-queues/call-queues",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "Groups",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-service-level": 1000
            }
        },
        "/restapi/v1.0/account/{accountId}/department/{departmentId}/members": {
            "get": {
                "deprecated": true,
                "tags": [
                    "Call Queues"
                ],
                "summary": "Get Department Member List",
                "description": "Viewing user account info (including name, business name, address and phone number/account number)",
                "operationId": "listDepartmentMembers",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "departmentId",
                        "in": "path",
                        "description": "Internal identifier of a Department extension (same as extensionId but only the ID of a department extension is valid)",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DepartmentMemberList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/department/members",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadExtensions",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 1000
            }
        },
        "/restapi/v1.0/account/{accountId}/department/bulk-assign": {
            "post": {
                "deprecated": true,
                "tags": [
                    "Call Queues"
                ],
                "summary": "Assign Multiple Department Members",
                "description": "Adds and/or removes multiple call queue members",
                "operationId": "assignMultipleDepartmentMembers",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DepartmentBulkAssignResource"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "x-api-group": "account/department",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "UserGroups",
                "x-docs-level": "Public",
                "x-service-level": 1000
            }
        },
        "/restapi/v1.0/account/{accountId}/paging-only-groups/{pagingOnlyGroupId}/users": {
            "get": {
                "tags": [
                    "Paging Only Groups"
                ],
                "summary": "Get Paging Group Users",
                "operationId": "listPagingGroupUsers",
                "description": "Returns the list of users allowed to page this group.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pagingOnlyGroupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagingOnlyGroupUsers"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/paging-only-groups/users",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadUserInfo",
                "x-docs-level": "Public",
                "x-service-level": 1000,
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/paging-only-groups/{pagingOnlyGroupId}/devices": {
            "get": {
                "tags": [
                    "Paging Only Groups"
                ],
                "summary": "Get Paging Group Devices",
                "operationId": "listPagingGroupDevices",
                "description": "Returns the list of paging devices assigned to this group.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pagingOnlyGroupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are accepted",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagingOnlyGroupDevices"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/paging-only-groups/devices",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyDevices",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 1000
            }
        },
        "/restapi/v1.0/account/{accountId}/paging-only-groups/{pagingOnlyGroupId}/bulk-assign": {
            "post": {
                "tags": [
                    "Paging Only Groups"
                ],
                "summary": "Assign Paging Group Users and Devices",
                "operationId": "assignMultiplePagingGroupUsersDevices",
                "description": "Adds and/or removes paging group users and devices.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pagingOnlyGroupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EditPagingGroupRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "Success"
                    }
                },
                "x-api-group": "account/paging-only-groups/bulk-assign",
                "x-throttling-group": "Heavy",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "Groups",
                "x-docs-level": "Public",
                "x-service-level": 1000
            }
        },
        "/restapi/v1.0/account/{accountId}/call-monitoring-groups": {
            "post": {
                "tags": [
                    "Call Monitoring Groups"
                ],
                "summary": "Create Call Monitoring Group",
                "operationId": "createCallMonitoringGroup",
                "description": "Creates a new call monitoring group.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCallMonitoringGroupRequest"
                            }
                        }
                    },
                    "description": "Parameters of a call monitoring group that will be created",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallMonitoringGroup"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/call-monitoring-groups",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "Groups",
                "x-throttling-group": "Medium",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 1000
            },
            "get": {
                "tags": [
                    "Call Monitoring Groups"
                ],
                "summary": "Get Call Monitoring Groups List",
                "operationId": "listCallMonitoringGroups",
                "description": "Returns call monitoring groups that can be filtered by some extension.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are allowed",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": "1"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": "100"
                        }
                    },
                    {
                        "name": "memberExtensionId",
                        "in": "query",
                        "description": "Internal identifier of an extension that is a member of every group within the result",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallMonitoringGroups"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/call-monitoring-groups",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadExtensions",
                "x-throttling-group": "Medium",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/restapi/v1.0/account/{accountId}/call-monitoring-groups/{groupId}": {
            "put": {
                "tags": [
                    "Call Monitoring Groups"
                ],
                "summary": "Updates Call Monitoring Group",
                "operationId": "updateCallMonitoringGroup",
                "description": "Updates call monitoring group name by ID.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Internal identifier of a call monitoring group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCallMonitoringGroupRequest"
                            }
                        }
                    },
                    "description": "Parameters of a call monitoring group that will be updated",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallMonitoringGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Value for group name is unacceptable."
                    },
                    "403": {
                        "description": "User has no permissions to create groups."
                    },
                    "404": {
                        "description": "Group with the given identifier doesn't belong to the account."
                    }
                },
                "x-api-group": "account/call-monitoring-groups",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "Groups",
                "x-throttling-group": "Medium",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 1000
            },
            "delete": {
                "tags": [
                    "Call Monitoring Groups"
                ],
                "summary": "Delete Call Monitoring Group",
                "operationId": "deleteCallMonitoringGroup",
                "description": "Remove infromation about the given call monitoring group.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Group with the given identifier doesn't belong to the account."
                    }
                },
                "x-api-group": "account/call-monitoring-groups",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "Groups",
                "x-throttling-group": "Medium",
                "x-docs-level": "Public",
                "x-service-level": 1000,
                "x-access-level": "Advanced"
            }
        },
        "/restapi/v1.0/account/{accountId}/call-monitoring-groups/{groupId}/members": {
            "get": {
                "tags": [
                    "Call Monitoring Groups"
                ],
                "summary": "Get Call Monitoring Group Member List",
                "operationId": "listCallMonitoringGroupMembers",
                "description": "Returns call monitoring group members.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Indicates the page number to retrieve. Only positive number values are allowed",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Indicates the page size (number of items)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallMonitoringGroupMemberList"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/call-monitoring-groups/members",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadExtensions",
                "x-throttling-group": "Medium",
                "x-docs-level": "Public",
                "x-availability": "High",
                "x-service-level": 1000
            }
        },
        "/restapi/v1.0/account/{accountId}/call-monitoring-groups/{groupId}/bulk-assign": {
            "post": {
                "tags": [
                    "Call Monitoring Groups"
                ],
                "summary": "Update Call Monitoring Group List",
                "operationId": "updateCallMonitoringGroupList",
                "description": "Updates call monitoring groups.",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CallMonitoringBulkAssign"
                            }
                        }
                    },
                    "description": "Changes for the given group",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Extension of type [ParkLocation] could not be a member of [call monitoring]"
                    }
                },
                "x-api-group": "account/call-monitoring-groups/bulk-assign",
                "x-app-permission": "EditExtensions",
                "x-user-permission": "Groups",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public",
                "x-service-level": 1000
            }
        },
        "/restapi/v1.0/number-parser/parse": {
            "post": {
                "tags": [
                    "Phone Numbers"
                ],
                "summary": "Parse Phone Number",
                "description": "Returns one or more parsed and/or formatted phone numbers that are passed as a string.",
                "operationId": "parsePhoneNumber",
                "parameters": [
                    {
                        "name": "homeCountry",
                        "in": "query",
                        "description": "Internal identifier of a home country. The default value is ISO code (ISO 3166) of the user's home country or brand country, if the user is undefined",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nationalAsPriority",
                        "in": "query",
                        "description": "The default value is 'False'. If 'True', the numbers that are closer to the home country are given higher priority",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParsePhoneNumberRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParsePhoneNumberResponse"
                                }
                            }
                        }
                    }
                },
                "x-beta-api": true,
                "x-api-group": "number-parser/parse",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/device/{deviceId}": {
            "get": {
                "tags": [
                    "Devices"
                ],
                "summary": "Get Device",
                "description": "Returns account device(s) by their ID(s).",
                "operationId": "readDevice",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "deviceId",
                        "in": "path",
                        "description": "Internal identifier of a device",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "syncEmergencyAddress",
                        "in": "query",
                        "description": "Specifies if emergency address should be synchronized or not",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDeviceInfoResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/device",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadCompanyDevices",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "Devices"
                ],
                "summary": "Update Device",
                "operationId": "updateDevice",
                "description": "Updates account device(s) by their ID(s).",
                "parameters": [
                    {
                        "name": "deviceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountDeviceUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceResource"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "account/device",
                "x-throttling-group": "Medium",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "EditAccounts",
                "x-user-permission": "EditCompanyDevices",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/extension/{extensionId}/device": {
            "get": {
                "tags": [
                    "Devices"
                ],
                "summary": "Get Extension Device List",
                "description": "Returns devices of the extension(s) by their ID(s). Batch request is supported",
                "operationId": "listExtensionDevices",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "extensionId",
                        "in": "path",
                        "description": "Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "linePooling",
                        "in": "query",
                        "description": "Pooling type of a device",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Host",
                                "Guest",
                                "None"
                            ]
                        }
                    },
                    {
                        "name": "feature",
                        "in": "query",
                        "description": "Device feature or multiple features supported",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Intercom",
                                "Paging",
                                "BLA",
                                "HELD"
                            ]
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetExtensionDevicesResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "extension/device",
                "x-throttling-group": "Light",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-app-permission": "ReadAccounts",
                "x-user-permission": "ReadUserDevices",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/scim/health": {
            "get": {
                "tags": [
                    "SCIM"
                ],
                "summary": "Check Health",
                "operationId": "checkHealth",
                "responses": {
                    "200": {
                        "description": "healthy"
                    }
                },
                "x-api-group": "scim/Health",
                "x-auth-required": false,
                "x-throttling-group": "NoThrottling",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/scim/v2/health": {
            "get": {
                "tags": [
                    "SCIM"
                ],
                "summary": "Check Health",
                "operationId": "checkHealth2",
                "responses": {
                    "200": {
                        "description": "healthy"
                    }
                },
                "x-api-group": "scim/Health",
                "x-auth-required": false,
                "x-throttling-group": "NoThrottling",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/scim/v2/ServiceProviderConfig": {
            "get": {
                "tags": [
                    "SCIM"
                ],
                "summary": "Get Service Provider Config",
                "operationId": "readServiceProviderConfig2",
                "responses": {
                    "200": {
                        "description": "Service Provider Configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceProviderConfig"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "scim/ServiceProviderConfig",
                "x-auth-required": false,
                "x-throttling-group": "NoThrottling",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/scim/ServiceProviderConfig": {
            "get": {
                "tags": [
                    "SCIM"
                ],
                "summary": "Get Service Provider Config",
                "operationId": "readServiceProviderConfig",
                "responses": {
                    "200": {
                        "description": "Service Provider Configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceProviderConfig"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "scim/ServiceProviderConfig",
                "x-auth-required": false,
                "x-throttling-group": "NoThrottling",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/scim/v2/Users": {
            "get": {
                "tags": [
                    "SCIM"
                ],
                "summary": "Search/List Users",
                "operationId": "searchViaGet2",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "only support 'userName' or 'email' filter expressions for now",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "startIndex",
                        "in": "query",
                        "description": "start index (1-based)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "page size",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserSearchResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "authorization failure",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "permissions denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "scim/Users",
                "x-app-permission": "ReadAccounts",
                "x-throttling-group": "Light",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "post": {
                "tags": [
                    "SCIM"
                ],
                "summary": "Create User",
                "operationId": "createUser2",
                "requestBody": {
                    "$ref": "#/components/requestBodies/User"
                },
                "responses": {
                    "201": {
                        "description": "successfully created user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "authorization failure",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "permissions denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "duplicate email",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "scim/Users",
                "x-app-permission": "EditAccounts",
                "x-throttling-group": "Heavy",
                "x-request-max-body-size": "10m",
                "x-docs-level": "Public"
            }
        },
        "/scim/Users": {
            "get": {
                "tags": [
                    "SCIM"
                ],
                "summary": "Search/List Users",
                "operationId": "searchViaGet",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "only support 'userName' or 'email' filter expressions for now",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "startIndex",
                        "in": "query",
                        "description": "start index (1-based)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "page size",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserSearchResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "authorization failure",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "permissions denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "scim/Users",
                "x-app-permission": "ReadAccounts",
                "x-throttling-group": "Light",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "post": {
                "tags": [
                    "SCIM"
                ],
                "summary": "Create User",
                "operationId": "createUser",
                "requestBody": {
                    "$ref": "#/components/requestBodies/User"
                },
                "responses": {
                    "201": {
                        "description": "successfully created user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "authorization failure",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "permissions denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "duplicate email",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "scim/Users",
                "x-app-permission": "EditAccounts",
                "x-throttling-group": "Heavy",
                "x-request-max-body-size": "10m",
                "x-docs-level": "Public"
            }
        },
        "/scim/v2/Users/.search": {
            "post": {
                "tags": [
                    "SCIM"
                ],
                "summary": "Search/List Users",
                "operationId": "searchViaPost2",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchRequest"
                            }
                        }
                    },
                    "description": "search parameters"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserSearchResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "authorization failure",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "permissions denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "scim/Users",
                "x-app-permission": "ReadAccounts",
                "x-throttling-group": "Light",
                "x-docs-level": "Public",
                "x-availability": "High"
            }
        },
        "/scim/v2/Users/{id}": {
            "get": {
                "tags": [
                    "SCIM"
                ],
                "summary": "Get User",
                "operationId": "readUser2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "authorization failure",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "permissions denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "scim/Users",
                "x-app-permission": "ReadAccounts",
                "x-throttling-group": "Light",
                "x-docs-level": "Public",
                "x-availability": "High"
            },
            "put": {
                "tags": [
                    "SCIM"
                ],
                "summary": "Update/Replace User",
                "operationId": "replaceUser2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "description": "an existing user"
                },
                "responses": {
                    "200": {
                        "description": "successfully fully updated a user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "authorization failure",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "permissions denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "duplicate email",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "scim/Users",
                "x-app-permission": "EditAccounts",
                "x-throttling-group": "Heavy",
                "x-request-max-body-size": "10m",
                "x-docs-level": "Public"
            },
            "delete": {
                "tags": [
                    "SCIM"
                ],
                "summary": "Delete User",
                "operationId": "deleteUser2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "successfully deleted"
                    },
                    "401": {
                        "description": "authorization failure",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "permissions denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "scim/Users",
                "x-app-permission": "EditAccounts",
                "x-throttling-group": "Heavy",
                "x-docs-level": "Public"
            },
            "patch": {
                "tags": [
                    "SCIM"
                ],
                "summary": "Update/Patch User",
                "operationId": "patchUser2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPatch"
                            }
                        }
                    },
                    "description": "patch operations list"
                },
                "responses": {
                    "200": {
                        "description": "successfully partially updated user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "authorization failure",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "permissions denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "duplicate email",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScimErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "scim/Users",
                "x-app-permission": "EditAccounts",
                "x-throttling-group": "Heavy",
                "x-request-max-body-size": "10m",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/call-out": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "x-beta-api": true,
                "summary": "Create CallOut Call Session",
                "description": "Creates a CallOut Call session.",
                "operationId": "createCallOutCallSession",
                "externalDocs": {
                    "description": "Find more info about body and response format",
                    "url": "https://wiki.ringcentral.com/display/TA/Telephony+Platform+API+-+TAS+10.2#/Sessions/op_session_add_CallOut"
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MakeCallOutRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallSession"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/call-out",
                "x-throttling-group": "Heavy",
                "x-internal-api": false,
                "x-app-permission": "CallControl",
                "x-docs-level": "Public",
                "x-failover-strategy": "Hardening",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/call-out",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/call-out"
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}": {
            "get": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Get Call Session Status",
                "description": "Returns the status of a call session by ID.",
                "operationId": "readCallSessionStatus",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "timestamp",
                        "in": "query",
                        "description": "The date and time of a call session latest change",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "The time frame of awaiting for a status change before sending the resulting one in response",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallSession"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-docs-level": "Public",
                "x-app-permission": "CallControl",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2",
                "x-beta-api": false
            },
            "delete": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Drop Call Session",
                "description": "Drops a call session.",
                "operationId": "deleteCallSession",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-app-permission": "CallControl",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2",
                "x-beta-api": false
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/hold": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Hold Call Party",
                "description": "Puts the party to stand-alone mode and starts to play Hold Music according to configuration & state to peers. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.",
                "operationId": "holdCallParty",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallParty"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions/parties/hold",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-app-permission": "CallControl",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)/hold",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3/hold",
                "x-beta-api": false
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/unhold": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Unhold Call Party",
                "description": "Brings a party back into a call and stops to play Hold Music. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to unhold both endpoints to remove Hold Music and bring media back.",
                "operationId": "unholdCallParty",
                "externalDocs": {
                    "description": "Find more info about response format",
                    "url": "https://wiki.ringcentral.com/display/TA/Telephony+Platform+API+-+TAS+10.2#/Parties/op_party_unhold"
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallParty"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions/parties/unhold",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-app-permission": "CallControl",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)/unhold",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3/unhold",
                "x-beta-api": false
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/reject": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Reject Call Party",
                "description": "Rejects an inbound call in a \"Setup\" or \"Proceeding\" state",
                "operationId": "rejectParty",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions/parties/reject",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-app-permission": "CallControl",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)/reject",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3/reject",
                "x-beta-api": false
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/ignore": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "x-beta-api": true,
                "summary": "Ignore Call in Queue",
                "description": "Ignores a call to a call queue agent in `Setup` or `Proceeding` state.",
                "operationId": "ignoreCallInQueue",
                "externalDocs": {
                    "description": "Find more info about body and response format",
                    "url": "https://wiki.ringcentral.com/display/TA/Telephony+Platform+API+-+TAS+19.2#/Parties/op_party_ignore"
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IgnoreRequestBody"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "x-api-group": "telephony/sessions/parties/ignore",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-app-permission": "CallControl",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)/ignore",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3/ignore",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/transfer": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Transfer Call Party",
                "description": "Transfers a party by placing a new call to the specified target",
                "operationId": "transferCallParty",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransferTarget"
                            }
                        }
                    },
                    "description": "Defines a target for a party transfer. Only a single target is allowed",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallParty"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions/parties/transfer",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-app-permission": "CallControl",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)/transfer",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3/transfer",
                "x-beta-api": false
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/answer": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Answer Call Party",
                "description": "Answers a call on a certain device using this device identifier. Currently it is possible to answer an incoming call via this method after the following actions: call forward, call transfer or call flip.",
                "operationId": "answerCallParty",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnswerTarget"
                            }
                        }
                    },
                    "description": "Distributes a non-answered call to the defined target. Only a single target is allowed",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Call Session Information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallParty"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions/parties/answer",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-app-permission": "CallControl",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)/answer",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3/answer",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/pickup": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Pickup Call",
                "description": "Picks up a call parked to the specified park location.",
                "operationId": "pickupCallParty",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PickupTarget"
                            }
                        }
                    },
                    "description": "Distributes a non-answered call to the defined target. Only a single target is allowed",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallParty"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "x-api-group": "telephony/sessions/parties/pickup",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-app-permission": "CallControl",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)/pickup",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3/pickup",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/forward": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Forward Call Party",
                "description": "Distributes a non-answered call to the defined target. Applicable for \"Setup\" or \"Proceeding\" states",
                "operationId": "forwardCallParty",
                "externalDocs": {
                    "description": "Find more info about body and response format",
                    "url": "https://wiki.ringcentral.com/display/TA/Telephony+Platform+API+-+TAS+10.2#/Parties/op_party_forward"
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForwardTarget"
                            }
                        }
                    },
                    "description": "Distributes a non-answered call to the defined target. Only a single target is allowed",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallParty"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions/parties/forward",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-docs-level": "Public",
                "x-app-permission": "CallControl",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)/forward",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3/forward",
                "x-beta-api": false
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/reply": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Reply with Text",
                "description": "Replies with text/pattern without picking up a call.",
                "operationId": "replyParty",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CallPartyReply"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReplyParty"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Server is unable to process request just now"
                    }
                },
                "x-api-group": "telephony/sessions/parties/reply",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-app-permission": "CallControl",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)/reply",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3/reply",
                "x-docs-level": "Public",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/flip": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Call Flip on Party",
                "description": "Performs call flip procedure by holding opposite party and calling to the specified target",
                "operationId": "callFlipParty",
                "externalDocs": {
                    "description": "Find more info about body and response format",
                    "url": "https://wiki.ringcentral.com/display/TA/Telephony+Platform+API+-+TAS+10.2#/Parties/op_party_flip"
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CallPartyFlip"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions/parties/flip",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-docs-level": "Public",
                "x-app-permission": "CallControl",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)/flip",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3/flip",
                "x-beta-api": false
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/park": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "x-beta-api": true,
                "summary": "Call Park on Party",
                "description": "Performs call park procedure to set on park one of the call parties in call dialog.",
                "operationId": "callParkParty",
                "externalDocs": {
                    "description": "Find more info about body and response format",
                    "url": "https://wiki.ringcentral.com/display/TA/Telephony+Platform+API+-+TAS+11.0#/Parties/op_party_park"
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions/parties/park",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-docs-level": "Public",
                "x-app-permission": "CallControl",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)/park",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3/park"
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}": {
            "get": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Get Call Party Status",
                "description": "Returns a party status of a call session by ID.",
                "operationId": "readCallPartyStatus",
                "externalDocs": {
                    "description": "Find more info about response format",
                    "url": "https://wiki.ringcentral.com/display/TA/Telephony+Platform+API+-+TAS+10.2#/Parties/op_party_get"
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallParty"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions/parties",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-docs-level": "Public",
                "x-app-permission": "CallControl",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3",
                "x-beta-api": false
            },
            "patch": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Update Call Party",
                "description": "Modify the party of a call session by ID. There is a known limitation for Mute scenario - mute via REST API doesn't work with mute placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and Ringcentral Desktop app you need to unmute both endpoints to bring media back. ",
                "operationId": "updateCallParty",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartyUpdateRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallParty"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions/parties",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-docs-level": "Public",
                "x-app-permission": "CallControl",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3",
                "x-beta-api": false
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/recordings": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Create Recording",
                "description": "Starts a new call recording for the party",
                "operationId": "startCallRecording",
                "externalDocs": {
                    "description": "Find more info about response format",
                    "url": "https://wiki.ringcentral.com/display/TA/Telephony+Platform+API+-+TAS+10.2#/Parties/op_party_addRecording"
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions/parties/recordings",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-docs-level": "Public",
                "x-app-permission": "CallControl",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)/recordings",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3/recordings",
                "x-beta-api": false
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/parties/{partyId}/recordings/{recordingId}": {
            "patch": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Pause/Resume Recording",
                "description": "Pause/resume recording",
                "operationId": "pauseResumeCallRecording",
                "externalDocs": {
                    "description": "Find more info about response format",
                    "url": "https://wiki.ringcentral.com/display/TA/Telephony+Platform+API+-+TAS+10.2#/Parties/op_party_modifyRecording"
                },
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "query",
                        "description": "Identifies a brand of a logged in user or a brand of a sign-up session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "partyId",
                        "in": "path",
                        "description": "Internal identifier of a call party",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "recordingId",
                        "in": "path",
                        "description": "Internal identifier of a recording",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CallRecordingUpdate"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallRecording"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions/parties/recordings",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-docs-level": "Public",
                "x-app-permission": "CallControl",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/parties/(.*)/recordings/(.*)",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/parties/$3/recordings/$4",
                "x-beta-api": false
            }
        },
        "/restapi/v1.0/account/{accountId}/telephony/sessions/{telephonySessionId}/supervise": {
            "post": {
                "tags": [
                    "Call Control"
                ],
                "summary": "Supervise Call",
                "description": "Allows to monitor a call in 'Listen' mode. Input parameters should contain extension number of a monitored user and internal identifier of a supervisor's device. Call session should be specified in path. Currently is not supported for Sandbox environment.",
                "operationId": "superviseCallSession",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "~"
                        }
                    },
                    {
                        "name": "telephonySessionId",
                        "in": "path",
                        "description": "Internal identifier of a call session",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SuperviseCallSessionRequest"
                            }
                        }
                    },
                    "description": "JSON body",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuperviseCallSession"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Temporary Unavailable"
                    }
                },
                "x-api-group": "telephony/sessions",
                "x-throttling-group": "Light",
                "x-internal-api": false,
                "x-app-permission": "CallControl",
                "x-docs-level": "Public",
                "x-rewrite-uri-from": "/restapi/v1.0/account/(.*)/telephony/sessions/(.*)/supervise",
                "x-rewrite-uri-to": "/telephony/v1/account/$1/sessions/$2/supervise",
                "x-beta-api": true
            }
        },
        "/restapi/v1.0/glip/data-export": {
            "post": {
                "tags": [
                    "Glip Compliance Exports"
                ],
                "description": "Creates a task for Glip data export and returns a link at which the exported data will be available in future once the task is implemented. The exported data can be downloaded by calling Get Data Export Task method with the specific task ID.",
                "operationId": "createDataExportTask",
                "summary": "Create Data Export Task",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDataExportTaskRequest"
                            }
                        }
                    },
                    "description": "JSON body"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataExportTask"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "glip/data-export",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/data-export",
                "x-rewrite-uri-to": "/glip/v1/data-export",
                "x-throttling-group": "Heavy",
                "x-app-permission": "Glip",
                "x-docs-level": "Public"
            }
        },
        "/restapi/v1.0/glip/data-export/{taskId}": {
            "get": {
                "tags": [
                    "Glip Compliance Exports"
                ],
                "description": "Returns the links for downloading Glip data exported within the specified task. If the export task is still in progress, then only the task status will be returned. If the data is ready for downloading, then the list of URLs will be returned.",
                "summary": "Get Data Export Task",
                "operationId": "readDataExportTask",
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "description": "Internal identifier of a task to be retrieved",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataExportTask"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "glip/compliance",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-rewrite-uri-from": "/restapi/v1.0/glip/data-export/(.*)",
                "x-rewrite-uri-to": "/glip/v1/data-export/$1",
                "x-docs-level": "Public",
                "x-throttling-group": "Medium"
            }
        },
        "/restapi/v1.0/account/{accountId}/message-store-report": {
            "post": {
                "tags": [
                    "Message Exports"
                ],
                "description": "Creates a task to collect all account messages for a specified time interval.",
                "summary": "Create Message Store Report",
                "operationId": "createMessageStoreReport",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMessageStoreReportRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageStoreReport"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Wrong request provided"
                    },
                    "503": {
                        "description": "Internal error"
                    }
                },
                "x-api-group": "message-store/task",
                "x-app-permission": "ReadMessages",
                "x-user-permission": "Users",
                "x-docs-level": "Public",
                "x-throttling-group": "Heavy"
            }
        },
        "/restapi/v1.0/account/{accountId}/message-store-report/{taskId}": {
            "get": {
                "tags": [
                    "Message Exports"
                ],
                "description": "Returns the current status of a task on report creation.",
                "summary": "Get Message Store Report Task",
                "operationId": "readMessageStoreReportTask",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageStoreReport"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "message-store/task",
                "x-app-permission": "ReadMessages",
                "x-user-permission": "Users",
                "x-docs-level": "Public",
                "x-throttling-group": "Heavy"
            }
        },
        "/restapi/v1.0/account/{accountId}/message-store-report/{taskId}/archive": {
            "get": {
                "tags": [
                    "Message Exports"
                ],
                "description": "Returns the created report with message data not including attachments.",
                "summary": "Get Message Store Report Archive",
                "operationId": "readMessageStoreReportArchive",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageStoreReportArchive"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "message-store/task/archive",
                "x-app-permission": "ReadMessages",
                "x-user-permission": "Users",
                "x-docs-level": "Public",
                "x-throttling-group": "Heavy"
            }
        },
        "/restapi/v1.0/account/{accountId}/message-store-report/{taskId}/archive/{archiveId}": {
            "get": {
                "tags": [
                    "Message Exports"
                ],
                "description": "Returns one of the report archives with message contents in application/zip format.",
                "summary": "Get Message Store Report Archive Content",
                "operationId": "readMessageStoreReportArchiveContent",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "archiveId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Archived Data",
                        "content": {
                            "application/zip": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "x-api-group": "message-store/task/archive",
                "x-app-permission": "ReadMessages",
                "x-user-permission": "Users",
                "x-docs-level": "Public",
                "x-throttling-group": "Heavy"
            }
        },
        "/restapi/oauth/authorize": {
            "get": {
                "tags": [
                    "OAuth 2.0"
                ],
                "summary": "Authorize",
                "operationId": "authorize",
                "description": "Returns a link to a login page location.",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "response_type": {
                                        "description": "Determines authorization flow: **code** - Authorization Code, **token** - Implicit Grant",
                                        "type": "string",
                                        "enum": [
                                            "code",
                                            "token"
                                        ]
                                    },
                                    "redirect_uri": {
                                        "description": "This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration",
                                        "type": "string"
                                    },
                                    "client_id": {
                                        "description": "Identifier (key) of a client application",
                                        "type": "string"
                                    },
                                    "state": {
                                        "description": "Client state. Returned back to the client at the end of the flow",
                                        "type": "string"
                                    },
                                    "brand_id": {
                                        "description": "Brand identifier. If it is not provided in request, server will try to determine brand from client app profile. The default value is '1210' - RingCentral US",
                                        "type": "string"
                                    },
                                    "display": {
                                        "description": "Style of login form. The default value is 'page'. The 'popup' and 'touch' values are featured for mobile applications",
                                        "type": "string",
                                        "enum": [
                                            "page",
                                            "popup",
                                            "touch",
                                            "mobile"
                                        ]
                                    },
                                    "prompt": {
                                        "description": "Specifies which login form will be displayed. Space-separated set of the following values: 'login' - official RingCentral login form, 'sso' - Single Sign-On login form, 'consent' - form to show the requested scope and prompt user for consent. Either 'login' or 'sso' (or both) must be specified. The default value is 'login&sso'",
                                        "type": "string",
                                        "enum": [
                                            "login",
                                            "sso",
                                            "consent"
                                        ]
                                    },
                                    "localeId": {
                                        "description": "Localization code of a language. Overwrites 'Accept-Language' header value",
                                        "type": "string"
                                    },
                                    "ui_locales": {
                                        "description": "Localization code of a language. Overwrites 'localeId' parameter value",
                                        "type": "string"
                                    },
                                    "ui_options": {
                                        "description": "User interface options data",
                                        "type": "string",
                                        "enum": [
                                            "hide_logo",
                                            "hide_tos",
                                            "hide_remember_me",
                                            "external_popup",
                                            "old_ui"
                                        ]
                                    },
                                    "scope": {
                                        "type": "string"
                                    },
                                    "accept_language": {
                                        "type": "string"
                                    },
                                    "request": {
                                        "type": "string"
                                    },
                                    "request_uri": {
                                        "type": "string"
                                    },
                                    "nonce": {
                                        "type": "string"
                                    },
                                    "code_challenge": {
                                        "type": "string"
                                    },
                                    "code_challenge_method": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "response_type",
                                    "redirect_uri",
                                    "client_id"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "302": {
                        "description": "Found"
                    }
                },
                "x-metered-api": true,
                "x-metering-group": "Free",
                "x-docs-level": "Public"
            }
        },
        "/restapi/oauth/revoke": {
            "post": {
                "tags": [
                    "OAuth 2.0"
                ],
                "summary": "Revoke Token",
                "operationId": "revokeToken",
                "description": "Revokes access/refresh token. Requests to this endpoint must be authenticated with HTTP Basic scheme using the application key and application secret as login and password, correspondingly.",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "client_assertion_type": {
                                        "type": "string"
                                    },
                                    "client_assertion": {
                                        "type": "string"
                                    },
                                    "token": {
                                        "description": "Active access or refresh token to be revoked",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "token"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "x-api-group": "oauth/revoke",
                "x-metered-api": true,
                "x-metering-group": "Free",
                "x-throttling-group": "Auth",
                "x-docs-level": "Public"
            }
        },
        "/restapi/oauth/token": {
            "post": {
                "tags": [
                    "OAuth 2.0"
                ],
                "summary": "Get Token",
                "operationId": "getToken",
                "description": "Returns access tokens for making API requests",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "description": "Phone number linked to an account or extension in E.164 format with or without leading '+' sign",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "User's password",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "extension": {
                                        "description": "Optional. Extension short number. If company number is specified as a username, and extension is not specified, the server will attempt to authenticate client as main company administrator",
                                        "type": "string"
                                    },
                                    "grant_type": {
                                        "description": "Grant type",
                                        "type": "string",
                                        "enum": [
                                            "authorization_code",
                                            "password",
                                            "refresh_token",
                                            "client_credentials"
                                        ],
                                        "default": "password"
                                    },
                                    "code": {
                                        "description": "Authorization code",
                                        "type": "string"
                                    },
                                    "redirect_uri": {
                                        "description": "This is a callback URI which determines where the response is sent. The value of this parameter must exactly match one of the URIs you have provided for your app upon registration",
                                        "type": "string"
                                    },
                                    "access_token_ttl": {
                                        "description": "Access token lifetime in seconds",
                                        "type": "integer",
                                        "format": "int64",
                                        "minimum": 600,
                                        "maximum": 3600,
                                        "default": 3600
                                    },
                                    "refresh_token_ttl": {
                                        "description": "Refresh token lifetime in seconds",
                                        "type": "integer",
                                        "format": "int64",
                                        "maximum": 604800,
                                        "default": 604800
                                    },
                                    "scope": {
                                        "description": "List of API permissions to be used with access token. Can be omitted when requesting all permissions defined during the application registration phase",
                                        "type": "string"
                                    },
                                    "refresh_token": {
                                        "description": "Previously issued refresh token. This is the only formData field used for the Refresh Token Flow.",
                                        "type": "string"
                                    },
                                    "endpoint_id": {
                                        "description": "The unique identifier of a client application. If not specified, the previously specified or auto generated value is used by default",
                                        "type": "string"
                                    },
                                    "pin": {
                                        "type": "string"
                                    },
                                    "client_id": {
                                        "type": "string"
                                    },
                                    "account_id": {
                                        "type": "string"
                                    },
                                    "partner_account_id": {
                                        "type": "string"
                                    },
                                    "client_assertion_type": {
                                        "type": "string"
                                    },
                                    "client_assertion": {
                                        "type": "string"
                                    },
                                    "assertion": {
                                        "type": "string"
                                    },
                                    "brand_id": {
                                        "type": "string"
                                    },
                                    "code_verifier": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Access/Refresh Tokens",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "1. invalid_request: Unsupported grant type\n2. invalid_client: Bad Application Release Status: Blocked\n"
                    },
                    "415": {
                        "description": "Unsupported Media Type"
                    },
                    "429": {
                        "description": "Request rate exceeded"
                    }
                },
                "x-api-group": "oauth/token",
                "x-metered-api": true,
                "x-metering-group": "System",
                "x-throttling-group": "Auth",
                "x-docs-level": "Public"
            }
        }
    },
    "servers": [
        {
            "url": "https://platform.ringcentral.com/"
        }
    ],
    "components": {
        "requestBodies": {
            "GlipNoteCreate": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/GlipNoteCreate"
                        }
                    }
                },
                "required": true
            },
            "User": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/User"
                        }
                    }
                },
                "description": "a new user without 'id'"
            },
            "EmergencyLocationInfoRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/EmergencyLocationInfoRequest"
                        }
                    }
                },
                "description": "JSON body",
                "required": true
            },
            "MeetingRequestResource": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/MeetingRequestResource"
                        }
                    }
                }
            },
            "MakeRingOutRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/MakeRingOutRequest"
                        }
                    }
                },
                "description": "JSON body",
                "required": true
            },
            "PersonalContactRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PersonalContactRequest"
                        }
                    }
                }
            },
            "GlipMessageAttachmentInfoRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/GlipMessageAttachmentInfoRequest"
                        }
                    }
                },
                "required": true
            },
            "GlipEventCreate": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/GlipEventCreate"
                        }
                    }
                },
                "required": true
            },
            "IVRMenuInfo": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/IVRMenuInfo"
                        }
                    }
                },
                "description": "JSON body",
                "required": true
            }
        },
        "securitySchemes": {
            "OAuth2": {
                "type": "oauth2",
                "flows": {
                    "authorizationCode": {
                        "authorizationUrl": "https://platform.ringcentral.com/restapi/oauth/authorize",
                        "tokenUrl": "https://platform.ringcentral.com/restapi/oauth/token",
                        "scopes": {}
                    }
                }
            },
            "api_key": {
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
            }
        },
        "schemas": {
            "GetVersionsResponse": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of the API version"
                    },
                    "apiVersions": {
                        "type": "array",
                        "description": "Full API version information: uri, number, release date",
                        "items": {
                            "$ref": "#/components/schemas/VersionInfo"
                        }
                    },
                    "serverVersion": {
                        "type": "string",
                        "description": "Server version"
                    },
                    "serverRevision": {
                        "type": "string",
                        "description": "Server revision"
                    }
                },
                "example": {
                    "application/json": {
                        "uri": "https://platform.ringcentral.com/restapi",
                        "apiVersions": [
                            {
                                "uri": "https://platform.ringcentral.com/restapi/v1.0",
                                "versionString": "1.0.34",
                                "releaseDate": "2018-02-09T00:00:00.000Z",
                                "uriString": "v1.0"
                            }
                        ],
                        "serverVersion": "10.0.4.7854",
                        "serverRevision": "32f2a96b769c"
                    }
                }
            },
            "GetVersionResponse": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of the version info resource"
                    },
                    "versionString": {
                        "type": "string",
                        "description": "Version of the RingCentral REST API"
                    },
                    "releaseDate": {
                        "type": "string",
                        "description": "Release date of this version"
                    },
                    "uriString": {
                        "type": "string",
                        "description": "URI part determining the current version"
                    }
                },
                "example": {
                    "application/json": {
                        "uri": "https://platform.ringcentral.com/restapi/v1.0",
                        "versionString": "1.0.34",
                        "releaseDate": "2018-02-09T00:00:00.000Z",
                        "uriString": "v1.0"
                    }
                }
            },
            "VersionInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of API versions"
                    },
                    "versionString": {
                        "type": "string",
                        "description": "Version of the RingCentral REST API"
                    },
                    "releaseDate": {
                        "type": "string",
                        "description": "Release date of this version"
                    },
                    "uriString": {
                        "type": "string",
                        "description": "URI part determining the current version"
                    }
                }
            },
            "ActiveCallsResponse": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of call log records",
                        "items": {
                            "$ref": "#/components/schemas/CallLogRecord"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/CallLogNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/CallLogPagingInfo"
                    }
                }
            },
            "AccountCallLogResponse": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of call log records",
                        "items": {
                            "$ref": "#/components/schemas/CallLogRecord"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/CallLogNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/CallLogPagingInfo"
                    }
                }
            },
            "AccountCallLogSyncResponse": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of call log records with synchronization information. For 'ISync' the total number of returned records is limited to 250; this includes both new records and the old ones, specified by the recordCount parameter",
                        "items": {
                            "$ref": "#/components/schemas/CompanyCallLogRecord"
                        }
                    },
                    "syncInfo": {
                        "$ref": "#/components/schemas/CompanyCallLogSyncInfo"
                    }
                }
            },
            "CompanyCallLogRecord": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a cal log record"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a call log record"
                    },
                    "sessionId": {
                        "type": "string",
                        "description": "Internal identifier of a call session"
                    },
                    "from": {
                        "$ref": "#/components/schemas/CallLogCallerInfo"
                    },
                    "to": {
                        "$ref": "#/components/schemas/CallLogCallerInfo"
                    },
                    "type": {
                        "type": "string",
                        "description": "Call type",
                        "enum": [
                            "Voice",
                            "Fax"
                        ]
                    },
                    "direction": {
                        "type": "string",
                        "description": "Call direction",
                        "enum": [
                            "Inbound",
                            "Outbound"
                        ]
                    },
                    "deleted": {
                        "type": "boolean",
                        "description": "Indicates whether the record is deleted. Returned for deleted records, for ISync requests"
                    },
                    "action": {
                        "type": "string",
                        "description": "Action description of the call operation",
                        "enum": [
                            "Unknown",
                            "Phone Login",
                            "Calling Card",
                            "VoIP Call",
                            "Phone Call",
                            "Paging",
                            "Hunting",
                            "Call Park",
                            "Monitoring",
                            "Text Relay",
                            "External Application",
                            "Park Location",
                            "CallOut-CallMe",
                            "Conference Call",
                            "Move",
                            "RC Meetings",
                            "Accept Call",
                            "FindMe",
                            "FollowMe",
                            "RingMe",
                            "Transfer",
                            "Call Return",
                            "Ring Directly",
                            "RingOut Web",
                            "RingOut PC",
                            "RingOut Mobile",
                            "Emergency",
                            "E911 Update",
                            "Support",
                            "Incoming Fax",
                            "Outgoing Fax"
                        ]
                    },
                    "result": {
                        "type": "string",
                        "description": "Status description of the call operation",
                        "enum": [
                            "Unknown",
                            "Accepted",
                            "Call connected",
                            "In Progress",
                            "Voicemail",
                            "Reply",
                            "Missed",
                            "Busy",
                            "Rejected",
                            "No Answer",
                            "Hang Up",
                            "Blocked",
                            "Suspended account",
                            "Call Failed",
                            "Call Failure",
                            "Internal Error",
                            "IP Phone Offline",
                            "No Calling Credit",
                            "Restricted Number",
                            "Wrong Number",
                            "Answered Not Accepted",
                            "Stopped",
                            "International Disabled",
                            "International Restricted",
                            "Abandoned",
                            "Declined",
                            "Received",
                            "Fax on Demand",
                            "Partial Receive",
                            "Receive Error",
                            "Fax Receipt Error",
                            "Sent",
                            "Fax Partially Sent",
                            "Send Error",
                            "Fax Not Sent",
                            "Fax Poor Line"
                        ]
                    },
                    "reason": {
                        "type": "string",
                        "enum": [
                            "Accepted",
                            "Connected",
                            "line Busy",
                            "Not Answered",
                            "No Answer",
                            "Hang Up",
                            "Stopped",
                            "Internal Error",
                            "No Credit",
                            "Restricted Number",
                            "Wrong Number",
                            "International Disabled",
                            "International Restricted",
                            "Bad Number",
                            "Info 411 Restricted",
                            "Customer 611 Restricted",
                            "No Digital Line",
                            "Failed Try Again",
                            "Max Call Limit",
                            "Too Many Calls",
                            "Calls Not Accepted",
                            "Number Not Allowed",
                            "Number Blocked",
                            "Number Disabled",
                            "Resource Error",
                            "Call Loop",
                            "Fax Not Received",
                            "Fax Partially Sent",
                            "Fax Not Sent",
                            "Fax Poor Line",
                            "Fax Prepare Error",
                            "Fax Save Error",
                            "Fax Send Error"
                        ]
                    },
                    "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The call start datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "Call duration in seconds"
                    },
                    "recording": {
                        "$ref": "#/components/schemas/CallLogRecordingInfo"
                    }
                }
            },
            "GetCallRecordingResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a call recording"
                    },
                    "contentUri": {
                        "type": "string",
                        "description": "Link to a call recording binary content"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "Call recording file format. Supported format is audio/x-wav"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "Recorded call duration"
                    }
                }
            },
            "UserCallLogResponse": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of call log records",
                        "items": {
                            "$ref": "#/components/schemas/CallLogRecord"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/CallLogNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/CallLogPagingInfo"
                    }
                }
            },
            "CallLogSync": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of call log records with synchronization information. For ISync the total number of returned records is limited to 250; this includes both new records and the old ones, specified by the recordCount parameter",
                        "items": {
                            "$ref": "#/components/schemas/CallLogRecord"
                        }
                    },
                    "syncInfo": {
                        "$ref": "#/components/schemas/SyncInfoCallLog"
                    }
                }
            },
            "UserCallLogRecord": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a cal log record"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a call log record"
                    },
                    "sessionId": {
                        "type": "string",
                        "description": "Internal identifier of a call session"
                    },
                    "from": {
                        "$ref": "#/components/schemas/CallLogCallerInfo"
                    },
                    "to": {
                        "$ref": "#/components/schemas/CallLogCallerInfo"
                    },
                    "type": {
                        "type": "string",
                        "description": "Call type",
                        "enum": [
                            "Voice",
                            "Fax"
                        ]
                    },
                    "direction": {
                        "type": "string",
                        "description": "Call direction",
                        "enum": [
                            "Inbound",
                            "Outbound"
                        ]
                    },
                    "startTime": {
                        "type": "string",
                        "description": "The call start datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "deleted": {
                        "type": "boolean",
                        "description": "Indicates whether the record is deleted. Returned for deleted records, for ISync requests"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "Call duration in seconds"
                    },
                    "recording": {
                        "$ref": "#/components/schemas/CallLogRecordingInfo"
                    },
                    "action": {
                        "type": "string",
                        "description": "Action description of the call operation",
                        "enum": [
                            "Unknown",
                            "Phone Login",
                            "Calling Card",
                            "VoIP Call",
                            "Phone Call",
                            "Paging",
                            "Hunting",
                            "Call Park",
                            "Monitoring",
                            "Text Relay",
                            "External Application",
                            "Park Location",
                            "CallOut-CallMe",
                            "Conference Call",
                            "Move",
                            "RC Meetings",
                            "Accept Call",
                            "FindMe",
                            "FollowMe",
                            "RingMe",
                            "Transfer",
                            "Call Return",
                            "Ring Directly",
                            "RingOut Web",
                            "RingOut PC",
                            "RingOut Mobile",
                            "Emergency",
                            "E911 Update",
                            "Support",
                            "Incoming Fax",
                            "Outgoing Fax"
                        ]
                    },
                    "result": {
                        "type": "string",
                        "description": "Status description of the call operation",
                        "enum": [
                            "Unknown",
                            "Accepted",
                            "Call connected",
                            "In Progress",
                            "Voicemail",
                            "Reply",
                            "Missed",
                            "Busy",
                            "Rejected",
                            "No Answer",
                            "Hang Up",
                            "Blocked",
                            "Suspended account",
                            "Call Failed",
                            "Call Failure",
                            "Internal Error",
                            "IP Phone Offline",
                            "No Calling Credit",
                            "Restricted Number",
                            "Wrong Number",
                            "Answered Not Accepted",
                            "Stopped",
                            "International Disabled",
                            "International Restricted",
                            "Abandoned",
                            "Declined",
                            "Received",
                            "Fax on Demand",
                            "Partial Receive",
                            "Receive Error",
                            "Fax Receipt Error",
                            "Sent",
                            "Fax Partially Sent",
                            "Send Error",
                            "Fax Not Sent",
                            "Fax Poor Line"
                        ]
                    },
                    "reason": {
                        "type": "string",
                        "enum": [
                            "Accepted",
                            "Connected",
                            "line Busy",
                            "Not Answered",
                            "No Answer",
                            "Hang Up",
                            "Stopped",
                            "Internal Error",
                            "No Credit",
                            "Restricted Number",
                            "Wrong Number",
                            "International Disabled",
                            "International Restricted",
                            "Bad Number",
                            "Info 411 Restricted",
                            "Customer 611 Restricted",
                            "No Digital Line",
                            "Failed Try Again",
                            "Max Call Limit",
                            "Too Many Calls",
                            "Calls Not Accepted",
                            "Number Not Allowed",
                            "Number Blocked",
                            "Number Disabled",
                            "Resource Error",
                            "Call Loop",
                            "Fax Not Received",
                            "Fax Partially Sent",
                            "Fax Not Sent",
                            "Fax Poor Line",
                            "Fax Prepare Error",
                            "Fax Save Error",
                            "Fax Send Error"
                        ],
                        "description": "Reason of a call result:\n * `Accepted` - The call was connected to and accepted by this number\n * `Connected` - The call was answered, but there was no response on how to handle the call (for example, a voice mail system answered the call and did not push \"1\" to accept)\n * `Line Busy` - The phone number you dialed was busy\n * `Not Answered` - The phone number you dialed was not answered\n * `No Answer` - You did not answer the call\n * `Hang Up` - The caller hung up before the call was answered\n * `Stopped` - This attempt was stopped because the call was answered by another phone\n * `Internal Error` - An internal error occurred when making the call. Please try again\n * `No Credit` - There was not enough Calling Credit on your account to make this call\n * `Restricted Number` - The number you dialed is restricted by RingCentral\n * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone number. Please check the number and try again\n * `International Disabled` - International calling is not enabled on your account. Contact customer service to activate International Calling\n * `International Restricted` - The country and/or area you attempted to call has been prohibited by your administrator\n * `Bad Number` - An error occurred when making the call. Please check the number before trying again\n * `Info 411 Restricted` - Calling to 411 Information Services is restricted\n * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer service at <(888) 555-1212>\n * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet connection\n * `Failed Try Again` - Call failed. Please try again\n * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit\n * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other Phone has reached its limit. Please contact customer service\n * `Calls Not Accepted` - Your account was not accepting calls at this time\n * `Number Not Allowed` - The number that was dialed to access your account is not allowed\n * `Number Blocked` - This number is in your Blocked Numbers list\n * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by your administrator\n * `Resource Error` - An error occurred when making the call. Please try again\n * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please check that you are not forwarding calls back to your own account\n * `Fax Not Received` - An incoming fax could not be received because a proper connection with the sender's fax machine could not be established\n * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone line quality to poor to maintain the connection or the call was dropped\n * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the receiving fax machine\n * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too poor to send the fax\n * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again\n * `Fax Save Error` - An internal error occurred when saving the fax. Please try again\n * `Fax Send Error` - An error occurred when sending the fax. Please try again       \n"
                    }
                }
            },
            "CallLogNavigationInfo": {
                "type": "object",
                "properties": {
                    "firstPage": {
                        "$ref": "#/components/schemas/CallLogNavigationInfoURI"
                    },
                    "nextPage": {
                        "$ref": "#/components/schemas/CallLogNavigationInfoURI"
                    },
                    "previousPage": {
                        "$ref": "#/components/schemas/CallLogNavigationInfoURI"
                    },
                    "lastPage": {
                        "$ref": "#/components/schemas/CallLogNavigationInfoURI"
                    }
                }
            },
            "CallLogPagingInfo": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result is empty (because non-existent page was specified or perPage=0 was requested)"
                    },
                    "perPage": {
                        "type": "integer",
                        "default": 100,
                        "description": "Current page size, describes how many items are in each page. Maximum value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000) is applied"
                    },
                    "pageStart": {
                        "type": "integer",
                        "description": "The zero-based number of the first element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "pageEnd": {
                        "type": "integer",
                        "description": "The zero-based index of the last element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "totalPages": {
                        "type": "integer",
                        "description": "The total number of pages in a dataset. May be omitted for some resources due to performance reasons"
                    },
                    "totalElements": {
                        "type": "integer",
                        "description": "The total number of elements in a dataset. May be omitted for some resource due to performance reasons"
                    }
                }
            },
            "CompanyCallLogSyncInfo": {
                "type": "object",
                "properties": {
                    "syncType": {
                        "type": "string",
                        "enum": [
                            "Fsync",
                            "ISync"
                        ],
                        "description": "Type of synchronization"
                    },
                    "syncToken": {
                        "type": "string",
                        "description": "Synchronization token"
                    },
                    "syncTime": {
                        "type": "string",
                        "description": "Time of last synchronization in (ISO 8601)[https://en.wikipedia.org/wiki/ISO_8601] format including timezone, for example *2016-03-10T18:07:52.534Z*"
                    }
                }
            },
            "CallLogCallerInfo": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number of a party. Usually it is a plain number including country and area code like 18661234567. But sometimes it could be returned from database with some formatting applied, for example (866)123-4567. This property is filled in all cases where parties communicate by means of global phone numbers, for example when calling to direct numbers or sending/receiving SMS"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Extension short number (usually 3 or 4 digits). This property is filled when parties communicate by means of short internal numbers, for example when calling to other extension or sending/receiving Company Pager message"
                    },
                    "extensionId": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    },
                    "location": {
                        "type": "string",
                        "description": "Contains party location (city, state) if one can be determined from phoneNumber. This property is filled only when phoneNumber is not empty and server can calculate location information from it (for example, this information is unavailable for US toll-free numbers)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Symbolic name associated with a party. If the phone does not belong to the known extension, only the location is returned, the name is not determined then"
                    },
                    "device": {
                        "$ref": "#/components/schemas/CallLogRecordDeviceInfo"
                    }
                }
            },
            "CallLogRecordingInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the call recording"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Link to the call recording metadata resource"
                    },
                    "type": {
                        "type": "string",
                        "description": "Indicates recording mode used",
                        "enum": [
                            "Automatic",
                            "OnDemand"
                        ]
                    },
                    "contentUri": {
                        "type": "string",
                        "description": "Link to the call recording binary content"
                    }
                }
            },
            "SyncInfoCallLog": {
                "type": "object",
                "properties": {
                    "syncType": {
                        "type": "string",
                        "description": "Type of synchronization",
                        "enum": [
                            "FSync",
                            "ISync"
                        ]
                    },
                    "syncToken": {
                        "type": "string",
                        "description": "Synchronization token"
                    },
                    "syncTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The last synchronization datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    }
                }
            },
            "CallLogRecord": {
                "type": "object",
                "required": [
                    "legs"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a cal log record"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a call log record"
                    },
                    "sessionId": {
                        "type": "string",
                        "description": "Internal identifier of a call session"
                    },
                    "from": {
                        "$ref": "#/components/schemas/CallLogCallerInfo"
                    },
                    "to": {
                        "$ref": "#/components/schemas/CallLogCallerInfo"
                    },
                    "type": {
                        "type": "string",
                        "description": "Call type",
                        "enum": [
                            "Voice",
                            "Fax"
                        ]
                    },
                    "direction": {
                        "type": "string",
                        "description": "Call direction",
                        "enum": [
                            "Inbound",
                            "Outbound"
                        ]
                    },
                    "action": {
                        "type": "string",
                        "description": "Action description of the call operation",
                        "enum": [
                            "Unknown",
                            "Phone Login",
                            "Calling Card",
                            "VoIP Call",
                            "Phone Call",
                            "Paging",
                            "Hunting",
                            "Call Park",
                            "Monitoring",
                            "Text Relay",
                            "External Application",
                            "Park Location",
                            "CallOut-CallMe",
                            "Conference Call",
                            "Move",
                            "RC Meetings",
                            "Accept Call",
                            "FindMe",
                            "FollowMe",
                            "RingMe",
                            "Transfer",
                            "Call Return",
                            "Ring Directly",
                            "RingOut Web",
                            "RingOut PC",
                            "RingOut Mobile",
                            "Emergency",
                            "E911 Update",
                            "Support",
                            "Incoming Fax",
                            "Outgoing Fax"
                        ]
                    },
                    "result": {
                        "type": "string",
                        "description": "Status description of the call operation",
                        "enum": [
                            "Unknown",
                            "Accepted",
                            "Call connected",
                            "In Progress",
                            "Voicemail",
                            "Reply",
                            "Missed",
                            "Busy",
                            "Rejected",
                            "No Answer",
                            "Hang Up",
                            "Blocked",
                            "Suspended account",
                            "Call Failed",
                            "Call Failure",
                            "Internal Error",
                            "IP Phone Offline",
                            "No Calling Credit",
                            "Restricted Number",
                            "Wrong Number",
                            "Answered Not Accepted",
                            "Stopped",
                            "International Disabled",
                            "International Restricted",
                            "Abandoned",
                            "Declined",
                            "Received",
                            "Fax on Demand",
                            "Partial Receive",
                            "Receive Error",
                            "Fax Receipt Error",
                            "Sent",
                            "Fax Partially Sent",
                            "Send Error",
                            "Fax Not Sent",
                            "Fax Poor Line"
                        ]
                    },
                    "reason": {
                        "type": "string",
                        "enum": [
                            "Accepted",
                            "Connected",
                            "line Busy",
                            "Not Answered",
                            "No Answer",
                            "Hang Up",
                            "Stopped",
                            "Internal Error",
                            "No Credit",
                            "Restricted Number",
                            "Wrong Number",
                            "International Disabled",
                            "International Restricted",
                            "Bad Number",
                            "Info 411 Restricted",
                            "Customer 611 Restricted",
                            "No Digital Line",
                            "Failed Try Again",
                            "Max Call Limit",
                            "Too Many Calls",
                            "Calls Not Accepted",
                            "Number Not Allowed",
                            "Number Blocked",
                            "Number Disabled",
                            "Resource Error",
                            "Call Loop",
                            "Fax Not Received",
                            "Fax Partially Sent",
                            "Fax Not Sent",
                            "Fax Poor Line",
                            "Fax Prepare Error",
                            "Fax Save Error",
                            "Fax Send Error"
                        ],
                        "description": "Reason of a call result: * `Accepted` - The call was connected to and accepted by this number * `Connected` - The call was answered, but there was no response on how to handle the call (for example, a voice mail system answered the call and did not push \"1\" to accept) * `Line Busy` - The phone number you dialed was busy * `Not Answered` - The phone number you dialed was not answered * `No Answer` - You did not answer the call * `Hang Up` - The caller hung up before the call was answered * `Stopped` - This attempt was stopped because the call was answered by another phone * `Internal Error` - An internal error occurred when making the call. Please try again * `No Credit` - There was not enough Calling Credit on your account to make this call * `Restricted Number` - The number you dialed is restricted by RingCentral * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone number. Please check the number and try again * `International Disabled` - International calling is not enabled on your account. Contact customer service to activate International Calling * `International Restricted` - The country and/or area you attempted to call has been prohibited by your administrator * `Bad Number` - An error occurred when making the call. Please check the number before trying again * `Info 411 Restricted` - Calling to 411 Information Services is restricted * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer service at <(888) 555-1212> * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet connection * `Failed Try Again` - Call failed. Please try again * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other Phone has reached its limit. Please contact customer service * `Calls Not Accepted` - Your account was not accepting calls at this time * `Number Not Allowed` - The number that was dialed to access your account is not allowed * `Number Blocked` - This number is in your Blocked Numbers list * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by your administrator * `Resource Error` - An error occurred when making the call. Please try again * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please check that you are not forwarding calls back to your own account * `Fax Not Received` - An incoming fax could not be received because a proper connection with the sender's fax machine could not be established * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone line quality to poor to maintain the connection or the call was dropped * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the receiving fax machine * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too poor to send the fax * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again * `Fax Save Error` - An internal error occurred when saving the fax. Please try again * `Fax Send Error` - An error occurred when sending the fax. Please try again\n"
                    },
                    "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The call start datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "Call duration in seconds"
                    },
                    "recording": {
                        "$ref": "#/components/schemas/CallLogRecordingInfo"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "For 'Detailed' view only. The datetime when the call log record was modified in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "transport": {
                        "type": "string",
                        "description": "For 'Detailed' view only. Call transport",
                        "enum": [
                            "PSTN",
                            "VoIP"
                        ]
                    },
                    "extension": {
                        "$ref": "#/components/schemas/ActiveCallsRecordExtensionInfo"
                    },
                    "delegate": {
                        "$ref": "#/components/schemas/DelegateInfo"
                    },
                    "legs": {
                        "type": "array",
                        "description": "For 'Detailed' view only. Leg description",
                        "items": {
                            "$ref": "#/components/schemas/CallLogRecordLegInfo"
                        }
                    },
                    "message": {
                        "$ref": "#/components/schemas/CallLogRecordMessage"
                    },
                    "deleted": {
                        "type": "boolean",
                        "description": "Returned only if this call was deleted. Value is set to 'True' in this case"
                    }
                }
            },
            "ActiveCallsRecordExtensionInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to an extension on whose behalf a call is initiated"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an extension on whose behalf a call is initiated"
                    }
                }
            },
            "DelegateInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a Secretary extension"
                    },
                    "name": {
                        "type": "string",
                        "description": "Custom name of a Secretary extension"
                    }
                }
            },
            "CallLogRecordLegInfo": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action description of the call operation",
                        "enum": [
                            "Unknown",
                            "Phone Call",
                            "Phone Login",
                            "Incoming Fax",
                            "Accept Call",
                            "FindMe",
                            "FollowMe",
                            "Outgoing Fax",
                            "Call Return",
                            "Calling Card",
                            "Ring Directly",
                            "RingOut Web",
                            "VoIP Call",
                            "RingOut PC",
                            "RingMe",
                            "Transfer",
                            "411 Info",
                            "Emergency",
                            "E911 Update",
                            "Support",
                            "RingOut Mobile"
                        ]
                    },
                    "direction": {
                        "type": "string",
                        "description": "Call direction",
                        "enum": [
                            "Inbound",
                            "Outbound"
                        ]
                    },
                    "duration": {
                        "type": "integer",
                        "description": "Call duration in seconds"
                    },
                    "extension": {
                        "$ref": "#/components/schemas/ExtensionInfoCallLog"
                    },
                    "legType": {
                        "type": "string",
                        "description": "Leg type",
                        "enum": [
                            "SipForwarding",
                            "ServiceMinus2",
                            "ServiceMinus3",
                            "PstnToSip",
                            "Accept",
                            "FindMe",
                            "FollowMe",
                            "TestCall",
                            "FaxSent",
                            "CallBack",
                            "CallingCard",
                            "RingDirectly",
                            "RingOutWebToSubscriber",
                            "RingOutWebToCaller",
                            "SipToPstnMetered",
                            "RingOutClientToSubscriber",
                            "RingOutClientToCaller",
                            "RingMe",
                            "TransferCall",
                            "SipToPstnUnmetered",
                            "RingOutDeviceToSubscriber",
                            "RingOutDeviceToCaller",
                            "RingOutOneLegToCaller",
                            "ExtensionToExtension",
                            "CallPark",
                            "PagingServer",
                            "Hunting",
                            "OutgoingFreeSpDl",
                            "ParkLocation",
                            "ConferenceCall",
                            "MobileApp",
                            "MoveToConference",
                            "Unknown"
                        ]
                    },
                    "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The call start datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "type": {
                        "type": "string",
                        "description": "Call type",
                        "enum": [
                            "Voice",
                            "Fax"
                        ]
                    },
                    "result": {
                        "type": "string",
                        "description": "Status description of the call operation",
                        "enum": [
                            "Unknown",
                            "Accepted",
                            "Call connected",
                            "In Progress",
                            "Voicemail",
                            "Reply",
                            "Missed",
                            "Busy",
                            "Rejected",
                            "No Answer",
                            "Hang Up",
                            "Blocked",
                            "Suspended account",
                            "Call Failed",
                            "Call Failure",
                            "Internal Error",
                            "IP Phone Offline",
                            "No Calling Credit",
                            "Restricted Number",
                            "Wrong Number",
                            "Answered Not Accepted",
                            "Stopped",
                            "International Disabled",
                            "International Restricted",
                            "Abandoned",
                            "Declined",
                            "Received",
                            "Fax on Demand",
                            "Partial Receive",
                            "Receive Error",
                            "Fax Receipt Error",
                            "Sent",
                            "Fax Partially Sent",
                            "Send Error",
                            "Fax Not Sent",
                            "Fax Poor Line"
                        ]
                    },
                    "from": {
                        "$ref": "#/components/schemas/CallLogCallerInfo"
                    },
                    "to": {
                        "$ref": "#/components/schemas/CallLogCallerInfo"
                    },
                    "transport": {
                        "type": "string",
                        "description": "Call transport",
                        "enum": [
                            "PSTN",
                            "VoIP"
                        ]
                    },
                    "recording": {
                        "$ref": "#/components/schemas/CallLogRecordingInfo"
                    },
                    "master": {
                        "type": "boolean",
                        "description": "Returned for 'Detailed' call log. Specifies if the leg is master-leg"
                    }
                }
            },
            "CallLogRecordMessage": {
                "type": "object",
                "description": "Linked message (Fax/Voicemail)",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a message"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of a message"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Link to a message resource"
                    }
                }
            },
            "CallLogNavigationInfoURI": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string"
                    }
                }
            },
            "CallLogRecordDeviceInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a device"
                    },
                    "uri": {
                        "type": "string",
                        "description": "string to a device"
                    }
                }
            },
            "ExtensionInfoCallLog": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of an extension"
                    }
                }
            },
            "MessageEvent": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Universally unique identifier of a notification"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event filter URI"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Datetime of sending a notification in [ISO 8601](shttps://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "body": {
                        "$ref": "#/components/schemas/MessageEventBody"
                    }
                }
            },
            "VoicemailMessageEvent": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Universally unique identifier of a notification"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event filter URI"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Datetime of sending a notification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    },
                    "body": {
                        "$ref": "#/components/schemas/VoicemailMessageEventBody"
                    }
                }
            },
            "GetMessageSyncResponse": {
                "type": "object",
                "required": [
                    "records",
                    "syncInfo"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of message records with synchronization information",
                        "items": {
                            "$ref": "#/components/schemas/GetMessageInfoResponse"
                        }
                    },
                    "syncInfo": {
                        "$ref": "#/components/schemas/SyncInfoMessages"
                    }
                }
            },
            "CreateSMSMessage": {
                "type": "object",
                "required": [
                    "from",
                    "text",
                    "to"
                ],
                "properties": {
                    "from": {
                        "$ref": "#/components/schemas/MessageStoreCallerInfoRequest"
                    },
                    "to": {
                        "type": "array",
                        "description": "Receiver of an SMS message. The phoneNumber property must be filled",
                        "items": {
                            "$ref": "#/components/schemas/MessageStoreCallerInfoRequest"
                        }
                    },
                    "text": {
                        "type": "string",
                        "description": "Text of a message. Max length is 1000 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 500 symbols"
                    }
                }
            },
            "CreateInternalTextMessageRequest": {
                "type": "object",
                "required": [
                    "from",
                    "text"
                ],
                "properties": {
                    "from": {
                        "$ref": "#/components/schemas/PagerCallerInfoRequest"
                    },
                    "replyOn": {
                        "type": "integer",
                        "description": "Internal identifier of a message this message replies to"
                    },
                    "text": {
                        "type": "string",
                        "description": "Text of a pager message. Max length is 1024 symbols (2-byte UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is treated as 2 characters, thus restricting the maximum message length to 512 symbols",
                        "example": "hello world"
                    },
                    "to": {
                        "type": "array",
                        "description": "Optional if replyOn parameter is specified. Receiver of a pager message.",
                        "items": {
                            "$ref": "#/components/schemas/PagerCallerInfoRequest"
                        }
                    }
                }
            },
            "FaxResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Internal identifier of a message"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a message"
                    },
                    "type": {
                        "type": "string",
                        "description": "Message type - 'Fax'"
                    },
                    "from": {
                        "$ref": "#/components/schemas/CallerInfoFrom"
                    },
                    "to": {
                        "type": "array",
                        "description": "Recipient information",
                        "items": {
                            "$ref": "#/components/schemas/CallerInfoTo"
                        }
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Message creation datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "readStatus": {
                        "type": "string",
                        "description": "Message read status",
                        "enum": [
                            "Read",
                            "Unread"
                        ]
                    },
                    "priority": {
                        "type": "string",
                        "description": "Message priority",
                        "enum": [
                            "Normal",
                            "High"
                        ]
                    },
                    "attachments": {
                        "type": "array",
                        "description": "The list of message attachments",
                        "items": {
                            "$ref": "#/components/schemas/MessageAttachmentInfoIntId"
                        }
                    },
                    "direction": {
                        "type": "string",
                        "description": "Message direction",
                        "enum": [
                            "Inbound",
                            "Outbound"
                        ]
                    },
                    "availability": {
                        "type": "string",
                        "description": "Message availability status. Message in 'Deleted' state is still preserved with all its attachments and can be restored. 'Purged' means that all attachments are already deleted and the message itself is about to be physically deleted shortly",
                        "enum": [
                            "Alive",
                            "Deleted",
                            "Purged"
                        ]
                    },
                    "messageStatus": {
                        "type": "string",
                        "description": "Message status. 'Queued' - the message is queued for sending; 'Sent' - a message is successfully sent; 'SendingFailed' - a message sending attempt has failed; 'Received' - a message is received (inbound messages have this status by default)",
                        "enum": [
                            "Queued",
                            "Sent",
                            "SendingFailed",
                            "Received"
                        ]
                    },
                    "faxResolution": {
                        "type": "string",
                        "description": "Resolution of a fax message. ('High' for black and white image scanned at 200 dpi, 'Low' for black and white image scanned at 100 dpi)",
                        "enum": [
                            "High",
                            "Low"
                        ]
                    },
                    "faxPageCount": {
                        "type": "integer",
                        "description": "Page count in a fax message"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Datetime when the message was modified on server in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "coverIndex": {
                        "type": "integer",
                        "description": "Cover page identifier. For the list of available cover page identifiers please call the Fax Cover Pages method"
                    },
                    "coverPageText": {
                        "type": "string",
                        "description": "Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols"
                    }
                }
            },
            "InstantMessageEvent": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Universally unique identifier of a notification"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event filter URI"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Datetime of sending a notification in [ISO 8601](shttps://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "body": {
                        "$ref": "#/components/schemas/InstantMessageEventBody"
                    }
                }
            },
            "GetMessageList": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of records with message information",
                        "items": {
                            "$ref": "#/components/schemas/GetMessageInfoResponse"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/MessagingNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/MessagingPagingInfo"
                    }
                }
            },
            "GetMessageMultiResponse": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/GetMessageInfoMultiResponse"
                }
            },
            "MessageStoreConfiguration": {
                "type": "object",
                "properties": {
                    "retentionPeriod": {
                        "type": "integer",
                        "description": "Retention policy setting, specifying how long to keep messages; the supported value range is 7-90 days",
                        "minimum": 7,
                        "maximum": 90
                    }
                }
            },
            "UpdateMessageRequest": {
                "type": "object",
                "properties": {
                    "readStatus": {
                        "type": "string",
                        "description": "Read status of a message to be changed. Multiple values are accepted",
                        "enum": [
                            "Read",
                            "Unread"
                        ]
                    }
                }
            },
            "GetMessageInfoResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a message"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a message"
                    },
                    "attachments": {
                        "type": "array",
                        "description": "The list of message attachments",
                        "items": {
                            "$ref": "#/components/schemas/MessageAttachmentInfo"
                        }
                    },
                    "availability": {
                        "type": "string",
                        "description": "Message availability status. Message in 'Deleted' state is still preserved with all its attachments and can be restored. 'Purged' means that all attachments are already deleted and the message itself is about to be physically deleted shortly",
                        "enum": [
                            "Alive",
                            "Deleted",
                            "Purged"
                        ]
                    },
                    "conversationId": {
                        "type": "integer",
                        "description": "SMS and Pager only. Identifier of a conversation the message belongs to"
                    },
                    "conversation": {
                        "$ref": "#/components/schemas/ConversationInfo"
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Message creation datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "deliveryErrorCode": {
                        "type": "string",
                        "description": "SMS only. Delivery error code returned by gateway"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Message direction. Note that for some message types not all directions are allowed. For example voicemail messages can be only inbound",
                        "enum": [
                            "Inbound",
                            "Outbound"
                        ]
                    },
                    "faxPageCount": {
                        "type": "integer",
                        "description": "Fax only. Page count in a fax message"
                    },
                    "faxResolution": {
                        "type": "string",
                        "description": "Fax only. Resolution of a fax message. 'High' for black and white image scanned at 200 dpi, 'Low' for black and white image scanned at 100 dpi",
                        "enum": [
                            "High",
                            "Low"
                        ]
                    },
                    "from": {
                        "$ref": "#/components/schemas/MessageStoreCallerInfoResponse"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The datetime when the message was modified on server in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "messageStatus": {
                        "type": "string",
                        "description": "Message status. Different message types may have different allowed status values.For outbound faxes the aggregated message status is returned: If status for at least one recipient is 'Queued', then 'Queued' value is returned If status for at least one recipient is 'SendingFailed', then 'SendingFailed' value is returned In other cases Sent status is returned",
                        "enum": [
                            "Queued",
                            "Sent",
                            "Delivered",
                            "DeliveryFailed",
                            "SendingFailed",
                            "Received"
                        ]
                    },
                    "pgToDepartment": {
                        "type": "boolean",
                        "description": "'Pager' only. 'True' if at least one of the message recipients is 'Department' extension"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Message priority",
                        "enum": [
                            "Normal",
                            "High"
                        ]
                    },
                    "readStatus": {
                        "type": "string",
                        "description": "Message read status",
                        "enum": [
                            "Read",
                            "Unread"
                        ]
                    },
                    "smsDeliveryTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "SMS only. The datetime when outbound SMS was delivered to recipient's handset in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. It is filled only if the carrier sends a delivery receipt to RingCentral"
                    },
                    "smsSendingAttemptsCount": {
                        "type": "integer",
                        "description": "SMS only. Number of attempts made to send an outbound SMS to the gateway (if gateway is temporary unavailable)"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Message subject. For SMS and Pager messages it replicates message text which is also returned as an attachment"
                    },
                    "to": {
                        "type": "array",
                        "description": "Recipient information",
                        "items": {
                            "$ref": "#/components/schemas/MessageStoreCallerInfoResponse"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "Message type",
                        "enum": [
                            "Fax",
                            "SMS",
                            "VoiceMail",
                            "Pager",
                            "Text"
                        ]
                    },
                    "vmTranscriptionStatus": {
                        "type": "string",
                        "description": "Voicemail only. Status of voicemail to text transcription. If VoicemailToText feature is not activated for account, the 'NotAvailable' value is returned",
                        "enum": [
                            "NotAvailable",
                            "InProgress",
                            "TimedOut",
                            "Completed",
                            "CompletedPartially",
                            "Failed"
                        ]
                    }
                }
            },
            "ListFaxCoverPagesResponse": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FaxCoverPageInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/MessagingNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/MessagingPagingInfo"
                    }
                }
            },
            "InboundMessageEvent": {
                "type": "object",
                "properties": {
                    "aps": {
                        "$ref": "#/components/schemas/NotificationInfo"
                    },
                    "messageId": {
                        "type": "string",
                        "description": "Internal identifier of a message"
                    },
                    "conversationId": {
                        "type": "string",
                        "description": "Internal identifier of an conversation"
                    },
                    "from": {
                        "type": "string",
                        "description": "Sender phone number. For GCM transport type '_from' property should be used"
                    },
                    "to": {
                        "type": "string",
                        "description": "Receiver phone number"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    }
                }
            },
            "ConversationInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a conversation"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Deprecated. Link to a conversation resource"
                    }
                }
            },
            "MessagingPagingInfo": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result is empty (because non-existent page was specified or perPage=0 was requested)"
                    },
                    "perPage": {
                        "type": "integer",
                        "description": "Current page size, describes how many items are in each page. Default value is 100. Maximum value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000) is applied"
                    },
                    "pageStart": {
                        "type": "integer",
                        "description": "The zero-based number of the first element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "pageEnd": {
                        "type": "integer",
                        "description": "The zero-based index of the last element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "totalPages": {
                        "type": "integer",
                        "description": "The total number of pages in a dataset. May be omitted for some resources due to performance reasons"
                    },
                    "totalElements": {
                        "type": "integer",
                        "description": "The total number of elements in a dataset. May be omitted for some resource due to performance reasons"
                    }
                }
            },
            "GetMessageInfoMultiResponse": {
                "type": "object",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "Internal identifier of a resource"
                    },
                    "status": {
                        "type": "integer",
                        "description": "Status code of resource retrieval"
                    },
                    "body": {
                        "$ref": "#/components/schemas/MessageBody"
                    }
                }
            },
            "PagerCallerInfoRequest": {
                "type": "object",
                "required": [
                    "extensionId"
                ],
                "properties": {
                    "extensionId": {
                        "type": "string",
                        "description": "Extension identifier",
                        "example": "123456789"
                    }
                }
            },
            "MessageAttachmentInfoIntId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Internal identifier of a message attachment"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a message attachment"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of message attachment",
                        "enum": [
                            "AudioRecording",
                            "AudioTranscription",
                            "Text",
                            "SourceDocument",
                            "RenderedDocument",
                            "MmsAttachment"
                        ]
                    },
                    "contentType": {
                        "type": "string",
                        "description": "MIME type for a given attachment, for instance 'audio/wav'"
                    },
                    "vmDuration": {
                        "type": "integer",
                        "description": "Voicemail only Duration of the voicemail in seconds"
                    },
                    "filename": {
                        "type": "string",
                        "description": "Name of a file attached"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size of attachment in bytes"
                    }
                }
            },
            "MessageAttachmentInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a message attachment"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a message attachment"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of message attachment",
                        "enum": [
                            "AudioRecording",
                            "AudioTranscription",
                            "Text",
                            "SourceDocument",
                            "RenderedDocument",
                            "MmsAttachment"
                        ]
                    },
                    "contentType": {
                        "type": "string",
                        "description": "MIME type for a given attachment, for instance 'audio/wav'"
                    },
                    "vmDuration": {
                        "type": "integer",
                        "description": "Supported for `Voicemail` only. Duration of a voicemail in seconds"
                    },
                    "filename": {
                        "type": "string",
                        "description": "Name of a file attached"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size of attachment in bytes"
                    }
                }
            },
            "FaxCoverPageInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Internal identifier of a fax cover page. The possible value range is 0-13 (for language setting en-US) and 0, 15-28 (for all other languages)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a fax cover page pattern"
                    }
                }
            },
            "NotificationInfo": {
                "type": "object",
                "properties": {
                    "alert": {
                        "$ref": "#/components/schemas/AlertInfo"
                    },
                    "badge": {
                        "type": "string",
                        "description": "Number of incoming messages"
                    },
                    "sound": {
                        "type": "string",
                        "description": "Message sound"
                    },
                    "content-available": {
                        "type": "string",
                        "description": "Content availability"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of a message"
                    }
                }
            },
            "SyncInfoMessages": {
                "type": "object",
                "properties": {
                    "syncType": {
                        "type": "string",
                        "description": "Type of synchronization",
                        "enum": [
                            "FSync",
                            "ISync"
                        ]
                    },
                    "syncToken": {
                        "type": "string",
                        "description": "Synchronization token"
                    },
                    "syncTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Last synchronization datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    }
                }
            },
            "MessageStoreCallerInfoRequest": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number in E.164 format"
                    }
                }
            },
            "MessageStoreCallerInfoResponse": {
                "type": "object",
                "required": [
                    "extensionNumber"
                ],
                "properties": {
                    "extensionNumber": {
                        "type": "string",
                        "description": "Extension short number (usually 3 or 4 digits). This property is filled when parties communicate by means of short internal numbers, for example when calling to other extension or sending/receiving Company Pager message"
                    },
                    "location": {
                        "type": "string",
                        "description": "Contains party location (city, state) if one can be determined from phoneNumber. This property is filled only when phoneNumber is not empty and server can calculate location information from it (for example, this information is unavailable for US toll-free numbers)"
                    },
                    "messageStatus": {
                        "type": "string",
                        "description": "Status of a message. Returned for outbound fax messages only",
                        "enum": [
                            "Queued",
                            "Sent",
                            "Delivered",
                            "DeliveryFailed",
                            "SendingFailed",
                            "Received"
                        ]
                    },
                    "faxErrorCode": {
                        "type": "string",
                        "description": "Fax only. Error code returned in case of fax sending failure. Returned if messageStatus value is 'SendingFailed'",
                        "enum": [
                            "InternationalCallingDisabled",
                            "DestinationCountryDisabled",
                            "NoAnswer",
                            "LineBusy",
                            "CallerHungUp",
                            "UnknownCountryCode",
                            "InvalidNumber",
                            "NotAccepted",
                            "CallDeclined",
                            "TooManyCallsPerLine",
                            "NotEnoughCredits",
                            "SentPartially",
                            "CallFailed"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Symbolic name associated with a party. If the phone does not belong to the known extension, only the location is returned, the name is not determined then"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number of a party. Usually it is a plain number including country and area code like 18661234567. But sometimes it could be returned from database with some formatting applied, for example (866)123-4567. This property is filled in all cases where parties communicate by means of global phone numbers, for example when calling to direct numbers or sending/receiving SMS"
                    }
                }
            },
            "CallerInfoFrom": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    }
                }
            },
            "MessagingNavigationInfo": {
                "type": "object",
                "properties": {
                    "firstPage": {
                        "$ref": "#/components/schemas/MessagingNavigationInfoURI"
                    },
                    "nextPage": {
                        "$ref": "#/components/schemas/MessagingNavigationInfoURI"
                    },
                    "previousPage": {
                        "$ref": "#/components/schemas/MessagingNavigationInfoURI"
                    },
                    "lastPage": {
                        "$ref": "#/components/schemas/MessagingNavigationInfoURI"
                    }
                }
            },
            "CallerInfoTo": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "messageStatus": {
                        "type": "string",
                        "enum": [
                            "Sent",
                            "SendingFailed",
                            "Queued"
                        ]
                    },
                    "faxErrorCode": {
                        "type": "string",
                        "enum": [
                            "Undefined",
                            "NoFaxSendPermission",
                            "NoInternationalPermission",
                            "NoFaxMachine",
                            "OutgoingCallError",
                            "RenderingFailed",
                            "TooManyPages",
                            "ReturnToDBQueue",
                            "NoCallTime",
                            "WrongNumber",
                            "ProhibitedNumber",
                            "InternalError",
                            "FaxSendingProhibited",
                            "ThePhoneIsBlacklisted",
                            "UserNotFound",
                            "ConvertError",
                            "DBGeneralError",
                            "SkypeBillingFailed",
                            "AccountSuspended",
                            "ProhibitedDestination",
                            "InternationalDisabled"
                        ]
                    }
                }
            },
            "InstantMessageEventBody": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a message"
                    },
                    "to": {
                        "type": "array",
                        "description": "Message receiver(s) information",
                        "items": {
                            "$ref": "#/components/schemas/NotificationRecipientInfo"
                        }
                    },
                    "from": {
                        "$ref": "#/components/schemas/SenderInfo"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of a message. The default value is 'SMS'"
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Message creation datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Datetime when the message was modified in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "readStatus": {
                        "type": "string",
                        "description": "Status of a message",
                        "default": "Unread"
                    },
                    "priority": {
                        "type": "string",
                        "default": "Normal"
                    },
                    "attachments": {
                        "description": "Message attachment data",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageAttachmentInfo"
                        }
                    },
                    "direction": {
                        "type": "string",
                        "description": "Message direction",
                        "default": "Inbound"
                    },
                    "availability": {
                        "type": "string",
                        "description": "Message availability status",
                        "default": "Alive"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Message subject. It replicates message text which is also returned as an attachment"
                    },
                    "messageStatus": {
                        "type": "string",
                        "description": "Status of a message",
                        "default": "Received"
                    },
                    "conversationId": {
                        "type": "string",
                        "description": "Deprecated. Identifier of a conversation the message belongs to"
                    },
                    "conversation": {
                        "$ref": "#/components/schemas/ConversationInfo"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    }
                }
            },
            "MessageEventBody": {
                "type": "object",
                "properties": {
                    "extensionId": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Datetime when the message was last modified in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "changes": {
                        "type": "array",
                        "description": "Message Changes",
                        "items": {
                            "$ref": "#/components/schemas/MessageChanges"
                        }
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    }
                }
            },
            "VoicemailMessageEventBody": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a message"
                    },
                    "to": {
                        "description": "Message receiver(s) information",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationRecipientInfo"
                        }
                    },
                    "from": {
                        "$ref": "#/components/schemas/SenderInfo"
                    },
                    "type": {
                        "description": "Type of a message",
                        "type": "string",
                        "enum": [
                            "Voicemail"
                        ]
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Message creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2019-03-10T18:07:52.534Z*"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Datetime when the message was modified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2019-03-10T18:07:52.534Z*"
                    },
                    "readStatus": {
                        "type": "string",
                        "description": "Status of a message",
                        "default": "Unread"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Message priority",
                        "default": "Normal"
                    },
                    "attachments": {
                        "type": "array",
                        "description": "Message attachment data",
                        "items": {
                            "$ref": "#/components/schemas/MessageAttachmentInfo"
                        }
                    },
                    "direction": {
                        "type": "string",
                        "description": "Message direction",
                        "enum": [
                            "Inbound",
                            "Outbound"
                        ],
                        "default": "Inbound"
                    },
                    "availability": {
                        "type": "string",
                        "description": "Message availability status",
                        "default": "Alive"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Message subject. It replicates message text which is also returned as an attachment"
                    },
                    "messageStatus": {
                        "type": "string",
                        "description": "Status of a message",
                        "default": "Received"
                    },
                    "conversationId": {
                        "type": "string",
                        "description": "Internal identifier of a conversation this message belongs to"
                    },
                    "vmTranscriptionStatus": {
                        "type": "string",
                        "description": "Specifies if a voicemail message transcription is already completed or not"
                    }
                }
            },
            "SenderInfo": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number in E.164 (with '+' sign) format"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Extension number"
                    },
                    "location": {
                        "type": "string",
                        "description": "Contains party location (city, state) if one can be determined from phoneNumber. This property is filled only when phoneNumber is not empty and server can calculate location information from it (for example, this information is unavailable for US toll-free numbers)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Symbolic name associated with a caller/callee. If the phone does not belong to the known extension, only the location is returned, the name is not determined then"
                    }
                }
            },
            "MessageChanges": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Message type",
                        "enum": [
                            "Voicemail",
                            "SMS",
                            "Fax",
                            "Pager"
                        ]
                    },
                    "newCount": {
                        "type": "integer",
                        "description": "The number of new messages. Can be omitted if the value is zero"
                    },
                    "updatedCount": {
                        "type": "integer",
                        "description": "The number of updated messages. Can be omitted if the value is zero"
                    }
                }
            },
            "MessageBody": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a message"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a message"
                    },
                    "attachments": {
                        "type": "array",
                        "description": "The list of message attachments",
                        "items": {
                            "$ref": "#/components/schemas/MessageAttachmentInfo"
                        }
                    },
                    "availability": {
                        "type": "string",
                        "description": "Message availability status. Message in 'Deleted' state is still preserved with all its attachments and can be restored. 'Purged' means that all attachments are already deleted and the message itself is about to be physically deleted shortly",
                        "enum": [
                            "Alive",
                            "Deleted",
                            "Purged"
                        ]
                    },
                    "conversationId": {
                        "type": "integer",
                        "description": "SMS and Pager only. Identifier of a conversation the message belongs to"
                    },
                    "conversation": {
                        "$ref": "#/components/schemas/ConversationInfo"
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Message creation datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "deliveryErrorCode": {
                        "type": "string",
                        "description": "SMS only. Delivery error code returned by gateway"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Message direction. Note that for some message types not all directions are allowed. For example voicemail messages can be only inbound",
                        "enum": [
                            "Inbound",
                            "Outbound"
                        ]
                    },
                    "faxPageCount": {
                        "type": "integer",
                        "description": "Fax only. Page count in a fax message"
                    },
                    "faxResolution": {
                        "type": "string",
                        "description": "Fax only. Resolution of a fax message. 'High' for black and white image scanned at 200 dpi, 'Low' for black and white image scanned at 100 dpi",
                        "enum": [
                            "High",
                            "Low"
                        ]
                    },
                    "from": {
                        "$ref": "#/components/schemas/MessageSenderInfo"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The datetime when the message was modified on server in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "messageStatus": {
                        "type": "string",
                        "description": "Message status. Different message types may have different allowed status values.For outbound faxes the aggregated message status is returned: If status for at least one recipient is 'Queued', then 'Queued' value is returned If status for at least one recipient is 'SendingFailed', then 'SendingFailed' value is returned In other cases Sent status is returned",
                        "enum": [
                            "Queued",
                            "Sent",
                            "Delivered",
                            "DeliveryFailed",
                            "SendingFailed",
                            "Received"
                        ]
                    },
                    "pgToDepartment": {
                        "type": "boolean",
                        "description": "'Pager' only. 'True' if at least one of the message recipients is 'Department' extension"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Message priority",
                        "enum": [
                            "Normal",
                            "High"
                        ]
                    },
                    "readStatus": {
                        "type": "string",
                        "description": "Message read status",
                        "enum": [
                            "Read",
                            "Unread"
                        ]
                    },
                    "smsDeliveryTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "SMS only. The datetime when outbound SMS was delivered to recipient's handset in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. It is filled only if the carrier sends a delivery receipt to RingCentral"
                    },
                    "smsSendingAttemptsCount": {
                        "type": "integer",
                        "description": "SMS only. Number of attempts made to send an outbound SMS to the gateway (if gateway is temporary unavailable)"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Message subject. For SMS and Pager messages it replicates message text which is also returned as an attachment"
                    },
                    "to": {
                        "type": "array",
                        "description": "Recipient information",
                        "items": {
                            "$ref": "#/components/schemas/MessageRecipientInfo"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "Message type",
                        "enum": [
                            "Fax",
                            "SMS",
                            "VoiceMail",
                            "Pager",
                            "Text"
                        ]
                    },
                    "vmTranscriptionStatus": {
                        "type": "string",
                        "description": "Voicemail only. Status of voicemail to text transcription. If VoicemailToText feature is not activated for account, the 'NotAvailable' value is returned",
                        "enum": [
                            "NotAvailable",
                            "InProgress",
                            "TimedOut",
                            "Completed",
                            "CompletedPartially",
                            "Failed"
                        ]
                    }
                }
            },
            "AlertInfo": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Title of a message"
                    },
                    "body": {
                        "type": "string",
                        "description": "Message Description"
                    }
                }
            },
            "MessagingNavigationInfoURI": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string"
                    }
                }
            },
            "NotificationRecipientInfo": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number in E.164 (with '+' sign) format"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Extension number"
                    },
                    "target": {
                        "type": "boolean",
                        "description": "'True' specifies that message is sent exactly to this recipient. Returned in to field for group MMS. Useful if one extension has several phone numbers"
                    },
                    "location": {
                        "type": "string",
                        "description": "Contains party location (city, state) if one can be determined from phoneNumber. This property is filled only when phoneNumber is not empty and server can calculate location information from it (for example, this information is unavailable for US toll-free numbers)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Symbolic name associated with a caller/callee. If the phone does not belong to the known extension, only the location is returned, the name is not determined then"
                    }
                }
            },
            "MessageSenderInfo": {
                "type": "object",
                "properties": {
                    "extensionNumber": {
                        "type": "string"
                    },
                    "extensionId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "MessageRecipientInfo": {
                "type": "object",
                "properties": {
                    "extensionNumber": {
                        "type": "string"
                    },
                    "extensionId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "GetRingOutStatusResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a RingOut call"
                    },
                    "uri": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/RingOutStatusInfo"
                    }
                }
            },
            "MakeRingOutRequest": {
                "type": "object",
                "required": [
                    "from",
                    "to"
                ],
                "properties": {
                    "from": {
                        "$ref": "#/components/schemas/MakeRingOutCallerInfoRequestFrom"
                    },
                    "to": {
                        "$ref": "#/components/schemas/MakeRingOutCallerInfoRequestTo"
                    },
                    "callerId": {
                        "$ref": "#/components/schemas/MakeRingOutCallerInfoRequestTo"
                    },
                    "playPrompt": {
                        "type": "boolean",
                        "description": "The audio prompt that the calling party hears when the call is connected"
                    },
                    "country": {
                        "$ref": "#/components/schemas/MakeRingOutCoutryInfo"
                    }
                }
            },
            "GetRingOutStatusResponseIntId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Internal identifier of a RingOut call"
                    },
                    "uri": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/RingOutStatusInfo"
                    }
                }
            },
            "RingOutStatusInfo": {
                "type": "object",
                "properties": {
                    "callStatus": {
                        "type": "string",
                        "description": "Status of a call",
                        "enum": [
                            "Invalid",
                            "Success",
                            "InProgress",
                            "Busy",
                            "NoAnswer",
                            "Rejected",
                            "GenericError",
                            "Finished",
                            "InternationalDisabled",
                            "DestinationBlocked",
                            "NotEnoughFunds",
                            "NoSuchUser"
                        ]
                    },
                    "callerStatus": {
                        "type": "string",
                        "description": "Status of a calling party",
                        "enum": [
                            "Invalid",
                            "Success",
                            "InProgress",
                            "Busy",
                            "NoAnswer",
                            "Rejected",
                            "GenericError",
                            "Finished",
                            "InternationalDisabled",
                            "DestinationBlocked",
                            "NotEnoughFunds",
                            "NoSuchUser"
                        ]
                    },
                    "calleeStatus": {
                        "type": "string",
                        "description": "Status of a called party",
                        "enum": [
                            "Invalid",
                            "Success",
                            "InProgress",
                            "Busy",
                            "NoAnswer",
                            "Rejected",
                            "GenericError",
                            "Finished",
                            "InternationalDisabled",
                            "DestinationBlocked",
                            "NotEnoughFunds",
                            "NoSuchUser"
                        ]
                    }
                }
            },
            "MakeRingOutCallerInfoRequestFrom": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number in E.164 format"
                    },
                    "forwardingNumberId": {
                        "type": "string",
                        "description": "Internal identifier of a forwarding number; returned in response as an 'id' field value. Can be specified instead of the phoneNumber attribute"
                    }
                }
            },
            "MakeRingOutCallerInfoRequestTo": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number in E.164 format"
                    }
                }
            },
            "MakeRingOutCoutryInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Dialing plan country identifier"
                    }
                }
            },
            "ContactList": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of personal contacts from the extension address book",
                        "items": {
                            "$ref": "#/components/schemas/PersonalContactResource"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/UserContactsNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/UserContactsPagingInfo"
                    }
                }
            },
            "AddressBookSync": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PersonalContactResource"
                        }
                    },
                    "syncInfo": {
                        "$ref": "#/components/schemas/SyncInfo"
                    },
                    "nextPageId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "nextPageUri": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "FavoriteCollection": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FavoriteContactResource"
                        }
                    }
                }
            },
            "FavoriteContactList": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FavoriteContactResource"
                        }
                    }
                }
            },
            "ExtensionFavoritesEvent": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Universally unique identifier of a notification"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event filter URI"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Datetime of sending a notification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "body": {
                        "$ref": "#/components/schemas/ExtensionFavoritesEventBody"
                    }
                }
            },
            "PersonalContactRequest": {
                "type": "object",
                "properties": {
                    "firstName": {
                        "type": "string",
                        "description": "First name of the contact",
                        "example": "Charlie"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the contact",
                        "example": "Williams"
                    },
                    "middleName": {
                        "type": "string",
                        "description": "Middle name of the contact",
                        "example": "J"
                    },
                    "nickName": {
                        "type": "string",
                        "description": "Nick name of the contact",
                        "example": "The Boss"
                    },
                    "company": {
                        "type": "string",
                        "description": "Company name of the contact",
                        "example": "Example, Inc."
                    },
                    "jobTitle": {
                        "type": "string",
                        "description": "Job title of the contact",
                        "example": "CEO"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of the contact",
                        "example": "charlie.williams@example.com"
                    },
                    "email2": {
                        "type": "string",
                        "description": "2nd email of the contact",
                        "example": "charlie-example@gmail.com"
                    },
                    "email3": {
                        "type": "string",
                        "description": "3rd email of the contact",
                        "example": "theboss-example@hotmail.com"
                    },
                    "birthday": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of birth of the contact"
                    },
                    "webPage": {
                        "type": "string",
                        "description": "The contact home page URL",
                        "example": "http://www.example.com"
                    },
                    "notes": {
                        "type": "string",
                        "description": "Notes for the contact",
                        "example": "#1 Customer"
                    },
                    "homePhone": {
                        "type": "string",
                        "description": "Home phone number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "homePhone2": {
                        "type": "string",
                        "description": "2nd home phone number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "businessPhone": {
                        "type": "string",
                        "description": "Business phone of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "businessPhone2": {
                        "type": "string",
                        "description": "2nd business phone of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "mobilePhone": {
                        "type": "string",
                        "description": "Mobile phone of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "businessFax": {
                        "type": "string",
                        "description": "Business fax number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "companyPhone": {
                        "type": "string",
                        "description": "Company number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "assistantPhone": {
                        "type": "string",
                        "description": "Phone number of the contact assistant in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "carPhone": {
                        "type": "string",
                        "description": "Car phone number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "otherPhone": {
                        "type": "string",
                        "description": "Other phone number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "otherFax": {
                        "type": "string",
                        "description": "Other fax number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "callbackPhone": {
                        "type": "string",
                        "description": "Callback phone number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "homeAddress": {
                        "$ref": "#/components/schemas/ContactAddressInfo"
                    },
                    "businessAddress": {
                        "$ref": "#/components/schemas/ContactAddressInfo"
                    },
                    "otherAddress": {
                        "$ref": "#/components/schemas/ContactAddressInfo"
                    }
                }
            },
            "PersonalContactResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of the contact",
                        "example": "https://platform.ringcentral.com/restapi/v1.0/account/230919004/extension/230919004/address-book/contact/623045004"
                    },
                    "availability": {
                        "type": "string",
                        "description": "This property has a special meaning only on Address Book Sync (e.g. a contact can be `Deleted`). For simple contact list reading it has always the default value - `Alive`",
                        "enum": [
                            "Alive",
                            "Deleted",
                            "Purged"
                        ]
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of the contact",
                        "example": "charlie.williams@example.com"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Internal identifier of the contact",
                        "example": 623045004
                    },
                    "notes": {
                        "type": "string",
                        "description": "Notes for the contact",
                        "example": "#1 Customer"
                    },
                    "company": {
                        "type": "string",
                        "description": "Company name of the contact",
                        "example": "Example, Inc."
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of the contact",
                        "example": "Charlie"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the contact",
                        "example": "Williams"
                    },
                    "jobTitle": {
                        "type": "string",
                        "description": "Job title of the contact",
                        "example": "CEO"
                    },
                    "birthday": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of birth of the contact"
                    },
                    "webPage": {
                        "type": "string",
                        "description": "The contact home page URL",
                        "example": "http://www.example.com"
                    },
                    "middleName": {
                        "type": "string",
                        "description": "Middle name of the contact",
                        "example": "J"
                    },
                    "nickName": {
                        "type": "string",
                        "description": "Nick name of the contact",
                        "example": "The Boss"
                    },
                    "email2": {
                        "type": "string",
                        "description": "2nd email of the contact",
                        "example": "charlie-example@gmail.com"
                    },
                    "email3": {
                        "type": "string",
                        "description": "3rd email of the contact",
                        "example": "theboss-example@hotmail.com"
                    },
                    "homePhone": {
                        "type": "string",
                        "description": "Home phone number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "homePhone2": {
                        "type": "string",
                        "description": "2nd home phone number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "businessPhone": {
                        "type": "string",
                        "description": "Business phone of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "businessPhone2": {
                        "type": "string",
                        "description": "2nd business phone of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "mobilePhone": {
                        "type": "string",
                        "description": "Mobile phone of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "businessFax": {
                        "type": "string",
                        "description": "Business fax number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "companyPhone": {
                        "type": "string",
                        "description": "Company number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "assistantPhone": {
                        "type": "string",
                        "description": "Phone number of the contact assistant in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "carPhone": {
                        "type": "string",
                        "description": "Car phone number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "otherPhone": {
                        "type": "string",
                        "description": "Other phone number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "otherFax": {
                        "type": "string",
                        "description": "Other fax number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "callbackPhone": {
                        "type": "string",
                        "description": "Callback phone number of the contact in e.164 (with \"+\") format",
                        "example": "+15551234567"
                    },
                    "businessAddress": {
                        "$ref": "#/components/schemas/ContactAddressInfo"
                    },
                    "homeAddress": {
                        "$ref": "#/components/schemas/ContactAddressInfo"
                    },
                    "otherAddress": {
                        "$ref": "#/components/schemas/ContactAddressInfo"
                    }
                }
            },
            "SyncInfo": {
                "type": "object",
                "properties": {
                    "syncType": {
                        "type": "string",
                        "enum": [
                            "FSync",
                            "ISync"
                        ]
                    },
                    "syncToken": {
                        "type": "string"
                    },
                    "syncTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "olderRecordsExist": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "FavoriteContactResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "extensionId": {
                        "type": "string"
                    },
                    "contactId": {
                        "type": "string"
                    }
                }
            },
            "ExtensionFavoritesEventBody": {
                "type": "object",
                "properties": {
                    "extensionId": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    }
                }
            },
            "ContactAddressInfo": {
                "type": "object",
                "properties": {
                    "street": {
                        "type": "string",
                        "description": "Street address",
                        "example": "20 Davis Dr."
                    },
                    "city": {
                        "type": "string",
                        "description": "City name",
                        "example": "Belmont"
                    },
                    "state": {
                        "type": "string",
                        "description": "State/province name",
                        "example": "CA"
                    },
                    "zip": {
                        "type": "string",
                        "description": "Zip/Postal code",
                        "example": "94002"
                    }
                }
            },
            "UserContactsNavigationInfo": {
                "type": "object",
                "properties": {
                    "firstPage": {
                        "$ref": "#/components/schemas/UserContactsNavigationInfoUri"
                    },
                    "nextPage": {
                        "$ref": "#/components/schemas/UserContactsNavigationInfoUri"
                    },
                    "previousPage": {
                        "$ref": "#/components/schemas/UserContactsNavigationInfoUri"
                    },
                    "lastPage": {
                        "$ref": "#/components/schemas/UserContactsNavigationInfoUri"
                    }
                }
            },
            "UserContactsPagingInfo": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result is empty (because non-existent page was specified or perPage=0 was requested)"
                    },
                    "perPage": {
                        "type": "integer",
                        "description": "Current page size, describes how many items are in each page. Default value is 100. Maximum value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000) is applied"
                    },
                    "pageStart": {
                        "type": "integer",
                        "description": "The zero-based number of the first element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "pageEnd": {
                        "type": "integer",
                        "description": "The zero-based index of the last element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "totalPages": {
                        "type": "integer",
                        "description": "The total number of pages in a dataset. May be omitted for some resources due to performance reasons"
                    },
                    "totalElements": {
                        "type": "integer",
                        "description": "The total number of elements in a dataset. May be omitted for some resource due to performance reasons"
                    }
                }
            },
            "UserContactsNavigationInfoUri": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string"
                    }
                }
            },
            "ErrorResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "description": "Collection of all gathered errors",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                },
                "description": "Format of response in case that any error occured during request processing"
            },
            "SearchDirectoryEntriesRequest": {
                "type": "object",
                "properties": {
                    "searchString": {
                        "type": "string",
                        "description": "String value to filter the contacts. The value specified is searched through the following fields: `firstName`, `lastName`, `extensionNumber`, `phoneNumber`, `email`"
                    },
                    "showFederated": {
                        "description": "If 'True' then contacts of all accounts in federation are returned. If 'False' then only contacts of the current account are returned, and account section is eliminated in this case",
                        "default": true,
                        "type": "boolean"
                    },
                    "extensionType": {
                        "type": "string",
                        "description": "Type of extension to filter the contacts",
                        "enum": [
                            "User",
                            "Department",
                            "Announcement",
                            "Voicemail",
                            "SharedLinesGroup",
                            "PagingOnly",
                            "ParkLocation",
                            "IvrMenu",
                            "Limited",
                            "ApplicationExtension",
                            "Site",
                            "Bot"
                        ]
                    },
                    "orderBy": {
                        "type": "array",
                        "description": "Sorting settings",
                        "items": {
                            "$ref": "#/components/schemas/OrderBy"
                        }
                    },
                    "page": {
                        "type": "integer"
                    },
                    "perPage": {
                        "type": "integer"
                    }
                }
            },
            "DirectoryResource": {
                "type": "object",
                "properties": {
                    "paging": {
                        "$ref": "#/components/schemas/CompanyContactsPagingInfo"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContactResource"
                        }
                    }
                }
            },
            "ContactResource": {
                "type": "object",
                "properties": {
                    "account": {
                        "$ref": "#/components/schemas/AccountResource"
                    },
                    "department": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "extensionNumber": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of a contact, for user extensions only"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of a contact, for user extensions only"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a contact, for non-user extensions"
                    },
                    "id": {
                        "type": "string"
                    },
                    "jobTitle": {
                        "type": "string"
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhoneNumberResource"
                        }
                    },
                    "profileImage": {
                        "$ref": "#/components/schemas/AccountDirectoryProfileImageResource"
                    },
                    "site": {
                        "$ref": "#/components/schemas/BusinessSiteResource"
                    },
                    "status": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "FederationResource": {
                "type": "object",
                "properties": {
                    "accounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FederatedAccountResource"
                        }
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "lastModifiedTime": {
                        "type": "string"
                    }
                }
            },
            "CompanyContactsPagingInfo": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "perPage": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalElements": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pageStart": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pageEnd": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "AccountResource": {
                "type": "object",
                "properties": {
                    "companyName": {
                        "type": "string"
                    },
                    "federatedName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "mainNumber": {
                        "$ref": "#/components/schemas/PhoneNumberResource"
                    }
                }
            },
            "PhoneNumberResource": {
                "type": "object",
                "properties": {
                    "formattedPhoneNumber": {
                        "type": "string"
                    },
                    "phoneNumber": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string",
                        "description": "Custom user name of a phone number, if any"
                    },
                    "usageType": {
                        "type": "string",
                        "enum": [
                            "MobileNumber",
                            "ContactNumber",
                            "DirectNumber",
                            "ForwardedNumber"
                        ],
                        "description": "Usage type of a phone number"
                    }
                }
            },
            "AccountDirectoryProfileImageResource": {
                "type": "object",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "uri": {
                        "type": "string"
                    }
                }
            },
            "BusinessSiteResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    }
                }
            },
            "FederatedAccountResource": {
                "type": "object",
                "properties": {
                    "companyName": {
                        "type": "string"
                    },
                    "conflictCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "federatedName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "linkCreationTime": {
                        "type": "string"
                    },
                    "mainNumber": {
                        "$ref": "#/components/schemas/PhoneNumberResource"
                    }
                }
            },
            "Error": {
                "type": "object",
                "properties": {
                    "errorCode": {
                        "type": "string",
                        "description": "Code that characterizes this error. Code uniqly identifies the source of the error.",
                        "readOnly": true,
                        "enum": [
                            "ErrorCode{code='ADG-000', httpStatus=503, description='Service temporary unavailable.'}",
                            "ErrorCode{code='ADG-010', httpStatus=503, description='Federation data temporary unavailable.'}",
                            "ErrorCode{code='ADG-001', httpStatus=500, description='Service internal error.'}",
                            "ErrorCode{code='ADG-100', httpStatus=403, description='Insufficient permissions.'}",
                            "ErrorCode{code='ADG-101', httpStatus=403, description='Unauthorized access.'}",
                            "ErrorCode{code='ADG-102', httpStatus=405, description='Method not allowed.'}",
                            "ErrorCode{code='ADG-111', httpStatus=400, description='Need Content-Type header.'}",
                            "ErrorCode{code='ADG-112', httpStatus=400, description='Request body is invalid.'}",
                            "ErrorCode{code='ADG-121', httpStatus=400, description='Parameter [${paramName}] is invalid. ${additionalInfo:-}'}",
                            "ErrorCode{code='ADG-115', httpStatus=415, description='Unsupported Media Type.'}",
                            "ErrorCode{code='ADG-105', httpStatus=404, description='Current account is not linked to any federation.'}",
                            "ErrorCode{code='ADG-107', httpStatus=404, description='Account not found.'}",
                            "ErrorCode{code='ADG-122', httpStatus=404, description='Contact not found.'}",
                            "ErrorCode{code=''ADG-200'', httpStatus=404, description=''Invalid URI''}"
                        ]
                    },
                    "message": {
                        "type": "string",
                        "description": "Message that describes the error. This message can be used in UI.",
                        "readOnly": true
                    }
                },
                "description": "Description of an error occurred during request processing. This data type can be used only in readonly mode, no writing is allowed"
            },
            "OrderBy": {
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "Sorting priority index, starting from '1'. Optional if only one element in `orderBy` array is specified"
                    },
                    "fieldName": {
                        "type": "string",
                        "description": "Field name by which to sort the contacts",
                        "enum": [
                            "firstName",
                            "lastName",
                            "extensionNumber",
                            "phoneNumber",
                            "email"
                        ]
                    },
                    "direction": {
                        "type": "string",
                        "description": "Sorting direction",
                        "enum": [
                            "Asc",
                            "Desc"
                        ]
                    }
                }
            },
            "GetPresenceInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a presence info resource"
                    },
                    "allowSeeMyPresence": {
                        "type": "boolean",
                        "description": "If 'True' enables other extensions to see the extension presence status"
                    },
                    "dndStatus": {
                        "type": "string",
                        "description": "Extended DnD (Do not Disturb) status. Cannot be set for Department/Announcement/Voicemail (Take Messages Only)/Fax User/Shared Lines Group/Paging Only Group/IVR Menu/Application Extension/Park Location extensions. The 'DoNotAcceptDepartmentCalls' and 'TakeDepartmentCallsOnly' values are applicable only for extensions - members of a Department; if these values are set for department outsiders, the 400 Bad Request error code is returned. The 'TakeDepartmentCallsOnly' status can be set through the old RingCentral user interface and is available for some migrated accounts only.",
                        "enum": [
                            "TakeAllCalls",
                            "DoNotAcceptAnyCalls",
                            "DoNotAcceptDepartmentCalls",
                            "TakeDepartmentCallsOnly"
                        ]
                    },
                    "extension": {
                        "$ref": "#/components/schemas/GetPresenceExtensionInfo"
                    },
                    "message": {
                        "type": "string",
                        "description": "Custom status message (as previously published by user)"
                    },
                    "pickUpCallsOnHold": {
                        "type": "boolean",
                        "description": "If 'True' enables the extension user to pick up a monitored line on hold"
                    },
                    "presenceStatus": {
                        "type": "string",
                        "description": "Aggregated presence status, calculated from a number of sources",
                        "enum": [
                            "Offline",
                            "Busy",
                            "Available"
                        ]
                    },
                    "ringOnMonitoredCall": {
                        "type": "boolean",
                        "description": "If 'True' enables to ring extension phone, if any user monitored by this extension is ringing"
                    },
                    "telephonyStatus": {
                        "type": "string",
                        "description": "Telephony presence status",
                        "enum": [
                            "NoCall",
                            "CallConnected",
                            "Ringing",
                            "OnHold",
                            "ParkedCall"
                        ]
                    },
                    "userStatus": {
                        "type": "string",
                        "description": "User-defined presence status (as previously published by the user)",
                        "enum": [
                            "Offline",
                            "Busy",
                            "Available"
                        ]
                    },
                    "meetingStatus": {
                        "type": "string",
                        "description": "RingCentral Meetings presence",
                        "enum": [
                            "Connected",
                            "Disconnected"
                        ]
                    },
                    "activeCalls": {
                        "type": "array",
                        "description": "Information on active calls",
                        "items": {
                            "$ref": "#/components/schemas/ActiveCallInfo"
                        }
                    }
                }
            },
            "ExtensionPresenceEvent": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Universally unique identifier of a notification"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event filter URI"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Datetime of sending a notification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "body": {
                        "$ref": "#/components/schemas/ExtensionPresenceEventBody"
                    }
                }
            },
            "IncomingCallEvent": {
                "type": "object",
                "properties": {
                    "aps": {
                        "$ref": "#/components/schemas/APSInfo"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event filter URI"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Universally unique identifier of a notification"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "The datetime of a call action in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example 2016-03-10T18:07:52.534Z",
                        "format": "date-time"
                    },
                    "extensionId": {
                        "type": "string",
                        "description": "Internal identifier of an extension",
                        "default": "~"
                    },
                    "action": {
                        "type": "string",
                        "description": "Calling action, for example 'StartRing'"
                    },
                    "sessionId": {
                        "type": "string",
                        "description": "Identifier of a call session"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "Identifier of a server"
                    },
                    "from": {
                        "type": "string",
                        "description": "Phone number of a caller. For GCM transport type '_from' property should be used"
                    },
                    "fromName": {
                        "type": "string",
                        "description": "Caller name"
                    },
                    "to": {
                        "type": "string",
                        "description": "Phone number of a callee"
                    },
                    "toName": {
                        "type": "string",
                        "description": "Callee name"
                    },
                    "sid": {
                        "type": "string",
                        "description": "Unique identifier of a session"
                    },
                    "toUrl": {
                        "type": "string",
                        "description": "SIP proxy registration name"
                    },
                    "srvLvl": {
                        "type": "string",
                        "description": "User data"
                    },
                    "srvLvlExt": {
                        "type": "string",
                        "description": "User data"
                    },
                    "recUrl": {
                        "type": "string",
                        "description": "File containing recorded caller name"
                    },
                    "pn_ttl": {
                        "type": "integer",
                        "description": "Notification lifetime value in seconds, the default value is 30 seconds"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    }
                }
            },
            "MissedCallEvent": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Universally unique identifier of a notification"
                    },
                    "pn_apns": {
                        "$ref": "#/components/schemas/APNSInfo"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event filter URI"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "The datetime of a call action in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example 2016-03-10T18:07:52.534Z",
                        "format": "date-time"
                    },
                    "extensionId": {
                        "type": "string",
                        "description": "Internal identifier of an extension",
                        "default": "~"
                    },
                    "action": {
                        "type": "string",
                        "description": "Calling action, for example 'StartRing'"
                    },
                    "sessionId": {
                        "type": "string",
                        "description": "Identifier of a call session"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "Identifier of a server"
                    },
                    "from": {
                        "type": "string",
                        "description": "Phone number of a caller. For GCM transport type '_from' property should be used"
                    },
                    "fromName": {
                        "type": "string",
                        "description": "Caller name"
                    },
                    "to": {
                        "type": "string",
                        "description": "Phone number of a callee"
                    },
                    "toName": {
                        "type": "string",
                        "description": "Callee name"
                    },
                    "sid": {
                        "type": "string",
                        "description": "Unique identifier of a session"
                    },
                    "toUrl": {
                        "type": "string",
                        "description": "SIP proxy registration name"
                    },
                    "srvLvl": {
                        "type": "string",
                        "description": "User data"
                    },
                    "srvLvlExt": {
                        "type": "string",
                        "description": "User data"
                    },
                    "recUrl": {
                        "type": "string",
                        "description": "File containing recorded caller name"
                    },
                    "pn_ttl": {
                        "type": "integer",
                        "description": "Notification lifetime value in seconds, the default value is 30 seconds"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    }
                }
            },
            "AccountPresenceInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of account presence resource"
                    },
                    "records": {
                        "type": "array",
                        "description": "List of Prompts",
                        "items": {
                            "$ref": "#/components/schemas/GetPresenceInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/PresenceNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/PresencePagingInfo"
                    }
                }
            },
            "DetailedExtensionPresenceEvent": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Universally unique identifier of a notification"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event filter URI"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Datetime of sending a notification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "body": {
                        "$ref": "#/components/schemas/DetailedExtensionPresenceEventBody"
                    }
                }
            },
            "DetailedExtensionPresenceWithSIPEvent": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Universally unique identifier of a notification"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event filter URI"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Datetime of sending a notification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "body": {
                        "$ref": "#/components/schemas/DetailedExtensionPresenceWithSIPEventBody"
                    }
                }
            },
            "PresenceInfoResource": {
                "type": "object",
                "properties": {
                    "userStatus": {
                        "type": "string",
                        "enum": [
                            "Offline",
                            "Busy",
                            "Available"
                        ]
                    },
                    "dndStatus": {
                        "type": "string",
                        "enum": [
                            "TakeAllCalls",
                            "DoNotAcceptDepartmentCalls",
                            "TakeDepartmentCallsOnly",
                            "DoNotAcceptAnyCalls",
                            "Unknown"
                        ]
                    },
                    "message": {
                        "type": "string",
                        "minLength": 0,
                        "maxLength": 75
                    },
                    "allowSeeMyPresence": {
                        "type": "boolean",
                        "default": false
                    },
                    "ringOnMonitoredCall": {
                        "type": "boolean",
                        "default": false
                    },
                    "pickUpCallsOnHold": {
                        "type": "boolean",
                        "default": false
                    },
                    "activeCalls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActiveCallInfo"
                        }
                    }
                }
            },
            "AccountPresenceEvent": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Universally unique identifier of a notification"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event filter URI"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Datetime of sending a notification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "body": {
                        "$ref": "#/components/schemas/AccountPresenceEventBody"
                    }
                }
            },
            "ActiveCallInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "direction": {
                        "type": "string",
                        "enum": [
                            "Inbound",
                            "Outbound"
                        ]
                    },
                    "from": {
                        "type": "string",
                        "description": "Phone number or extension number of a caller. For GCM transport type '_from' property should be used"
                    },
                    "fromName": {
                        "type": "string",
                        "description": "Name of a caller"
                    },
                    "to": {
                        "type": "string",
                        "description": "Phone number or extension number of a callee"
                    },
                    "toName": {
                        "type": "string",
                        "description": "Name of a callee"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Time when the call is actually started"
                    },
                    "telephonyStatus": {
                        "type": "string"
                    },
                    "sipData": {
                        "$ref": "#/components/schemas/DetailedCallInfo"
                    },
                    "sessionId": {
                        "type": "string"
                    },
                    "terminationType": {
                        "type": "string"
                    }
                }
            },
            "PresenceNavigationInfo": {
                "type": "object",
                "properties": {
                    "firstPage": {
                        "$ref": "#/components/schemas/PresenceNavigationInfoURI"
                    },
                    "nextPage": {
                        "$ref": "#/components/schemas/PresenceNavigationInfoURI"
                    },
                    "previousPage": {
                        "$ref": "#/components/schemas/PresenceNavigationInfoURI"
                    },
                    "lastPage": {
                        "$ref": "#/components/schemas/PresenceNavigationInfoURI"
                    }
                }
            },
            "PresencePagingInfo": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result is empty (because non-existent page was specified or perPage=0 was requested)"
                    },
                    "perPage": {
                        "type": "integer",
                        "description": "Current page size, describes how many items are in each page. Default value is 100. Maximum value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000) is applied"
                    },
                    "pageStart": {
                        "type": "integer",
                        "description": "The zero-based number of the first element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "pageEnd": {
                        "type": "integer",
                        "description": "The zero-based index of the last element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "totalPages": {
                        "type": "integer",
                        "description": "The total number of pages in a dataset. May be omitted for some resources due to performance reasons"
                    },
                    "totalElements": {
                        "type": "integer",
                        "description": "The total number of elements in a dataset. May be omitted for some resource due to performance reasons"
                    }
                }
            },
            "DetailedExtensionPresenceWithSIPEventBody": {
                "type": "object",
                "properties": {
                    "extensionId": {
                        "type": "string",
                        "description": "Internal identifier of an extension",
                        "default": "~"
                    },
                    "telephonyStatus": {
                        "type": "string",
                        "description": "Telephony presence status. Returned if telephony status is changed.",
                        "enum": [
                            "NoCall",
                            "CallConnected",
                            "Ringing",
                            "OnHold",
                            "ParkedCall"
                        ]
                    },
                    "activeCalls": {
                        "type": "array",
                        "description": "List of the latest 7 active calls on extension",
                        "items": {
                            "$ref": "#/components/schemas/ActiveCallInfo"
                        }
                    },
                    "sequence": {
                        "type": "integer",
                        "description": "Order number of a notification to state the chronology"
                    },
                    "presenceStatus": {
                        "type": "string",
                        "description": "Aggregated presence status, calculated from a number of sources",
                        "enum": [
                            "Offline",
                            "Busy",
                            "Available"
                        ]
                    },
                    "userStatus": {
                        "type": "string",
                        "description": "User-defined presence status (as previously published by the user)",
                        "enum": [
                            "Offline",
                            "Busy",
                            "Available"
                        ]
                    },
                    "dndStatus": {
                        "type": "string",
                        "description": "Extended DnD (Do not Disturb) status",
                        "enum": [
                            "TakeAllCalls",
                            "DoNotAcceptAnyCalls",
                            "DoNotAcceptDepartmentCalls",
                            "TakeDepartmentCallsOnly"
                        ]
                    },
                    "allowSeeMyPresence": {
                        "type": "boolean",
                        "description": "If 'True' enables other extensions to see the extension presence status"
                    },
                    "ringOnMonitoredCall": {
                        "type": "boolean",
                        "description": "If 'True' enables to ring extension phone, if any user monitored by this extension is ringing"
                    },
                    "pickUpCallsOnHold": {
                        "type": "boolean",
                        "description": "If 'True' enables the extension user to pick up a monitored line on hold"
                    },
                    "totalActiveCalls": {
                        "type": "integer",
                        "description": "Total number of active calls on extension at the present moment"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    }
                }
            },
            "GetPresenceExtensionInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of an extension"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Extension number (usually 3 or 4 digits)"
                    }
                }
            },
            "ExtensionPresenceEventBody": {
                "type": "object",
                "properties": {
                    "extensionId": {
                        "type": "string",
                        "description": "Internal identifier of an extension. Optional parameter",
                        "default": "~"
                    },
                    "telephonyStatus": {
                        "type": "string",
                        "description": "Telephony presence status. Returned if telephony status is changed.",
                        "enum": [
                            "NoCall",
                            "CallConnected",
                            "Ringing",
                            "OnHold",
                            "ParkedCall"
                        ]
                    },
                    "sequence": {
                        "type": "integer",
                        "description": "Order number of a notification to state the chronology"
                    },
                    "presenceStatus": {
                        "type": "string",
                        "description": "Aggregated presence status, calculated from a number of sources",
                        "enum": [
                            "Offline",
                            "Busy",
                            "Available"
                        ]
                    },
                    "userStatus": {
                        "type": "string",
                        "description": "User-defined presence status (as previously published by the user)",
                        "enum": [
                            "Offline",
                            "Busy",
                            "Available"
                        ]
                    },
                    "dndStatus": {
                        "type": "string",
                        "description": "Extended DnD (Do not Disturb) status",
                        "enum": [
                            "TakeAllCalls",
                            "DoNotAcceptAnyCalls",
                            "DoNotAcceptDepartmentCalls",
                            "TakeDepartmentCallsOnly"
                        ]
                    },
                    "allowSeeMyPresence": {
                        "type": "boolean",
                        "description": "If 'True' enables other extensions to see the extension presence status"
                    },
                    "ringOnMonitoredCall": {
                        "type": "boolean",
                        "description": "If 'True' enables to ring extension phone, if any user monitored by this extension is ringing"
                    },
                    "pickUpCallsOnHold": {
                        "type": "boolean",
                        "description": "If 'True' enables the extension user to pick up a monitored line on hold"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    }
                }
            },
            "APSInfo": {
                "type": "object",
                "properties": {
                    "content-available": {
                        "type": "integer",
                        "description": "If the value is '1' then notification is turned on even if the application is in background",
                        "default": 1
                    }
                }
            },
            "APNSInfo": {
                "type": "object",
                "properties": {
                    "aps": {
                        "$ref": "#/components/schemas/APSInfo"
                    }
                }
            },
            "DetailedExtensionPresenceEventBody": {
                "type": "object",
                "properties": {
                    "extensionId": {
                        "type": "string",
                        "description": "Internal identifier of an extension",
                        "default": "~"
                    },
                    "telephonyStatus": {
                        "type": "string",
                        "description": "Telephony presence status. Returned if telephony status is changed.",
                        "enum": [
                            "NoCall",
                            "CallConnected",
                            "Ringing",
                            "OnHold",
                            "ParkedCall"
                        ]
                    },
                    "activeCalls": {
                        "type": "array",
                        "description": "List of the latest 7 active calls on extension",
                        "items": {
                            "$ref": "#/components/schemas/ActiveCallInfoWithoutSIP"
                        }
                    },
                    "sequence": {
                        "type": "integer",
                        "description": "Order number of a notification to state the chronology"
                    },
                    "presenceStatus": {
                        "type": "string",
                        "description": "Aggregated presence status, calculated from a number of sources",
                        "enum": [
                            "Offline",
                            "Busy",
                            "Available"
                        ]
                    },
                    "userStatus": {
                        "type": "string",
                        "description": "User-defined presence status (as previously published by the user)",
                        "enum": [
                            "Offline",
                            "Busy",
                            "Available"
                        ]
                    },
                    "dndStatus": {
                        "type": "string",
                        "description": "Extended DnD (Do not Disturb) status",
                        "enum": [
                            "TakeAllCalls",
                            "DoNotAcceptAnyCalls",
                            "DoNotAcceptDepartmentCalls",
                            "TakeDepartmentCallsOnly"
                        ]
                    },
                    "allowSeeMyPresence": {
                        "type": "boolean",
                        "description": "If 'True' enables other extensions to see the extension presence status"
                    },
                    "ringOnMonitoredCall": {
                        "type": "boolean",
                        "description": "If 'True' enables to ring extension phone, if any user monitored by this extension is ringing"
                    },
                    "pickUpCallsOnHold": {
                        "type": "boolean",
                        "description": "If 'True' enables the extension user to pick up a monitored line on hold"
                    },
                    "totalActiveCalls": {
                        "type": "integer",
                        "description": "Total number of active calls on extension at the present moment"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    }
                }
            },
            "AccountPresenceEventBody": {
                "type": "object",
                "properties": {
                    "extensionId": {
                        "type": "string",
                        "description": "Internal identifier of an extension. Optional parameter",
                        "default": "~"
                    },
                    "telephonyStatus": {
                        "type": "string",
                        "description": "Telephony presence status. Returned if telephony status is changed.",
                        "enum": [
                            "NoCall",
                            "CallConnected",
                            "Ringing",
                            "OnHold",
                            "ParkedCall"
                        ]
                    },
                    "sequence": {
                        "type": "integer",
                        "description": "Order number of a notification to state the chronology"
                    },
                    "presenceStatus": {
                        "type": "string",
                        "description": "Aggregated presence status, calculated from a number of sources",
                        "enum": [
                            "Offline",
                            "Busy",
                            "Available"
                        ]
                    },
                    "userStatus": {
                        "type": "string",
                        "description": "User-defined presence status (as previously published by the user)",
                        "enum": [
                            "Offline",
                            "Busy",
                            "Available"
                        ]
                    },
                    "dndStatus": {
                        "type": "string",
                        "description": "Extended DnD (Do not Disturb) status",
                        "enum": [
                            "TakeAllCalls",
                            "DoNotAcceptAnyCalls",
                            "DoNotAcceptDepartmentCalls",
                            "TakeDepartmentCallsOnly"
                        ]
                    },
                    "allowSeeMyPresence": {
                        "type": "boolean",
                        "description": "If 'True' enables other extensions to see the extension presence status"
                    },
                    "ringOnMonitoredCall": {
                        "type": "boolean",
                        "description": "If 'True' enables to ring extension phone, if any user monitored by this extension is ringing"
                    },
                    "pickUpCallsOnHold": {
                        "type": "boolean",
                        "description": "If 'True' enables the extension user to pick up a monitored line on hold"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    }
                }
            },
            "DetailedCallInfo": {
                "type": "object",
                "properties": {
                    "callId": {
                        "type": "string"
                    },
                    "toTag": {
                        "type": "string"
                    },
                    "fromTag": {
                        "type": "string"
                    },
                    "remoteUri": {
                        "type": "string"
                    },
                    "localUri": {
                        "type": "string"
                    },
                    "rcSessionId": {
                        "type": "string"
                    }
                }
            },
            "PresenceNavigationInfoURI": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string"
                    }
                }
            },
            "ActiveCallInfoWithoutSIP": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a call"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Call direction",
                        "enum": [
                            "Inbound",
                            "Outbound"
                        ]
                    },
                    "from": {
                        "type": "string",
                        "description": "Phone number or extension number of a caller. For GCM transport type '_from' property should be used"
                    },
                    "fromName": {
                        "type": "string",
                        "description": "Name of a caller"
                    },
                    "to": {
                        "type": "string",
                        "description": "Phone number or extension number of a callee"
                    },
                    "toName": {
                        "type": "string",
                        "description": "Name of a callee"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Time when the call is actually started"
                    },
                    "telephonyStatus": {
                        "type": "string",
                        "description": "Telephony call status",
                        "enum": [
                            "NoCall",
                            "CallConnected",
                            "Ringing",
                            "OnHold",
                            "ParkedCall"
                        ]
                    },
                    "sessionId": {
                        "type": "string",
                        "description": "Internal identifier of a call session"
                    },
                    "terminationType": {
                        "type": "string",
                        "description": "Type of call termination. Supported for calls in 'NoCall' status. If the returned termination type is 'intermediate' it means the call is not actually ended, the connection is established on one of the devices",
                        "enum": [
                            "final",
                            "intermediate"
                        ]
                    }
                }
            },
            "GlipTeamInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a team"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Team"
                        ],
                        "description": "Type of a chat"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Team access level"
                    },
                    "name": {
                        "type": "string",
                        "description": "Team name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Team description"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Active",
                            "Archived"
                        ],
                        "description": "Team status"
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Team creation datetime in ISO 8601 format"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Team last change datetime in ISO 8601 format"
                    }
                }
            },
            "GlipEveryoneInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a chat"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Everyone"
                        ],
                        "description": "Type of a chat"
                    },
                    "name": {
                        "type": "string",
                        "description": "Chat name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Chat description"
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Chat creation datetime in ISO 8601 format"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Chat last change datetime in ISO 8601 format"
                    }
                }
            },
            "GlipPostPostBody": {
                "type": "object",
                "required": [
                    "text"
                ],
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Post text."
                    },
                    "attachments": {
                        "description": "Identifier(s) of attachments.",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Internal identifier of an attachment"
                                },
                                "type": {
                                    "type": "string",
                                    "description": "Attachment type"
                                }
                            }
                        }
                    }
                }
            },
            "GlipCreateTask": {
                "type": "object",
                "required": [
                    "subject",
                    "assignees"
                ],
                "properties": {
                    "subject": {
                        "type": "string",
                        "description": "Task name/subject. Max allowed length is 250 characters."
                    },
                    "assignees": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Assignee Id"
                                }
                            }
                        }
                    },
                    "completenessCondition": {
                        "type": "string",
                        "default": "Simple",
                        "enum": [
                            "Simple",
                            "AllAssignees",
                            "Percentage"
                        ]
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Task start date in UTC time zone."
                    },
                    "dueDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Task due date/time in UTC time zone."
                    },
                    "color": {
                        "type": "string",
                        "default": "Black",
                        "enum": [
                            "Black",
                            "Red",
                            "Orange",
                            "Yellow",
                            "Green",
                            "Blue",
                            "Purple",
                            "Magenta"
                        ]
                    },
                    "section": {
                        "type": "string",
                        "description": "Task section to group / search by. Max allowed legth is 100 characters."
                    },
                    "description": {
                        "type": "string",
                        "description": "Task details. Max allowed legth is 102400 characters (100kB)."
                    },
                    "recurrence": {
                        "$ref": "#/components/schemas/GlipTaskRecurrenceInfo"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Internal identifier of a file"
                                }
                            }
                        }
                    }
                }
            },
            "GlipGroupInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a group"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of a group. 'PrivateChat' is a group of 2 members. 'Group' is a chat of 2 and more participants, the membership cannot be changed after group creation. 'Team' is a chat of 1 and more participants, the membership can be modified in future. 'PersonalChat' is a private chat thread of a user",
                        "enum": [
                            "PrivateChat",
                            "Group",
                            "Team",
                            "PersonalChat"
                        ]
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "For 'Team' group type only. Team access level"
                    },
                    "name": {
                        "type": "string",
                        "description": "For 'Team' group type only. Team name"
                    },
                    "description": {
                        "type": "string",
                        "description": "For 'Team' group type only. Team description"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifier(s) of group members"
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Group creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Group last change datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format"
                    }
                }
            },
            "UpdateUnifiedPresence": {
                "type": "object",
                "properties": {
                    "glip": {
                        "$ref": "#/components/schemas/UpdateUnifiedPresenceGlip"
                    },
                    "telephony": {
                        "$ref": "#/components/schemas/UpdateUnifiedPresenceTelephony"
                    }
                }
            },
            "GlipChatsList": {
                "type": "object",
                "required": [
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipChatInfo"
                        },
                        "description": "List of chats"
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/GlipNavigationInfo"
                    }
                }
            },
            "GlipPostEvent": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a post"
                    },
                    "eventType": {
                        "type": "string",
                        "description": "Type of a post event",
                        "enum": [
                            "PostAdded",
                            "PostChanged",
                            "PostRemoved"
                        ]
                    },
                    "groupId": {
                        "type": "string",
                        "description": "Internal identifier of a group a post belongs to"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of a post. 'TextMessage' - an incoming text message; 'PersonJoined' - a message notifying that person has joined a conversation; 'PersonsAdded' - a message notifying that a person(s) were added to a conversation",
                        "enum": [
                            "TextMessage",
                            "PersonJoined",
                            "PersonsAdded",
                            "Card"
                        ]
                    },
                    "text": {
                        "type": "string",
                        "description": "For 'TextMessage' post type only. Message text"
                    },
                    "creatorId": {
                        "type": "string",
                        "description": "Internal identifier of a user - author of a post"
                    },
                    "addedPersonIds": {
                        "type": "array",
                        "description": "For PersonsAdded post type only. Identifiers of persons added to a group",
                        "items": {
                            "type": "string"
                        }
                    },
                    "removedPersonIds": {
                        "type": "array",
                        "description": "For PersonsRemoved post type only. Identifiers of persons removed from a group",
                        "items": {
                            "type": "string"
                        }
                    },
                    "mentions": {
                        "type": "array",
                        "description": "List of at mentions in post text with names.",
                        "items": {
                            "$ref": "#/components/schemas/GlipMentionsInfo"
                        }
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Post creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Post last change datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format"
                    }
                }
            },
            "GlipEventCreate": {
                "type": "object",
                "required": [
                    "title",
                    "startTime",
                    "endTime"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an event"
                    },
                    "creatorId": {
                        "type": "string",
                        "description": "Internal identifier of a person created an event"
                    },
                    "title": {
                        "type": "string",
                        "description": "Event title"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Datetime of starting an event"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "Datetime of ending an event"
                    },
                    "allDay": {
                        "type": "boolean",
                        "description": "Indicates whether event has some specific time slot or lasts for whole day(s)",
                        "default": false
                    },
                    "recurrence": {
                        "type": "string",
                        "description": "Event recurrence settings. For non-periodic events the value is 'None'. Must be greater or equal to event duration: 1- Day/Weekday; 7 - Week; 28 - Month; 365 - Year",
                        "enum": [
                            "None",
                            "Day",
                            "Weekday",
                            "Week",
                            "Month",
                            "Year"
                        ]
                    },
                    "endingCondition": {
                        "type": "string",
                        "description": "Condition of ending"
                    },
                    "endingAfter": {
                        "type": "integer",
                        "description": "Count of iterations. For periodic events only. Value range is 1 - 10. Must be specified if 'endingCondition' is 'Count'"
                    },
                    "endingOn": {
                        "type": "string",
                        "enum": [
                            "None",
                            "Count",
                            "Date"
                        ],
                        "default": "None",
                        "description": "Iterations end datetime for periodic events."
                    },
                    "color": {
                        "type": "string",
                        "description": "Color of Event title (including its presentation in Calendar)",
                        "enum": [
                            "Black",
                            "Red",
                            "Orange",
                            "Yellow",
                            "Green",
                            "Blue",
                            "Purple",
                            "Magenta"
                        ],
                        "default": "Black"
                    },
                    "location": {
                        "type": "string",
                        "description": "Event location"
                    },
                    "description": {
                        "type": "string",
                        "description": "Event details"
                    }
                }
            },
            "GlipCompleteTask": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Completeness status. 'Mandatory' if `completenessCondition` is set to `Simple`, otherwise 'Optional'",
                        "enum": [
                            "Incomplete",
                            "Complete"
                        ]
                    },
                    "assignees": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Internal identifier of an assignee (RC extension ID or Glip user ID). 'Mandatory' if `completenessCondition` is set to `AllAssignees`, otherwise 'Optional'"
                                }
                            }
                        }
                    },
                    "completenessPercentage": {
                        "description": "Current completeness percentage of a task with the 'Percentage' completeness condition. 'Mandatory' if `completenessCondition` is set to `Percentage`, otherwise 'Optional'",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    }
                }
            },
            "GlipCreateGroup": {
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "PrivateChat",
                            "Team"
                        ],
                        "description": "Type of a group to be created. 'PrivateChat' is a group of 2 members. 'Team' is a chat of 1 and more participants, the membership can be modified in future. 'PersonalChat' is a private chat thread of a user"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "For 'Team' group type only. Team access level"
                    },
                    "name": {
                        "type": "string",
                        "description": "For 'Team' group type only. Team name"
                    },
                    "description": {
                        "type": "string",
                        "description": "For 'Team' group type only. Team description"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identifier(s) of group members. For 'PrivateChat' group type 2 members only are supported"
                    }
                }
            },
            "UnifiedPresence": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "Available",
                            "Offline",
                            "DND",
                            "Busy"
                        ],
                        "description": "Aggregated presence status of the user"
                    },
                    "glip": {
                        "$ref": "#/components/schemas/UnifiedPresenceGlip"
                    },
                    "telephony": {
                        "$ref": "#/components/schemas/UnifiedPresenceTelephony"
                    },
                    "meeting": {
                        "$ref": "#/components/schemas/UnifiedPresenceMeeting"
                    }
                }
            },
            "GlipTeamsList": {
                "type": "object",
                "required": [
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipTeamInfo"
                        },
                        "description": "List of teams"
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/GlipNavigationInfo"
                    }
                }
            },
            "GlipPosts": {
                "type": "object",
                "required": [
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipPostInfo"
                        },
                        "description": "List of posts"
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/GlipNavigationInfo"
                    }
                }
            },
            "GlipNoteInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a note"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of a note"
                    },
                    "chatIds": {
                        "type": "array",
                        "description": "Internal identifiers of the chat(s) where the note is posted or shared.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "preview": {
                        "type": "string",
                        "description": "Preview of a note (first 150 characters of a body)"
                    },
                    "creator": {
                        "$ref": "#/components/schemas/NoteCreatorInfo"
                    },
                    "lastModifiedBy": {
                        "$ref": "#/components/schemas/LastModifiedByInfo"
                    },
                    "lockedBy": {
                        "$ref": "#/components/schemas/LockedByInfo"
                    },
                    "status": {
                        "type": "string",
                        "description": "Note publishing status. Any note is created in 'Draft' status. After it is posted it becomes 'Active'",
                        "enum": [
                            "Active",
                            "Draft"
                        ]
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Creation time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Datetime of the note last update"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Note"
                        ]
                    }
                }
            },
            "GetGlipNoteInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a note"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of a note"
                    },
                    "chatIds": {
                        "type": "array",
                        "description": "Internal identifiers of the chat(s) where the note is posted or shared.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "preview": {
                        "type": "string",
                        "description": "Preview of a note (first 150 characters of a body)"
                    },
                    "body": {
                        "type": "string",
                        "description": "Text of a note"
                    },
                    "creator": {
                        "$ref": "#/components/schemas/NoteCreatorInfo"
                    },
                    "lastModifiedBy": {
                        "$ref": "#/components/schemas/LastModifiedByInfo"
                    },
                    "lockedBy": {
                        "$ref": "#/components/schemas/LockedByInfo"
                    },
                    "status": {
                        "type": "string",
                        "description": "Note publishing status. Any note is created in 'Draft' status. After it is posted it becomes 'Active'",
                        "enum": [
                            "Active",
                            "Draft"
                        ]
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Creation time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Datetime of the note last update"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Note"
                        ]
                    }
                }
            },
            "GlipGroupList": {
                "type": "object",
                "required": [
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipGroupInfo"
                        },
                        "description": "List of groups/teams/private chats"
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/GlipNavigationInfo"
                    }
                }
            },
            "EditGroupRequest": {
                "type": "object",
                "properties": {
                    "addedPersonIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of users to be added to a team"
                    },
                    "addedPersonEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of user email addresses to be added to a team (i.e. as guests)"
                    },
                    "removedPersonIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of users to be removed from a team"
                    }
                }
            },
            "GlipPostMembersIdsListBody": {
                "type": "object",
                "required": [
                    "members"
                ],
                "properties": {
                    "members": {
                        "description": "Identifier(s) of chat members.",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Internal identifier of a person"
                                }
                            }
                        }
                    }
                }
            },
            "GlipPostsList": {
                "type": "object",
                "required": [
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipPostInfo"
                        },
                        "description": "List of posts"
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/GlipNavigationInfo"
                    }
                }
            },
            "GlipNoteCreate": {
                "type": "object",
                "required": [
                    "title"
                ],
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Title of a note. Max allowed legth is 250 characters"
                    },
                    "body": {
                        "type": "string",
                        "description": "Contents of a note; HTML-markuped text. Max allowed length is 102400 characters (100 Kb)."
                    }
                }
            },
            "GlipTaskInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a task"
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "datetime",
                        "description": "Datetime of the task creation in UTC time zone."
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "datetime",
                        "description": "Datetime of the last modification of the task in UTC time zone."
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of a task",
                        "enum": [
                            "Task"
                        ]
                    },
                    "creator": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Internal identifier of a task"
                            }
                        }
                    },
                    "chatIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Chat IDs where the task is posted or shared."
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Pending",
                            "InProgress",
                            "Completed"
                        ],
                        "description": "Status of task execution"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Name/subject of a task"
                    },
                    "assignees": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Internal identifier of an assignee"
                                },
                                "status": {
                                    "type": "string",
                                    "enum": [
                                        "Pending",
                                        "Completed"
                                    ],
                                    "description": "Status of the task execution by assignee"
                                }
                            }
                        },
                        "description": "Task name/subject"
                    },
                    "completenessCondition": {
                        "type": "string",
                        "enum": [
                            "Simple",
                            "AllAssignees",
                            "Percentage"
                        ],
                        "description": "Specifies how to determine task completeness"
                    },
                    "completenessPercentage": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100,
                        "description": "Current completeness percentage of the task with the specified percentage completeness condition"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Task start date"
                    },
                    "dueDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Task due date/time"
                    },
                    "color": {
                        "type": "string",
                        "enum": [
                            "Black",
                            "Red",
                            "Orange",
                            "Yellow",
                            "Green",
                            "Blue",
                            "Purple",
                            "Magenta"
                        ],
                        "description": "Font color of a post with the current task"
                    },
                    "section": {
                        "type": "string",
                        "description": "Task section to group/search by"
                    },
                    "description": {
                        "type": "string",
                        "description": "Task details"
                    },
                    "recurrence": {
                        "$ref": "#/components/schemas/GlipTaskRecurrenceInfo"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskAttachment"
                        }
                    }
                }
            },
            "GlipCompany": {
                "type": "object",
                "required": [
                    "id",
                    "creationTime",
                    "lastModifiedTime"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an RC account/Glip company, or tilde (~) to indicate a company the current user belongs to"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a company"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Domain name of a company"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Datetime of creation in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Datetime of last modification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format"
                    }
                }
            },
            "GlipPreferencesInfo": {
                "type": "object",
                "properties": {
                    "chats": {
                        "$ref": "#/components/schemas/GlipPreferencesChats"
                    }
                }
            },
            "GlipChatInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a chat"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Everyone",
                            "Team",
                            "Group",
                            "Direct",
                            "Personal"
                        ],
                        "description": "Type of a chat"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "For 'Team' chat type only. Team access level."
                    },
                    "name": {
                        "type": "string",
                        "description": "For 'Team','Everyone' chats types only. Chat name."
                    },
                    "description": {
                        "type": "string",
                        "description": "For 'Team','Everyone' chats types only. Chat description."
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Active",
                            "Archived"
                        ],
                        "description": "For 'Team' chat type only. Team status."
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Chat creation datetime in ISO 8601 format"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Chat last change datetime in ISO 8601 format"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipChatMemberInfo"
                        }
                    }
                }
            },
            "GlipPatchTeamBody": {
                "type": "object",
                "properties": {
                    "public": {
                        "type": "boolean",
                        "description": "Team access level"
                    },
                    "name": {
                        "type": "string",
                        "description": "Team name. Maximum number of characters supported is 250"
                    },
                    "description": {
                        "type": "string",
                        "description": "Team description. Maximum number of characters supported is 1000"
                    }
                }
            },
            "GlipChatsListWithoutNavigation": {
                "type": "object",
                "required": [
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipChatInfo"
                        },
                        "description": "List of chats"
                    }
                }
            },
            "GlipPatchPostBody": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Post text."
                    }
                }
            },
            "GlipEventsInfo": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipEventInfo"
                        },
                        "description": "List of events created by the current user"
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/GlipNavigationInfo"
                    }
                }
            },
            "GlipNotesInfo": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipNoteInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/GlipNavigationInfo"
                    }
                }
            },
            "UnifiedPresenceList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/UnifiedPresenceListEntry"
                }
            },
            "GlipPostMembersListBody": {
                "type": "object",
                "required": [
                    "members"
                ],
                "properties": {
                    "members": {
                        "description": "Identifier(s) of chat member(s)",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Internal identifier of a person"
                                },
                                "email": {
                                    "type": "string",
                                    "description": "Email of a person"
                                }
                            },
                            "description": "Conversation is opened"
                        }
                    }
                }
            },
            "GlipMessageAttachmentInfoRequest": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of attachment",
                        "enum": [
                            "Card",
                            "Event",
                            "Note"
                        ],
                        "default": "Card"
                    },
                    "title": {
                        "type": "string",
                        "description": "Attachment title"
                    },
                    "fallback": {
                        "type": "string",
                        "description": "Default message returned in case the client does not support interactive messages"
                    },
                    "color": {
                        "type": "string",
                        "description": "Color of Event title, including its presentation in Calendar; or the color of the side border of an interactive message of a Card. The default color is 'Black'"
                    },
                    "intro": {
                        "type": "string",
                        "description": "Introductory text displayed directly above a message"
                    },
                    "author": {
                        "$ref": "#/components/schemas/GlipMessageAttachmentAuthorInfo"
                    },
                    "text": {
                        "type": "string",
                        "description": "Text of attachment (up to 1000 chars), supports GlipDown"
                    },
                    "imageUri": {
                        "type": "string",
                        "description": "Link to an image displayed at the bottom of a message"
                    },
                    "thumbnailUri": {
                        "type": "string",
                        "description": "Link to an image preview displayed to the right of a message (82x82)"
                    },
                    "fields": {
                        "type": "array",
                        "description": "Individual subsections within a message",
                        "items": {
                            "$ref": "#/components/schemas/GlipMessageAttachmentFieldsInfo"
                        }
                    },
                    "footnote": {
                        "$ref": "#/components/schemas/GlipMessageAttachmentFootnoteInfo"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Datetime of starting an event"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "Datetime of ending an event"
                    },
                    "allDay": {
                        "type": "boolean",
                        "description": "Indicates whether an event has some specific time slot or lasts for the whole day(s)",
                        "default": false
                    },
                    "recurrence": {
                        "type": "string",
                        "description": "Event recurrence settings. For non-periodic events the value is 'None'. Must be greater or equal to event duration: 1- Day/Weekday; 7 - Week; 28 - Month; 365 - Year",
                        "enum": [
                            "None",
                            "Day",
                            "Weekday",
                            "Week",
                            "Month",
                            "Year"
                        ]
                    },
                    "endingCondition": {
                        "type": "string",
                        "description": "Condition of ending an event"
                    }
                }
            },
            "GlipPersonInfo": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a user"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of a user"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of a user"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of a user"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "Photo of a user"
                    },
                    "companyId": {
                        "type": "string",
                        "description": "Internal identifier of a company"
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time of creation in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time of the last modification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format"
                    }
                }
            },
            "GlipWebhookInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a webhook"
                    },
                    "creatorId": {
                        "type": "string",
                        "description": "Internal identifier of the user who created a webhook"
                    },
                    "groupIds": {
                        "type": "array",
                        "description": "Internal identifiers of groups where a webhook has been created",
                        "items": {
                            "type": "string"
                        }
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Webhook creation time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format",
                        "format": "date-time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Webhook last update time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format",
                        "format": "date-time"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Public link to send a webhook payload"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of a webhook",
                        "enum": [
                            "Active",
                            "Suspended",
                            "Deleted"
                        ]
                    }
                }
            },
            "GlipWebhookList": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipWebhookInfo"
                        }
                    }
                }
            },
            "GlipGroupsEvent": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a group"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of a group. 'PrivateChat' is a group of 2 members. 'Group' is a chat of 2 and more participants, the membership cannot be changed after group creation. 'Team' is a chat of 1 and more participants, the membership can be modified in future. 'PersonalChat' is a private chat thread of a user",
                        "enum": [
                            "PrivateChat",
                            "Group",
                            "Team",
                            "PersonalChat"
                        ]
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "For 'Team' group type only. Team access level"
                    },
                    "name": {
                        "type": "string",
                        "description": "For 'Team' group type only. Team name"
                    },
                    "description": {
                        "type": "string",
                        "description": "For 'Team' group type only. Team description"
                    },
                    "members": {
                        "type": "array",
                        "description": "Identifier(s) of group members",
                        "items": {
                            "type": "string"
                        }
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Group creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Group last change datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format"
                    },
                    "eventType": {
                        "type": "string",
                        "description": "Type of a group event. Only the person who joined/was added to a group will receive 'GroupJoined' notification. Only the person who left/was removed from a group will receive 'GroupLeft' notification",
                        "enum": [
                            "GroupRenamed",
                            "GroupJoined",
                            "GroupLeft",
                            "GroupChanged"
                        ]
                    }
                }
            },
            "GlipMessageAttachmentInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an attachment"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of an attachment",
                        "enum": [
                            "Card",
                            "Event",
                            "Note"
                        ],
                        "default": "Card"
                    },
                    "fallback": {
                        "type": "string",
                        "description": "A string of default text that will be rendered in the case that the client does not support Interactive Messages"
                    },
                    "intro": {
                        "type": "string",
                        "description": "A pretext to the message"
                    },
                    "author": {
                        "$ref": "#/components/schemas/GlipMessageAttachmentAuthorInfo"
                    },
                    "title": {
                        "type": "string",
                        "description": "Message title"
                    },
                    "text": {
                        "type": "string",
                        "description": "A large string field (up to 1000 chars) to be displayed as the body of a message (Supports GlipDown)"
                    },
                    "imageUri": {
                        "type": "string",
                        "description": "Link to an image displayed at the bottom of a message"
                    },
                    "thumbnailUri": {
                        "type": "string",
                        "description": "Link to an image preview displayed to the right of a message (82x82)"
                    },
                    "fields": {
                        "type": "array",
                        "description": "Information on navigation",
                        "items": {
                            "$ref": "#/components/schemas/GlipMessageAttachmentFieldsInfo"
                        }
                    },
                    "footnote": {
                        "$ref": "#/components/schemas/GlipMessageAttachmentFootnoteInfo"
                    },
                    "creatorId": {
                        "type": "string",
                        "description": "Internal identifier of a person created an event"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Datetime of starting an event"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "Datetime of ending an event"
                    },
                    "allDay": {
                        "type": "boolean",
                        "description": "Indicates whether an event has some specific time slot or lasts for the whole day(s)",
                        "default": false
                    },
                    "recurrence": {
                        "type": "string",
                        "description": "Event recurrence settings.",
                        "enum": [
                            "None",
                            "Day",
                            "Weekday",
                            "Week",
                            "Month",
                            "Year"
                        ]
                    },
                    "endingCondition": {
                        "type": "string",
                        "description": "Condition of ending"
                    },
                    "endingAfter": {
                        "type": "integer",
                        "description": "Count of iterations. For periodic events only"
                    },
                    "endingOn": {
                        "type": "string",
                        "enum": [
                            "None",
                            "Count",
                            "Date"
                        ],
                        "default": "None",
                        "description": "Iterations end datetime for periodic events"
                    },
                    "color": {
                        "type": "string",
                        "description": "Color of Event title, including its presentation in Calendar; or the color of the side border of an interactive message of a Card",
                        "enum": [
                            "Black",
                            "Red",
                            "Orange",
                            "Yellow",
                            "Green",
                            "Blue",
                            "Purple",
                            "Magenta"
                        ],
                        "default": "Black"
                    },
                    "location": {
                        "type": "string",
                        "description": "Event location"
                    },
                    "description": {
                        "type": "string",
                        "description": "Event details"
                    }
                }
            },
            "GlipConversationsList": {
                "type": "object",
                "required": [
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipConversationInfo"
                        },
                        "description": "List of conversations"
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/GlipNavigationInfo"
                    }
                }
            },
            "CreateGlipConversationRequest": {
                "type": "object",
                "required": [
                    "members"
                ],
                "properties": {
                    "members": {
                        "description": "Identifier(s) of chat member(s). The maximum supported number of IDs is 15. User's own ID is optional. If `members` section is omitted then 'Personal' chat will be returned  ",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Internal identifier of a person"
                                },
                                "email": {
                                    "type": "string",
                                    "description": "Email of a person"
                                }
                            }
                        }
                    }
                }
            },
            "GlipConversationInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a conversation"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Direct",
                            "Personal",
                            "Group"
                        ],
                        "description": "Type of a conversation"
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Conversation creation datetime in ISO 8601 format"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Conversation last change datetime in ISO 8601 format"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipChatMemberInfo"
                        }
                    }
                }
            },
            "GlipPostTeamBody": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "public": {
                        "type": "boolean",
                        "description": "Team access level."
                    },
                    "name": {
                        "type": "string",
                        "description": "Team name."
                    },
                    "description": {
                        "type": "string",
                        "description": "Team description."
                    },
                    "members": {
                        "description": "Identifier(s) of team members.",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Internal identifier of a person"
                                },
                                "email": {
                                    "type": "string",
                                    "description": "Email of a person"
                                }
                            }
                        }
                    }
                }
            },
            "GlipPostInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a post"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "Internal identifier of a group a post belongs to"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "TextMessage",
                            "PersonJoined",
                            "PersonsAdded"
                        ],
                        "description": "Type of a post"
                    },
                    "text": {
                        "type": "string",
                        "description": "For 'TextMessage' post type only. Text of a message"
                    },
                    "creatorId": {
                        "type": "string",
                        "description": "Internal identifier of a user - author of a post"
                    },
                    "addedPersonIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "For 'PersonsAdded' post type only. Identifiers of persons added to a group"
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Post creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Post last modification datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipMessageAttachmentInfo"
                        },
                        "description": "List of posted attachments"
                    },
                    "mentions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipMentionsInfo"
                        }
                    },
                    "activity": {
                        "type": "string",
                        "description": "Label of activity type"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of a message. (Can be set for bot's messages only)"
                    },
                    "iconUri": {
                        "type": "string",
                        "description": "Link to an image used as an icon for this message"
                    },
                    "iconEmoji": {
                        "type": "string",
                        "description": "Emoji used as an icon for this message"
                    }
                }
            },
            "GlipCreatePost": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Title of a message. (Can be set for bot's messages only)."
                    },
                    "text": {
                        "type": "string",
                        "description": "Text of a post",
                        "maximum": 1000
                    },
                    "groupId": {
                        "type": "string",
                        "description": "Internal identifier of a group"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipMessageAttachmentInfoRequest"
                        },
                        "description": "List of attachments to be posted"
                    }
                }
            },
            "UpdateGlipEveryoneRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "integer",
                        "description": "Everyone chat name. Maximum number of characters supported is 250"
                    },
                    "description": {
                        "type": "string",
                        "description": "Everyone chat description. Maximum number of characters supported is 1000"
                    }
                }
            },
            "GlipEventInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an event"
                    },
                    "creatorId": {
                        "type": "string",
                        "description": "Internal identifier of a person created an event"
                    },
                    "title": {
                        "type": "string",
                        "description": "Event title"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Datetime of starting an event"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "Datetime of ending an event"
                    },
                    "allDay": {
                        "type": "boolean",
                        "description": "Indicates whether an event has some specific time slot or lasts for the whole day(s)",
                        "default": false
                    },
                    "recurrence": {
                        "type": "string",
                        "description": "Event recurrence settings",
                        "enum": [
                            "None",
                            "Day",
                            "Weekday",
                            "Week",
                            "Month",
                            "Year"
                        ]
                    },
                    "endingCondition": {
                        "type": "string",
                        "description": "Condition of ending"
                    },
                    "endingAfter": {
                        "type": "integer",
                        "description": "Count of iterations. For periodic events only"
                    },
                    "endingOn": {
                        "type": "string",
                        "enum": [
                            "None",
                            "Count",
                            "Date"
                        ],
                        "default": "None",
                        "description": "Iterations end datetime for periodic events"
                    },
                    "color": {
                        "type": "string",
                        "description": "Color of Event title (including its presentation in Calendar)",
                        "enum": [
                            "Black",
                            "Red",
                            "Orange",
                            "Yellow",
                            "Green",
                            "Blue",
                            "Purple",
                            "Magenta"
                        ],
                        "default": "Black"
                    },
                    "location": {
                        "type": "string",
                        "description": "Event location"
                    },
                    "description": {
                        "type": "string",
                        "description": "Event details"
                    }
                }
            },
            "GlipTaskList": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GlipTaskInfo"
                        }
                    }
                }
            },
            "GlipUpdateTask": {
                "type": "object",
                "properties": {
                    "subject": {
                        "type": "string",
                        "description": "Task name/subject. Max allowed length is 250 characters."
                    },
                    "assignees": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Internal identifier of an assignee"
                                }
                            }
                        }
                    },
                    "completenessCondition": {
                        "type": "string",
                        "enum": [
                            "Simple",
                            "AllAssignees",
                            "Percentage"
                        ]
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Task start date in UTC time zone"
                    },
                    "dueDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Task due date/time in UTC time zone"
                    },
                    "color": {
                        "type": "string",
                        "enum": [
                            "Black",
                            "Red",
                            "Orange",
                            "Yellow",
                            "Green",
                            "Blue",
                            "Purple",
                            "Magenta"
                        ]
                    },
                    "section": {
                        "type": "string",
                        "description": "Task section to group/search by. Max allowed legth is 100 characters"
                    },
                    "description": {
                        "type": "string",
                        "description": "Task details. Max allowed legth is 102400 characters (100kB)"
                    },
                    "recurrence": {
                        "$ref": "#/components/schemas/GlipTaskRecurrenceInfo"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Internal identifier of a task"
                                }
                            }
                        }
                    }
                }
            },
            "GlipTaskRecurrenceInfo": {
                "type": "object",
                "properties": {
                    "schedule": {
                        "type": "string",
                        "enum": [
                            "None",
                            "Daily",
                            "Weekdays",
                            "Weekly",
                            "Monthly",
                            "Yearly"
                        ],
                        "description": "Task recurrence settings. For non-periodic tasks the value is 'None'"
                    },
                    "endingCondition": {
                        "type": "string",
                        "enum": [
                            "None",
                            "Count",
                            "Date"
                        ],
                        "description": "Task ending condition"
                    },
                    "endingAfter": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 10,
                        "description": "Count of iterations of periodic tasks"
                    },
                    "endingOn": {
                        "type": "string",
                        "format": "date-time",
                        "description": "End date of periodic task"
                    }
                }
            },
            "GlipNavigationInfo": {
                "type": "object",
                "properties": {
                    "prevPageToken": {
                        "type": "string",
                        "description": "Previous page token. To get previous page, user should pass one of returned token in next request and, in turn, required page will be returned with new tokens"
                    },
                    "nextPageToken": {
                        "type": "string",
                        "description": "Next page token. To get next page, user should pass one of returned token in next request and, in turn, required page will be returned with new tokens"
                    }
                }
            },
            "UnifiedPresenceTelephony": {
                "type": "object",
                "description": "Returned if *BLF* feature is switched on",
                "properties": {
                    "status": {
                        "description": "Telephony status calculated from all user's phone numbers. Returned always for the requester's extension; returned for another users if their telephony visibility is set to 'Visible'",
                        "type": "string",
                        "enum": [
                            "NoCall",
                            "Ringing",
                            "CallConnected",
                            "OnHold",
                            "ParkedCall"
                        ]
                    },
                    "visibility": {
                        "description": "Specifies if the user hardphone presence status is visible to other users; returned only for requester's extension",
                        "type": "string",
                        "enum": [
                            "Visible",
                            "Invisible"
                        ]
                    },
                    "availability": {
                        "description": "Telephony DND status. Returned if *DND* feature is switched on",
                        "type": "string",
                        "enum": [
                            "TakeAllCalls",
                            "DoNotAcceptAnyCalls",
                            "DoNotAcceptQueueCalls"
                        ]
                    }
                }
            },
            "LockedByInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the user editing the note"
                    }
                }
            },
            "GlipChatMemberInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a user"
                    }
                }
            },
            "GlipMessageAttachmentFieldsInfo": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Title of an individual field"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of an individual field (supports Markdown)"
                    },
                    "style": {
                        "type": "string",
                        "description": "Style of width span applied to a field",
                        "default": "Short",
                        "enum": [
                            "Short",
                            "Long"
                        ]
                    }
                }
            },
            "UpdateUnifiedPresenceGlip": {
                "type": "object",
                "properties": {
                    "visibility": {
                        "description": "Visibility setting allowing other users to see Glip presence status",
                        "type": "string",
                        "enum": [
                            "Visible",
                            "Invisible"
                        ]
                    },
                    "availability": {
                        "description": "Availability setting specifing whether to receive Glip notifications or not",
                        "type": "string",
                        "enum": [
                            "Available",
                            "DND"
                        ]
                    }
                }
            },
            "UpdateUnifiedPresenceTelephony": {
                "type": "object",
                "properties": {
                    "availability": {
                        "description": "Telephony DND status",
                        "type": "string",
                        "enum": [
                            "TakeAllCalls",
                            "DoNotAcceptAnyCalls",
                            "DoNotAcceptQueueCalls"
                        ]
                    }
                }
            },
            "LastModifiedByInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the user who last updated the note"
                    }
                }
            },
            "GlipMessageAttachmentAuthorInfo": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of a message author"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Link to an author's name"
                    },
                    "iconUri": {
                        "type": "string",
                        "description": "Link to an image displayed to the left of an author's name; sized 82x82px"
                    }
                }
            },
            "GlipMentionsInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a user"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of mentions",
                        "enum": [
                            "Person",
                            "Team",
                            "File",
                            "Link",
                            "Event",
                            "Task",
                            "Note",
                            "Card"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a user"
                    }
                }
            },
            "UnifiedPresenceGlip": {
                "type": "object",
                "description": "Returned if *Glip* feature is switched on",
                "properties": {
                    "status": {
                        "description": "Glip connection status calculated from all user's apps. Returned always for the requester's extension; returned for another users if their glip visibility is set to 'Visible'",
                        "type": "string",
                        "enum": [
                            "Offline",
                            "Online"
                        ]
                    },
                    "visibility": {
                        "description": "Visibility setting allowing other users to see the user's Glip presence status; returned only for requester's extension",
                        "type": "string",
                        "enum": [
                            "Visible",
                            "Invisible"
                        ]
                    },
                    "availability": {
                        "description": "Shows whether user wants to receive Glip notifications or not. ",
                        "type": "string",
                        "enum": [
                            "Available",
                            "DND"
                        ]
                    }
                }
            },
            "UnifiedPresenceMeeting": {
                "type": "object",
                "description": "Returned if *Meetings* feature is switched on",
                "properties": {
                    "status": {
                        "description": "Meeting status calculated from all user`s meetings",
                        "type": "string",
                        "enum": [
                            "NoMeeting",
                            "InMeeting"
                        ]
                    }
                }
            },
            "NoteCreatorInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the user who created the note"
                    }
                }
            },
            "GlipPreferencesChats": {
                "type": "object",
                "properties": {
                    "maxCount": {
                        "type": "integer",
                        "default": 10
                    },
                    "leftRailMode": {
                        "type": "string",
                        "default": "CombineAllChatTypes",
                        "enum": [
                            "SeparateAllChatTypes",
                            "SeparateConversationsAndTeams",
                            "CombineAllChatTypes"
                        ]
                    }
                }
            },
            "UnifiedPresenceListEntry": {
                "type": "object",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "Internal identifier of the resource"
                    },
                    "status": {
                        "type": "integer",
                        "description": "Status code of resource retrieval"
                    },
                    "body": {
                        "$ref": "#/components/schemas/UnifiedPresence"
                    }
                }
            },
            "GlipMessageAttachmentFootnoteInfo": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Text of a footer"
                    },
                    "iconUri": {
                        "type": "string",
                        "description": "Link to an icon displayed to the left of a footer; sized 32x32px"
                    },
                    "time": {
                        "type": "string",
                        "description": "Message creation datetime in ISO 8601 format including timezone, for example *2016-03-10T18:07:52.534Z*",
                        "format": "date-time"
                    }
                }
            },
            "TaskAttachment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a file"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "File"
                        ],
                        "description": "Attachment type (currently only `File` value is supported)."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the attached file (including extension name)."
                    },
                    "contentUri": {
                        "type": "string",
                        "description": "Link to an attachment content"
                    }
                }
            },
            "MeetingsResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MeetingResponseResource"
                        }
                    },
                    "paging": {
                        "$ref": "#/components/schemas/MeetingsPagingInfo"
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/MeetingsNavigationInfo"
                    }
                }
            },
            "MeetingRequestResource": {
                "type": "object",
                "properties": {
                    "topic": {
                        "type": "string"
                    },
                    "meetingType": {
                        "type": "string",
                        "enum": [
                            "Scheduled",
                            "Instant",
                            "Recurring"
                        ]
                    },
                    "schedule": {
                        "$ref": "#/components/schemas/MeetingScheduleResource"
                    },
                    "password": {
                        "type": "string"
                    },
                    "host": {
                        "$ref": "#/components/schemas/HostInfoRequest"
                    },
                    "allowJoinBeforeHost": {
                        "type": "boolean",
                        "default": false
                    },
                    "startHostVideo": {
                        "type": "boolean",
                        "default": false
                    },
                    "startParticipantsVideo": {
                        "type": "boolean",
                        "default": false
                    },
                    "usePersonalMeetingId": {
                        "type": "boolean"
                    },
                    "audioOptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "MeetingResponseResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "topic": {
                        "type": "string"
                    },
                    "meetingType": {
                        "type": "string",
                        "enum": [
                            "Scheduled",
                            "Instant",
                            "Recurring"
                        ]
                    },
                    "password": {
                        "type": "string"
                    },
                    "h323Password": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "links": {
                        "$ref": "#/components/schemas/MeetingLinks"
                    },
                    "schedule": {
                        "$ref": "#/components/schemas/MeetingScheduleResource"
                    },
                    "host": {
                        "$ref": "#/components/schemas/HostInfoRequest"
                    },
                    "allowJoinBeforeHost": {
                        "type": "boolean",
                        "default": false
                    },
                    "startHostVideo": {
                        "type": "boolean",
                        "default": false
                    },
                    "startParticipantsVideo": {
                        "type": "boolean",
                        "default": false
                    },
                    "audioOptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "MeetingServiceInfoResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "supportUri": {
                        "type": "string"
                    },
                    "intlDialInNumbersUri": {
                        "type": "string"
                    },
                    "externalUserInfo": {
                        "$ref": "#/components/schemas/MeetingExternalUserInfoResource"
                    },
                    "dialInNumbers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DialInNumberResource"
                        }
                    }
                }
            },
            "AssistantsResource": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AssistantResource"
                        }
                    }
                }
            },
            "AssistedUsersResource": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AssistedUserResource"
                        }
                    }
                }
            },
            "AssistantResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "MeetingsPagingInfo": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "perPage": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalElements": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pageStart": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pageEnd": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "MeetingsNavigationInfo": {
                "type": "object",
                "properties": {
                    "nextPage": {
                        "$ref": "#/components/schemas/MeetingsNavigationInfoUri"
                    },
                    "previousPage": {
                        "$ref": "#/components/schemas/MeetingsNavigationInfoUri"
                    },
                    "firstPage": {
                        "$ref": "#/components/schemas/MeetingsNavigationInfoUri"
                    },
                    "lastPage": {
                        "$ref": "#/components/schemas/MeetingsNavigationInfoUri"
                    }
                }
            },
            "MeetingLinks": {
                "type": "object",
                "properties": {
                    "startUri": {
                        "type": "string"
                    },
                    "joinUri": {
                        "type": "string"
                    }
                }
            },
            "DialInNumberResource": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string"
                    },
                    "formattedNumber": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "country": {
                        "$ref": "#/components/schemas/CountryResource"
                    }
                }
            },
            "AssistedUserResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "MeetingScheduleResource": {
                "type": "object",
                "properties": {
                    "startTime": {
                        "type": "string"
                    },
                    "durationInMinutes": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "timeZone": {
                        "$ref": "#/components/schemas/TimezoneResource"
                    }
                }
            },
            "HostInfoRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an extension which is assigned to be a meeting host. The default value is currently logged-in extension identifier"
                    }
                }
            },
            "MeetingExternalUserInfoResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "accountId": {
                        "type": "string"
                    },
                    "userType": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "userToken": {
                        "type": "string"
                    },
                    "hostKey": {
                        "type": "string"
                    },
                    "personalMeetingId": {
                        "type": "string"
                    }
                }
            },
            "MeetingsNavigationInfoUri": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "CountryResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "isoCode": {
                        "type": "string"
                    },
                    "callingCode": {
                        "type": "string"
                    },
                    "emergencyCalling": {
                        "type": "boolean",
                        "default": false
                    },
                    "numberSelling": {
                        "type": "boolean",
                        "default": false
                    },
                    "loginAllowed": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "TimezoneResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "SubscriptionInfo": {
                "type": "object",
                "required": [
                    "deliveryMode"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a subscription"
                    },
                    "eventFilters": {
                        "type": "array",
                        "description": "Collection of API resources (message-store/presence/detailed presence) corresponding to events the user is subscribed to",
                        "items": {
                            "type": "string"
                        }
                    },
                    "disabledFilters": {
                        "type": "array",
                        "description": "Collection of API resources (message-store/presence/detailed presence) corresponding to events the user is not subscribed to due to certain limitations",
                        "items": {
                            "$ref": "#/components/schemas/DisabledFilterInfo"
                        }
                    },
                    "expirationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Subscription expiration datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "expiresIn": {
                        "type": "integer",
                        "description": "Subscription lifetime in seconds",
                        "default": 900
                    },
                    "status": {
                        "type": "string",
                        "description": "Subscription status",
                        "enum": [
                            "Active",
                            "Suspended",
                            "Blacklisted"
                        ]
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Subscription creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example 2016-03-10T18:07:52.534Z"
                    },
                    "deliveryMode": {
                        "$ref": "#/components/schemas/NotificationDeliveryMode"
                    },
                    "blacklistedData": {
                        "$ref": "#/components/schemas/NotificationBlacklistedData"
                    }
                }
            },
            "ModifySubscriptionRequest": {
                "type": "object",
                "required": [
                    "eventFilters"
                ],
                "properties": {
                    "eventFilters": {
                        "type": "array",
                        "description": "Collection of URIs to API resources",
                        "items": {
                            "type": "string"
                        }
                    },
                    "deliveryMode": {
                        "$ref": "#/components/schemas/NotificationDeliveryModeRequest"
                    },
                    "expiresIn": {
                        "type": "integer",
                        "description": "Subscription lifetime in seconds. Max value is 7 days (604800 sec). For *WebHook* transport type max value might be set up to 630720000 seconds (20 years)",
                        "default": 604800
                    }
                }
            },
            "RecordsCollectionResourceSubscriptionResponse": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SubscriptionInfo"
                        }
                    }
                }
            },
            "CreateSubscriptionRequest": {
                "type": "object",
                "required": [
                    "deliveryMode",
                    "eventFilters"
                ],
                "properties": {
                    "eventFilters": {
                        "type": "array",
                        "description": "Collection of URIs to API resources",
                        "items": {
                            "type": "string"
                        }
                    },
                    "deliveryMode": {
                        "$ref": "#/components/schemas/NotificationDeliveryModeRequest"
                    },
                    "expiresIn": {
                        "type": "integer",
                        "description": "Subscription lifetime in seconds. Max value is 7 days (604800 sec). For *WebHook* transport type max value might be set up to 630720000 seconds (20 years)",
                        "default": 604800
                    }
                }
            },
            "NotificationBlacklistedData": {
                "description": "Returned if WebHook subscription is blacklisted",
                "type": "object",
                "properties": {
                    "blacklistedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time of adding subscrition to a black list in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Reason for adding subscrition to a black list"
                    }
                }
            },
            "NotificationDeliveryModeRequest": {
                "type": "object",
                "properties": {
                    "transportType": {
                        "type": "string",
                        "description": "Notifications transportation provider name",
                        "enum": [
                            "PubNub",
                            "WebHook",
                            "RC/APNS",
                            "RC/GCM"
                        ]
                    },
                    "address": {
                        "type": "string",
                        "description": "Mandatory for 'WebHook' transport type, URL of a consumer service (cannot be changed during subscription update)"
                    },
                    "encryption": {
                        "type": "boolean",
                        "description": "Optional parameter. Specifies if the message will be encrypted or not. If request contains any presence event filter the value by default is 'True' (even if specified as 'false'). If request contains only message event filters the value by default is 'False'"
                    },
                    "certificateName": {
                        "type": "string",
                        "description": "For 'RC/APNS' and 'RC/GCM' transport types. Name of a certificate"
                    },
                    "registrationId": {
                        "type": "string",
                        "description": "For 'RC/APNS' and 'RC/GCM' transport types. Identifier of a registration"
                    },
                    "verificationToken": {
                        "type": "string",
                        "description": "For 'Webhook' transport type. Subscription verification key ensuring data security"
                    }
                }
            },
            "DisabledFilterInfo": {
                "type": "object",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Event filter that is disabled for the user"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Reason why the filter is disabled for the user"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message"
                    }
                }
            },
            "NotificationDeliveryMode": {
                "type": "object",
                "properties": {
                    "transportType": {
                        "type": "string",
                        "description": "Notifications transportation provider name",
                        "enum": [
                            "PubNub",
                            "RC/APNS"
                        ]
                    },
                    "encryption": {
                        "type": "boolean",
                        "description": "Optional parameter. Specifies if the message will be encrypted or not"
                    },
                    "address": {
                        "type": "string",
                        "description": "PubNub channel name"
                    },
                    "subscriberKey": {
                        "type": "string",
                        "description": "PubNub subscriber credentials required to subscribe to the channel"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "PubNub subscriber credentials required to subscribe to the channel. Optional (for PubNub transport type only)"
                    },
                    "encryptionAlgorithm": {
                        "type": "string",
                        "description": "Encryption algorithm 'AES' (for PubNub transport type only)"
                    },
                    "encryptionKey": {
                        "type": "string",
                        "description": "Key for notification message decryption (for PubNub transport type only)"
                    }
                }
            },
            "AuthProfileResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActivePermissionResource"
                        }
                    }
                }
            },
            "AuthProfileCheckResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "successful": {
                        "type": "boolean",
                        "default": false
                    },
                    "details": {
                        "$ref": "#/components/schemas/ActivePermissionResource"
                    }
                }
            },
            "ActivePermissionResource": {
                "type": "object",
                "properties": {
                    "permission": {
                        "$ref": "#/components/schemas/PermissionIdResource"
                    },
                    "effectiveRole": {
                        "$ref": "#/components/schemas/RoleIdResource"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "RoleIdResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "PermissionIdResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "id": {
                        "type": "string"
                    },
                    "siteCompatible": {
                        "type": "string",
                        "enum": [
                            "Compatible",
                            "Incompatible",
                            "Independent"
                        ],
                        "description": "Site compatibility flag set for permission"
                    }
                }
            },
            "CompanyBusinessHoursUpdateRequest": {
                "type": "object",
                "properties": {
                    "schedule": {
                        "$ref": "#/components/schemas/CompanyBusinessHoursScheduleInfo"
                    }
                },
                "example": {
                    "schedule": {
                        "weeklyRanges": {
                            "tuesday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ],
                            "friday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ],
                            "thursday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ],
                            "wednesday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ],
                            "monday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ]
                        }
                    }
                }
            },
            "AddBlockedAllowedPhoneNumber": {
                "type": "object",
                "description": "Updates either blocked or allowed phone number list with a new phone number.",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "A blocked/allowed phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format"
                    },
                    "label": {
                        "type": "string",
                        "description": "Custom name of a blocked/allowed phone number"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a phone number",
                        "enum": [
                            "Blocked",
                            "Allowed"
                        ],
                        "default": "Blocked"
                    }
                }
            },
            "CreateAnsweringRuleRequest": {
                "type": "object",
                "required": [
                    "name",
                    "type"
                ],
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies if the rule is active or inactive. The default value is 'True'"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of an answering rule. The 'Custom' value should be specified"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of an answering rule specified by user"
                    },
                    "callers": {
                        "type": "array",
                        "description": "Answering rule will be applied when calls are received from the specified caller(s)",
                        "items": {
                            "$ref": "#/components/schemas/CallersInfoRequest"
                        }
                    },
                    "calledNumbers": {
                        "type": "array",
                        "description": "Answering rules are applied when calling to selected number(s)",
                        "items": {
                            "$ref": "#/components/schemas/CalledNumberInfo"
                        }
                    },
                    "schedule": {
                        "$ref": "#/components/schemas/ScheduleInfo"
                    },
                    "callHandlingAction": {
                        "type": "string",
                        "description": "Specifies how incoming calls are forwarded",
                        "enum": [
                            "ForwardCalls",
                            "UnconditionalForwarding",
                            "AgentQueue",
                            "TransferToExtension",
                            "TakeMessagesOnly",
                            "PlayAnnouncementOnly"
                        ]
                    },
                    "forwarding": {
                        "$ref": "#/components/schemas/ForwardingInfo"
                    },
                    "unconditionalForwarding": {
                        "$ref": "#/components/schemas/UnconditionalForwardingInfo"
                    },
                    "queue": {
                        "$ref": "#/components/schemas/QueueInfo"
                    },
                    "transfer": {
                        "$ref": "#/components/schemas/TransferredExtensionInfo"
                    },
                    "voicemail": {
                        "$ref": "#/components/schemas/VoicemailInfo"
                    },
                    "greetings": {
                        "type": "array",
                        "description": "Greetings applied for an answering rule; only predefined greetings can be applied, see Dictionary Greeting List",
                        "items": {
                            "$ref": "#/components/schemas/GreetingInfo"
                        }
                    },
                    "screening": {
                        "type": "string",
                        "description": "Call screening status. 'Off' - no call screening; 'NoCallerId' - if caller ID is missing, then callers are asked to say their name before connecting; 'UnknownCallerId' - if caller ID is not in contact list, then callers are asked to say their name before connecting; 'Always' - the callers are always asked to say their name before connecting. The default value is 'Off'",
                        "enum": [
                            "Off",
                            "NoCallerId",
                            "UnknownCallerId",
                            "Always"
                        ]
                    }
                }
            },
            "UpdateIVRPromptRequest": {
                "type": "object",
                "properties": {
                    "filename": {
                        "type": "string",
                        "description": "Name of a file to be uploaded as a prompt."
                    }
                }
            },
            "CompanyBusinessHours": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a business-hours resource "
                    },
                    "schedule": {
                        "$ref": "#/components/schemas/CompanyBusinessHoursScheduleInfo"
                    }
                },
                "example": {
                    "uri": "https.../restapi/v1.0/account/401800045008/business-hours",
                    "schedule": {
                        "weeklyRanges": {
                            "wednesday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ],
                            "friday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ],
                            "tuesday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ],
                            "monday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ],
                            "thursday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ]
                        }
                    }
                }
            },
            "CallerBlockingSettingsUpdate": {
                "type": "object",
                "description": "Returns the lists of blocked and allowed phone numbers",
                "properties": {
                    "mode": {
                        "type": "string",
                        "enum": [
                            "Specific",
                            "All"
                        ],
                        "description": "Call blocking options: either specific or all calls and faxes"
                    },
                    "noCallerId": {
                        "description": "Determines how to handle calls with no caller ID in 'Specific' mode",
                        "type": "string",
                        "enum": [
                            "BlockCallsAndFaxes",
                            "BlockFaxes",
                            "Allow"
                        ]
                    },
                    "payPhones": {
                        "type": "string",
                        "enum": [
                            "Block",
                            "Allow"
                        ],
                        "description": "Blocking settings for pay phones"
                    },
                    "greetings": {
                        "type": "array",
                        "description": "List of greetings played for blocked callers",
                        "items": {
                            "$ref": "#/components/schemas/BlockedCallerGreetingInfo"
                        }
                    }
                }
            },
            "CustomCompanyGreetingInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to an extension custom greeting"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an answering rule"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of a company greeting",
                        "enum": [
                            "Company",
                            "StartRecording",
                            "StopRecording",
                            "AutomaticRecording"
                        ]
                    },
                    "contentType": {
                        "type": "string",
                        "description": "Content media type in WAV/MP3 format",
                        "enum": [
                            "WAV",
                            "MP3"
                        ]
                    },
                    "contentUri": {
                        "type": "string",
                        "description": "Link to a greeting content (audio file)"
                    },
                    "answeringRule": {
                        "$ref": "#/components/schemas/CustomGreetingAnsweringRuleInfo"
                    },
                    "language": {
                        "$ref": "#/components/schemas/CustomCompanyGreetingLanguageInfo"
                    }
                }
            },
            "ForwardingNumberResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "id": {
                        "type": "string"
                    },
                    "phoneNumber": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "CallFlip",
                                "CallForwarding"
                            ]
                        }
                    },
                    "flipNumber": {
                        "type": "string",
                        "pattern": "[1-8]"
                    },
                    "type": {
                        "type": "string",
                        "description": "Forwarding phone number type",
                        "enum": [
                            "Home",
                            "Mobile",
                            "Work",
                            "PhoneLine",
                            "Outage",
                            "Other"
                        ]
                    }
                }
            },
            "UpdateAnsweringRuleRequest": {
                "type": "object",
                "properties": {
                    "forwarding": {
                        "$ref": "#/components/schemas/ForwardingInfoCreateRuleRequest"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies if the rule is active or inactive. The default value is 'True'"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of an answering rule specified by user"
                    },
                    "callers": {
                        "type": "array",
                        "description": "Answering rule will be applied when calls are received from the specified caller(s)",
                        "items": {
                            "$ref": "#/components/schemas/CallersInfoRequest"
                        }
                    },
                    "calledNumbers": {
                        "type": "array",
                        "description": "Answering rules are applied when calling to selected number(s)",
                        "items": {
                            "$ref": "#/components/schemas/CalledNumberInfo"
                        }
                    },
                    "schedule": {
                        "$ref": "#/components/schemas/ScheduleInfo"
                    },
                    "callHandlingAction": {
                        "type": "string",
                        "description": "Specifies how incoming calls are forwarded",
                        "enum": [
                            "ForwardCalls",
                            "UnconditionalForwarding",
                            "AgentQueue",
                            "TransferToExtension",
                            "TakeMessagesOnly",
                            "PlayAnnouncementOnly"
                        ]
                    },
                    "unconditionalForwarding": {
                        "$ref": "#/components/schemas/UnconditionalForwardingInfo"
                    },
                    "queue": {
                        "$ref": "#/components/schemas/QueueInfo"
                    },
                    "voicemail": {
                        "$ref": "#/components/schemas/VoicemailInfo"
                    },
                    "greetings": {
                        "type": "array",
                        "description": "Greetings applied for an answering rule; only predefined greetings can be applied, see Dictionary Greeting List",
                        "items": {
                            "$ref": "#/components/schemas/GreetingInfo"
                        }
                    },
                    "screening": {
                        "type": "string",
                        "description": "Call screening status. 'Off' - no call screening; 'NoCallerId' - if caller ID is missing, then callers are asked to say their name before connecting; 'UnknownCallerId' - if caller ID is not in contact list, then callers are asked to say their name before connecting; 'Always' - the callers are always asked to say their name before connecting. The default value is 'Off'",
                        "enum": [
                            "Off",
                            "NoCallerId",
                            "UnknownCallerId",
                            "Always"
                        ]
                    },
                    "showInactiveNumbers": {
                        "type": "boolean",
                        "description": "Indicates whether inactive numbers should be returned or not."
                    }
                }
            },
            "CompanyAnsweringRuleInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an answering rule"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of an answering rule"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies if the rule is active or inactive. The default value is 'True'",
                        "default": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of an answering rule",
                        "enum": [
                            "BusinessHours",
                            "AfterHours",
                            "Custom"
                        ],
                        "default": "Custom"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of an answering rule specified by user. Max number of symbols is 30. The default value is 'My Rule N' where 'N' is the first free number"
                    },
                    "callers": {
                        "type": "array",
                        "description": "Answering rule will be applied when calls are received from the specified caller(s)",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAnsweringRuleCallersInfoRequest"
                        }
                    },
                    "calledNumbers": {
                        "type": "array",
                        "description": "Answering rule will be applied when calling the specified number(s)",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAnsweringRuleCalledNumberInfoRequest"
                        }
                    },
                    "schedule": {
                        "$ref": "#/components/schemas/CompanyAnsweringRuleScheduleInfo"
                    },
                    "callHandlingAction": {
                        "type": "string",
                        "description": "Specifies how incoming calls are forwarded. The default value is 'Operator' 'Operator' - play company greeting and forward to operator extension 'Disconnect' - play company greeting and disconnect 'Bypass' - bypass greeting to go to selected extension = ['Operator', 'Disconnect', 'Bypass']",
                        "enum": [
                            "Operator",
                            "Disconnect",
                            "Bypass"
                        ]
                    },
                    "extension": {
                        "$ref": "#/components/schemas/CompanyAnsweringRuleCallersInfoRequest"
                    },
                    "greetings": {
                        "type": "array",
                        "description": "Greetings applied for an answering rule; only predefined greetings can be applied, see Dictionary Greeting List",
                        "items": {
                            "$ref": "#/components/schemas/GreetingInfo"
                        }
                    }
                }
            },
            "CallRecordingSettingsResource": {
                "type": "object",
                "properties": {
                    "onDemand": {
                        "$ref": "#/components/schemas/OnDemandResource"
                    },
                    "automatic": {
                        "$ref": "#/components/schemas/AutomaticRecordingResource"
                    },
                    "greetings": {
                        "type": "array",
                        "description": "Collection of Greeting Info",
                        "items": {
                            "$ref": "#/components/schemas/GreetingResource"
                        }
                    }
                }
            },
            "GetExtensionForwardingNumberListResponse": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of forwarding phone numbers",
                        "items": {
                            "$ref": "#/components/schemas/ForwardingNumberInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/CallHandlingNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/CallHandlingPagingInfo"
                    }
                }
            },
            "AnsweringRuleInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI to an answering rule resource"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an answering rule"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of an answering rule",
                        "enum": [
                            "BusinessHours",
                            "AfterHours",
                            "Custom"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of an answering rule specified by user"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies if an answering rule is active or inactive"
                    },
                    "schedule": {
                        "$ref": "#/components/schemas/ScheduleInfo"
                    },
                    "calledNumbers": {
                        "type": "array",
                        "description": "Answering rules are applied when calling to selected number(s)",
                        "items": {
                            "$ref": "#/components/schemas/CalledNumberInfo"
                        }
                    },
                    "callers": {
                        "type": "array",
                        "description": "Answering rules are applied when calls are received from specified caller(s)",
                        "items": {
                            "$ref": "#/components/schemas/CallersInfo"
                        }
                    },
                    "callHandlingAction": {
                        "type": "string",
                        "description": "Specifies how incoming calls are forwarded",
                        "enum": [
                            "ForwardCalls",
                            "UnconditionalForwarding",
                            "AgentQueue",
                            "TransferToExtension",
                            "TakeMessagesOnly",
                            "PlayAnnouncementOnly"
                        ]
                    },
                    "forwarding": {
                        "$ref": "#/components/schemas/ForwardingInfo"
                    },
                    "unconditionalForwarding": {
                        "$ref": "#/components/schemas/UnconditionalForwardingInfo"
                    },
                    "queue": {
                        "$ref": "#/components/schemas/QueueInfo"
                    },
                    "transfer": {
                        "$ref": "#/components/schemas/TransferredExtensionInfo"
                    },
                    "voicemail": {
                        "$ref": "#/components/schemas/VoicemailInfo"
                    },
                    "greetings": {
                        "type": "array",
                        "description": "Greetings applied for an answering rule; only predefined greetings can be applied, see Dictionary Greeting List",
                        "items": {
                            "$ref": "#/components/schemas/GreetingInfo"
                        }
                    },
                    "screening": {
                        "type": "string",
                        "description": "Call screening status. 'Off' - no call screening; 'NoCallerId' - if caller ID is missing, then callers are asked to say their name before connecting; 'UnknownCallerId' - if caller ID is not in contact list, then callers are asked to say their name before connecting; 'Always' - the callers are always asked to say their name before connecting. The default value is 'Off'",
                        "enum": [
                            "Off",
                            "NoCallerId",
                            "UnknownCallerId",
                            "Always"
                        ]
                    }
                }
            },
            "CreateForwardingNumberRequest": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "Forwarding/Call flip phone number"
                    },
                    "label": {
                        "type": "string",
                        "description": "Forwarding/Call flip number title"
                    },
                    "type": {
                        "type": "string",
                        "description": "Forwarding/Call flip phone type. If specified, 'label' attribute value is ignored. The default value is 'Other'",
                        "enum": [
                            "PhoneLine",
                            "Home",
                            "Mobile",
                            "Work",
                            "Other"
                        ]
                    },
                    "device": {
                        "$ref": "#/components/schemas/CreateForwardingNumberDeviceInfo"
                    }
                }
            },
            "CompanyAnsweringRuleRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of an answering rule specified by user. Max number of symbols is 30. The default value is 'My Rule N' where 'N' is the first free number"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies if the rule is active or inactive. The default value is 'True'",
                        "default": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of an answering rule, the default value is 'Custom' = ['BusinessHours', 'AfterHours', 'Custom']",
                        "enum": [
                            "BusinessHours",
                            "AfterHours",
                            "Custom"
                        ]
                    },
                    "callers": {
                        "type": "array",
                        "description": "Answering rule will be applied when calls are received from the specified caller(s)",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAnsweringRuleCallersInfoRequest"
                        }
                    },
                    "calledNumbers": {
                        "type": "array",
                        "description": "Answering rule will be applied when calling the specified number(s)",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAnsweringRuleCalledNumberInfo"
                        }
                    },
                    "schedule": {
                        "$ref": "#/components/schemas/CompanyAnsweringRuleScheduleInfoRequest"
                    },
                    "callHandlingAction": {
                        "type": "string",
                        "description": "Specifies how incoming calls are forwarded. The default value is 'Operator' 'Operator' - play company greeting and forward to operator extension 'Disconnect' - play company greeting and disconnect 'Bypass' - bypass greeting to go to selected extension = ['Operator', 'Disconnect', 'Bypass']",
                        "enum": [
                            "Operator",
                            "Disconnect",
                            "Bypass"
                        ]
                    },
                    "extension": {
                        "$ref": "#/components/schemas/CompanyAnsweringRuleExtensionInfo"
                    },
                    "greetings": {
                        "type": "array",
                        "description": "Greetings applied for an answering rule; only predefined greetings can be applied, see Dictionary Greeting List",
                        "items": {
                            "$ref": "#/components/schemas/GreetingInfo"
                        }
                    }
                }
            },
            "CustomUserGreetingInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a custom user greeting"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a custom user greeting"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of a custom user greeting",
                        "enum": [
                            "Introductory",
                            "Announcement",
                            "ConnectingAudio",
                            "ConnectingMessage",
                            "Voicemail",
                            "Unavailable",
                            "HoldMusic"
                        ]
                    },
                    "contentType": {
                        "type": "string",
                        "description": "Content media type in WAV/MP3 format",
                        "enum": [
                            "WAV",
                            "MP3"
                        ]
                    },
                    "contentUri": {
                        "type": "string",
                        "description": "Link to a greeting content (audio file)"
                    },
                    "answeringRule": {
                        "$ref": "#/components/schemas/CustomGreetingAnsweringRuleInfo"
                    }
                }
            },
            "IVRPrompts": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to prompts library resource"
                    },
                    "records": {
                        "type": "array",
                        "description": "List of Prompts",
                        "items": {
                            "$ref": "#/components/schemas/PromptInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/CallHandlingNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/CallHandlingPagingInfo"
                    }
                }
            },
            "IVRMenuInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an IVR Menu extension"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Link to an IVR Menu extension resource"
                    },
                    "name": {
                        "type": "string",
                        "description": "First name of an IVR Menu user"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Number of an IVR Menu extension"
                    },
                    "prompt": {
                        "$ref": "#/components/schemas/IVRMenuPromptInfo"
                    },
                    "actions": {
                        "type": "array",
                        "description": "Keys handling settings",
                        "items": {
                            "$ref": "#/components/schemas/IVRMenuActionsInfo"
                        }
                    }
                }
            },
            "BlockedAllowedPhoneNumbersList": {
                "type": "object",
                "description": "List of blocked or allowed phone numbers",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a list of blocked/allowed phone numbers resource"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BlockedAllowedPhoneNumberInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/CallHandlingNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/CallHandlingPagingInfo"
                    }
                }
            },
            "ForwardingNumberInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a forwarding/call flip phone number"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a forwarding/call flip phone number"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Forwarding/Call flip phone number"
                    },
                    "label": {
                        "type": "string",
                        "description": "Forwarding/Call flip number title"
                    },
                    "features": {
                        "type": "array",
                        "description": "Type of option this phone number is used for. Multiple values are accepted",
                        "items": {
                            "type": "string",
                            "enum": [
                                "CallFlip",
                                "CallForwarding"
                            ]
                        }
                    },
                    "flipNumber": {
                        "type": "integer",
                        "description": "Number assigned to the call flip phone number, corresponds to the shortcut dial number"
                    },
                    "type": {
                        "type": "string",
                        "description": "Forwarding phone number type",
                        "enum": [
                            "Home",
                            "Mobile",
                            "Work",
                            "PhoneLine",
                            "Outage",
                            "Other"
                        ]
                    }
                }
            },
            "UpdateForwardingNumberRequest": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "Forwarding/Call flip phone number"
                    },
                    "label": {
                        "type": "string",
                        "description": "Forwarding/Call flip number title"
                    },
                    "flipNumber": {
                        "type": "string",
                        "description": "Number assigned to the call flip phone number, corresponds to the shortcut dial number"
                    },
                    "type": {
                        "type": "string",
                        "description": "Forwarding phone number type",
                        "enum": [
                            "Home",
                            "Mobile",
                            "Work",
                            "PhoneLine",
                            "Outage",
                            "Other"
                        ]
                    }
                }
            },
            "CompanyAnsweringRuleList": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to an answering rule resource"
                    },
                    "records": {
                        "type": "array",
                        "description": "List of company answering rules",
                        "items": {
                            "$ref": "#/components/schemas/ListCompanyAnsweringRuleInfo"
                        }
                    },
                    "paging": {
                        "$ref": "#/components/schemas/CallHandlingPagingInfo"
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/CallHandlingNavigationInfo"
                    }
                }
            },
            "PromptInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Internal identifier of a prompt"
                    },
                    "id": {
                        "type": "string",
                        "description": "Link to a prompt metadata"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "Type of a prompt media content"
                    },
                    "contentUri": {
                        "type": "string",
                        "description": "Link to a prompt media content"
                    },
                    "filename": {
                        "type": "string",
                        "description": "Name of a prompt"
                    }
                }
            },
            "BulkAccountCallRecordingsResource": {
                "type": "object",
                "properties": {
                    "addedExtensions": {
                        "$ref": "#/components/schemas/CallRecordingExtensionResource"
                    },
                    "updatedExtensions": {
                        "$ref": "#/components/schemas/CallRecordingExtensionResource"
                    },
                    "removedExtensions": {
                        "$ref": "#/components/schemas/CallRecordingExtensionResource"
                    }
                }
            },
            "UserBusinessHoursUpdateRequest": {
                "type": "object",
                "required": [
                    "schedule"
                ],
                "properties": {
                    "schedule": {
                        "$ref": "#/components/schemas/UserBusinessHoursScheduleInfo"
                    }
                }
            },
            "CallerBlockingSettings": {
                "type": "object",
                "description": "Returns the lists of blocked and allowed phone numbers",
                "properties": {
                    "mode": {
                        "type": "string",
                        "enum": [
                            "Specific",
                            "All"
                        ],
                        "description": "Call blocking options: either specific or all calls and faxes"
                    },
                    "noCallerId": {
                        "description": " Determines how to handle calls with no caller ID in 'Specific' mode",
                        "type": "string",
                        "enum": [
                            "BlockCallsAndFaxes",
                            "BlockFaxes",
                            "Allow"
                        ]
                    },
                    "payPhones": {
                        "type": "string",
                        "enum": [
                            "Block",
                            "Allow"
                        ],
                        "description": "Blocking settings for pay phones"
                    },
                    "greetings": {
                        "type": "array",
                        "description": "List of greetings played for blocked callers",
                        "items": {
                            "$ref": "#/components/schemas/BlockedCallerGreetingInfo"
                        }
                    }
                }
            },
            "CompanyAnsweringRuleUpdate": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies if the rule is active or inactive. The default value is 'True'",
                        "default": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of an answering rule specified by user. Max number of symbols is 30. The default value is 'My Rule N' where 'N' is the first free number"
                    },
                    "callers": {
                        "type": "array",
                        "description": "Answering rule will be applied when calls are received from the specified caller(s)",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAnsweringRuleCallersInfoRequest"
                        }
                    },
                    "calledNumbers": {
                        "type": "array",
                        "description": "Answering rule will be applied when calling the specified number(s)",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAnsweringRuleCalledNumberInfo"
                        }
                    },
                    "schedule": {
                        "$ref": "#/components/schemas/CompanyAnsweringRuleScheduleInfoRequest"
                    },
                    "callHandlingAction": {
                        "type": "string",
                        "description": "Specifies how incoming calls are forwarded. The default value is 'Operator' 'Operator' - play company greeting and forward to operator extension 'Disconnect' - play company greeting and disconnect 'Bypass' - bypass greeting to go to selected extension = ['Operator', 'Disconnect', 'Bypass']",
                        "enum": [
                            "Operator",
                            "Disconnect",
                            "Bypass"
                        ]
                    },
                    "extension": {
                        "$ref": "#/components/schemas/CompanyAnsweringRuleCallersInfoRequest"
                    },
                    "greetings": {
                        "type": "array",
                        "description": "Greetings applied for an answering rule; only predefined greetings can be applied, see Dictionary Greeting List",
                        "items": {
                            "$ref": "#/components/schemas/GreetingInfo"
                        }
                    }
                }
            },
            "DictionaryGreetingInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a greeting"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Link to a greeting"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a greeting"
                    },
                    "usageType": {
                        "type": "string",
                        "description": "Usage type of a greeting, specifying if the greeting is applied for user extension or department extension.",
                        "enum": [
                            "UserExtensionAnsweringRule",
                            "ExtensionAnsweringRule",
                            "DepartmentExtensionAnsweringRule",
                            "CompanyAnsweringRule",
                            "CompanyAfterHoursAnsweringRule",
                            "VoicemailExtensionAnsweringRule",
                            "AnnouncementExtensionAnsweringRule"
                        ]
                    },
                    "text": {
                        "type": "string",
                        "description": "Text of a greeting, if any"
                    },
                    "contentUri": {
                        "type": "string",
                        "description": "Link to a greeting content (audio file), if any"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of a greeting, specifying the case when the greeting is played.",
                        "enum": [
                            "Introductory",
                            "Announcement",
                            "ConnectingMessage",
                            "ConnectingAudio",
                            "Voicemail",
                            "Unavailable",
                            "InterruptPrompt",
                            "HoldMusic",
                            "Company"
                        ]
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of a greeting, specifying data form. The category value 'None' specifies that greetings of a certain type ('Introductory', 'ConnectingAudio', etc.) are switched off for an extension = ['Music', 'Message', 'RingTones', 'None']",
                        "enum": [
                            "Music",
                            "Message",
                            "RingTones",
                            "None"
                        ]
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/CallHandlingNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/CallHandlingPagingInfo"
                    }
                }
            },
            "DictionaryGreetingList": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of greetings list resource"
                    },
                    "records": {
                        "type": "array",
                        "description": "List of greetings",
                        "items": {
                            "$ref": "#/components/schemas/DictionaryGreetingInfo"
                        }
                    }
                }
            },
            "CallRecordingExtensions": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to call recording extension list resource"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CallRecordingExtensionInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/CallHandlingNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/CallHandlingPagingInfo"
                    }
                }
            },
            "CallRecordingCustomGreetings": {
                "type": "object",
                "description": "Returns data on call recording custom greetings.",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CallRecordingCustomGreeting"
                        }
                    }
                }
            },
            "GetUserBusinessHoursResponse": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a business-hours resource"
                    },
                    "schedule": {
                        "$ref": "#/components/schemas/ScheduleInfoUserBusinessHours"
                    }
                },
                "example": {
                    "uri": "https.../restapi/v1.0/account/401800045008/extension/401800045008/business-hours",
                    "schedule": {
                        "weeklyRanges": {
                            "wednesday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ],
                            "friday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ],
                            "tuesday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ],
                            "monday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ],
                            "thursday": [
                                {
                                    "from": "09:00",
                                    "to": "18:00"
                                }
                            ]
                        }
                    }
                }
            },
            "UserBusinessHoursUpdateResponse": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a business-hours resource"
                    },
                    "schedule": {
                        "$ref": "#/components/schemas/UserBusinessHoursScheduleInfo"
                    }
                }
            },
            "BlockedAllowedPhoneNumberInfo": {
                "type": "object",
                "description": "Information on a blocked/allowed phone number",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a blocked/allowed phone number"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a blocked/allowed phone number"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "A blocked/allowed phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format"
                    },
                    "label": {
                        "type": "string",
                        "description": "Custom name of a blocked/allowed phone number"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a phone number",
                        "enum": [
                            "Blocked",
                            "Allowed"
                        ]
                    }
                }
            },
            "UserAnsweringRuleList": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of an answering rule list resource",
                        "example": "https://platform.ringcentral.com/restapi/v1.0/account/240913004/extension/240972004/answering-rule?page=1&perPage=100"
                    },
                    "records": {
                        "type": "array",
                        "description": "List of answering rules",
                        "items": {
                            "$ref": "#/components/schemas/UserAnsweringRuleListRecord"
                        }
                    },
                    "paging": {
                        "$ref": "#/components/schemas/UserAnsweringRuleListPaging"
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/UserAnsweringRuleListNavigation"
                    }
                }
            },
            "CallersInfoRequest": {
                "type": "object",
                "properties": {
                    "callerId": {
                        "type": "string",
                        "description": "Phone number of a caller"
                    },
                    "name": {
                        "type": "string",
                        "description": "Contact name of a caller"
                    }
                }
            },
            "CustomCompanyGreetingLanguageInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a greeting language"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Link to a greeting language"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a greeting language"
                    },
                    "localeCode": {
                        "type": "string",
                        "description": "Locale code of a greeting language"
                    }
                }
            },
            "ForwardingInfoCreateRuleRequest": {
                "type": "object",
                "properties": {
                    "notifyMySoftPhones": {
                        "type": "boolean",
                        "description": "Specifies if the first ring on desktop/mobile apps is enabled. The default value is 'True'"
                    },
                    "notifyAdminSoftPhones": {
                        "type": "boolean",
                        "description": "Specifies if the administrator's softphone (desktop application) is notified before forwarding the incoming call to desk phones and forwarding numbers. The default value is 'True'"
                    },
                    "softPhonesRingCount": {
                        "type": "integer",
                        "default": 1,
                        "description": "Specifies delay between ring on apps and starting of a call forwarding"
                    },
                    "ringingMode": {
                        "type": "string",
                        "description": "Specifies the order in which forwarding numbers ring. 'Sequentially' means that forwarding numbers are ringing one at a time, in order of priority. 'Simultaneously' means that forwarding numbers are ringing all at the same time. The default value is 'Sequentially'",
                        "enum": [
                            "Sequentially",
                            "Simultaneously"
                        ]
                    },
                    "rules": {
                        "type": "array",
                        "description": "Information on a call forwarding rule",
                        "items": {
                            "$ref": "#/components/schemas/RuleInfoCreateRuleRequest"
                        }
                    },
                    "mobileTimeout": {
                        "type": "boolean",
                        "description": "Specifies if mobile timeout is activated for the rule"
                    }
                }
            },
            "AutomaticRecordingResource": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Flag for controling Automatic Call Recording settings"
                    },
                    "outboundCallTones": {
                        "type": "boolean",
                        "description": "Flag for controlling 'Play Call Recording Announcement for Outbound Calls' settings"
                    },
                    "outboundCallAnnouncement": {
                        "type": "boolean",
                        "description": "Flag for controlling 'Play periodic tones for outbound calls' settings"
                    },
                    "allowMute": {
                        "type": "boolean",
                        "description": "Flag for controlling 'Allow mute in auto call recording' settings"
                    },
                    "extensionCount": {
                        "type": "integer",
                        "description": "Total amount of extension that are used in call recordings"
                    }
                }
            },
            "ForwardingInfo": {
                "type": "object",
                "properties": {
                    "notifyMySoftPhones": {
                        "type": "boolean",
                        "description": "Specifies if the user's softphone(s) are notified before forwarding the incoming call to desk phones and forwarding numbers"
                    },
                    "notifyAdminSoftPhones": {
                        "type": "boolean",
                        "description": "Specifies if the administrator's softphone is notified before forwarding the incoming call to desk phones and forwarding numbers. The default value is 'False'"
                    },
                    "softPhonesRingCount": {
                        "type": "integer",
                        "description": "Number of rings before forwarding starts"
                    },
                    "ringingMode": {
                        "type": "string",
                        "description": "Specifies the order in which forwarding numbers ring. 'Sequentially' means that forwarding numbers are ringing one at a time, in order of priority. 'Simultaneously' means that forwarding numbers are ring all at the same time",
                        "enum": [
                            "Sequentially",
                            "Simultaneously"
                        ]
                    },
                    "rules": {
                        "type": "array",
                        "description": "Information on a call forwarding rule",
                        "items": {
                            "$ref": "#/components/schemas/RuleInfo"
                        }
                    },
                    "mobileTimeout": {
                        "type": "boolean",
                        "description": "Specifies if mobile timeout is activated for the rule"
                    }
                }
            },
            "UserAnsweringRuleListPaging": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result is empty (because non-existent page was specified or perPage=0 was requested)",
                        "example": 1
                    },
                    "totalPages": {
                        "type": "integer",
                        "description": "The total number of pages in a dataset.",
                        "example": 1
                    },
                    "perPage": {
                        "type": "integer",
                        "description": "Current page size, describes how many items are in each page. Default value is 100. Maximum value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000) is applied",
                        "example": 100
                    },
                    "totalElements": {
                        "type": "integer",
                        "description": "The total number of elements in a dataset.",
                        "example": 1
                    },
                    "pageStart": {
                        "type": "integer",
                        "description": "The zero-based number of the first element on the current page. Omitted if the page is omitted or result is empty",
                        "example": 0
                    },
                    "pageEnd": {
                        "type": "integer",
                        "description": "The zero-based index of the last element on the current page. Omitted if the page is omitted or result is empty",
                        "example": 0
                    }
                }
            },
            "CalledNumberInfo": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "Called phone number"
                    }
                }
            },
            "GreetingResource": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "StartRecording",
                            "StopRecording",
                            "AutomaticRecording"
                        ]
                    },
                    "mode": {
                        "type": "string",
                        "enum": [
                            "Default",
                            "Custom"
                        ],
                        "description": "'Default' value specifies that all greetings of that type (in all languages) are default, if at least one greeting (in any language) of the specified type is custom, then 'Custom' value is returned."
                    }
                }
            },
            "CallHandlingNavigationInfo": {
                "type": "object",
                "properties": {
                    "firstPage": {
                        "$ref": "#/components/schemas/CallHandlingNavigationInfoUri"
                    },
                    "nextPage": {
                        "$ref": "#/components/schemas/CallHandlingNavigationInfoUri"
                    },
                    "previousPage": {
                        "$ref": "#/components/schemas/CallHandlingNavigationInfoUri"
                    },
                    "lastPage": {
                        "$ref": "#/components/schemas/CallHandlingNavigationInfoUri"
                    }
                }
            },
            "CreateForwardingNumberDeviceInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the other extension device"
                    }
                }
            },
            "UserBusinessHoursScheduleInfo": {
                "type": "object",
                "properties": {
                    "weeklyRanges": {
                        "$ref": "#/components/schemas/WeeklyScheduleInfo"
                    }
                }
            },
            "CallRecordingExtensionInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Link to an extension resource"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Number of an extension"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of an extension"
                    }
                }
            },
            "VoicemailInfo": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "If 'True' then voicemails are allowed to be received"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/RecipientInfo"
                    }
                }
            },
            "CompanyAnsweringRuleCalledNumberInfoRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an account phone number"
                    }
                }
            },
            "IVRMenuActionsInfo": {
                "type": "object",
                "properties": {
                    "input": {
                        "type": "string",
                        "description": "Key. The following values are supported: numeric: '1' to '9' Star Hash NoInput "
                    },
                    "action": {
                        "type": "string",
                        "description": "Internal identifier of an answering rule",
                        "enum": [
                            "Connect",
                            "Voicemail",
                            "DialByName",
                            "Transfer",
                            "Repeat",
                            "ReturnToRoot",
                            "ReturnToPrevious",
                            "Disconnect"
                        ]
                    },
                    "extension": {
                        "$ref": "#/components/schemas/IVRMenuExtensionInfo"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "For 'Transfer' action only. PSTN number in E.164 format"
                    }
                }
            },
            "UserAnsweringRuleListNavigation": {
                "type": "object",
                "properties": {
                    "firstPage": {
                        "$ref": "#/components/schemas/UserAnsweringRuleListNavigationPage"
                    },
                    "nextPage": {
                        "$ref": "#/components/schemas/UserAnsweringRuleListNavigationPage"
                    },
                    "previousPage": {
                        "$ref": "#/components/schemas/UserAnsweringRuleListNavigationPage"
                    },
                    "lastPage": {
                        "$ref": "#/components/schemas/UserAnsweringRuleListNavigationPage"
                    }
                }
            },
            "CompanyBusinessHoursScheduleInfo": {
                "type": "object",
                "properties": {
                    "weeklyRanges": {
                        "$ref": "#/components/schemas/WeeklyScheduleInfo"
                    }
                }
            },
            "CompanyAnsweringRuleScheduleInfo": {
                "type": "object",
                "properties": {
                    "weeklyRanges": {
                        "$ref": "#/components/schemas/CompanyAnsweringRuleWeeklyScheduleInfoRequest"
                    },
                    "ranges": {
                        "description": "Specific data ranges. If specified, weeklyRanges cannot be specified",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RangesInfo"
                        }
                    },
                    "ref": {
                        "type": "string",
                        "description": "Reference to Business Hours or After Hours schedule = ['BusinessHours', 'AfterHours']",
                        "enum": [
                            "BusinessHours",
                            "AfterHours"
                        ]
                    }
                }
            },
            "OnDemandResource": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Flag for controlling OnDemand Call Recording settings"
                    }
                }
            },
            "CallHandlingPagingInfo": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result is empty (because non-existent page was specified or perPage=0 was requested)"
                    },
                    "perPage": {
                        "type": "integer",
                        "description": "Current page size, describes how many items are in each page. Default value is 100. Maximum value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000) is applied"
                    },
                    "pageStart": {
                        "type": "integer",
                        "description": "The zero-based number of the first element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "pageEnd": {
                        "type": "integer",
                        "description": "The zero-based index of the last element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "totalPages": {
                        "type": "integer",
                        "description": "The total number of pages in a dataset. May be omitted for some resources due to performance reasons"
                    },
                    "totalElements": {
                        "type": "integer",
                        "description": "The total number of elements in a dataset. May be omitted for some resource due to performance reasons"
                    }
                }
            },
            "CompanyAnsweringRuleExtensionInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    }
                }
            },
            "BlockedCallerGreetingInfo": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of a greeting"
                    },
                    "preset": {
                        "$ref": "#/components/schemas/PresetInfo"
                    }
                }
            },
            "CompanyAnsweringRuleCalledNumberInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an account phone number"
                    }
                }
            },
            "IVRMenuPromptInfo": {
                "type": "object",
                "properties": {
                    "mode": {
                        "type": "string",
                        "description": "Prompt mode: custom media or text",
                        "enum": [
                            "Audio",
                            "TextToSpeech"
                        ]
                    },
                    "audio": {
                        "$ref": "#/components/schemas/PromptLanguageInfo"
                    },
                    "text": {
                        "type": "string",
                        "description": "For 'TextToSpeech' mode only. Prompt text"
                    },
                    "language": {
                        "$ref": "#/components/schemas/AudioPromptInfo"
                    }
                }
            },
            "ListCompanyAnsweringRuleInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an answering rule"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of an answering rule"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies if the rule is active or inactive. The default value is 'True'",
                        "default": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of an answering rule, the default value is 'Custom' = ['BusinessHours', 'AfterHours', 'Custom']",
                        "enum": [
                            "BusinessHours",
                            "AfterHours",
                            "Custom"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of an answering rule specified by user. Max number of symbols is 30. The default value is 'My Rule N' where 'N' is the first free number"
                    }
                }
            },
            "CallRecordingCustomGreeting": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "StartRecording",
                            "StopRecording",
                            "AutomaticRecording"
                        ]
                    },
                    "custom": {
                        "$ref": "#/components/schemas/CallRecordingCustomGreetingData"
                    },
                    "language": {
                        "$ref": "#/components/schemas/CallRecordingCustomGreetingLanguage"
                    }
                }
            },
            "QueueInfo": {
                "type": "object",
                "properties": {
                    "transferMode": {
                        "type": "string",
                        "description": "Specifies how calls are transferred to group members",
                        "enum": [
                            "Rotating",
                            "Simultaneous",
                            "FixedOrder"
                        ]
                    },
                    "fixedOrderAgents": {
                        "type": "array",
                        "description": "Information on a call forwarding rule",
                        "items": {
                            "$ref": "#/components/schemas/FixedOrderAgents"
                        }
                    },
                    "holdAudioInterruptionMode": {
                        "type": "string",
                        "description": "Connecting audio interruption mode",
                        "enum": [
                            "Never",
                            "WhenMusicEnds",
                            "Periodically"
                        ]
                    },
                    "holdAudioInterruptionPeriod": {
                        "type": "integer",
                        "description": "Connecting audio interruption message period in seconds"
                    },
                    "holdTimeExpirationAction": {
                        "type": "string",
                        "description": "Specifies the type of action to be taken after the hold time (waiting for an available call queue member) expires. If 'TransferToExtension' option is selected, the extension specified in `transfer` field is used",
                        "enum": [
                            "TransferToExtension",
                            "Voicemail"
                        ],
                        "default": "Voicemail"
                    },
                    "agentTimeout": {
                        "type": "integer",
                        "description": "Maximum time in seconds to wait for a call queue member before trying the next member"
                    },
                    "wrapUpTime": {
                        "type": "integer",
                        "description": "Minimum post-call wrap up time in seconds before agent status is automatically set; the value range is from 180 to 300"
                    },
                    "holdTime": {
                        "type": "integer",
                        "description": "Maximum hold time in seconds to wait for an available call queue member"
                    },
                    "maxCallers": {
                        "type": "integer",
                        "description": "Maximum count of callers on hold; the limitation is 25 callers"
                    },
                    "maxCallersAction": {
                        "type": "string",
                        "description": "Action which should be taken if count of callers on hold exceeds the maximum",
                        "enum": [
                            "Voicemail",
                            "Announcement"
                        ]
                    }
                }
            },
            "TransferredExtensionInfo": {
                "type": "object",
                "properties": {
                    "extension": {
                        "$ref": "#/components/schemas/ExtensionInfo"
                    }
                }
            },
            "GreetingInfo": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of a greeting, specifying the case when the greeting is played.",
                        "enum": [
                            "Introductory",
                            "Announcement",
                            "ConnectingMessage",
                            "ConnectingAudio",
                            "Voicemail",
                            "Unavailable",
                            "InterruptPrompt",
                            "HoldMusic",
                            "Custom",
                            "Company",
                            "BlockedCallersSpecific",
                            "BlockedCallersAll",
                            "BlockedNoCallerId",
                            "BlockedPayPhones",
                            "StartRecording",
                            "StopRecording",
                            "AutomaticRecording"
                        ]
                    },
                    "usageType": {
                        "type": "string",
                        "description": "Usage type of a greeting, specifying if the greeting is applied to user extension or department extension.",
                        "enum": [
                            "UserExtensionAnsweringRule",
                            "ExtensionAnsweringRule",
                            "DepartmentExtensionAnsweringRule",
                            "CompanyAnsweringRule",
                            "CompanyAfterHoursAnsweringRule",
                            "VoicemailExtensionAnsweringRule",
                            "AnnouncementExtensionAnsweringRule"
                        ]
                    },
                    "preset": {
                        "$ref": "#/components/schemas/PresetInfo"
                    }
                }
            },
            "CustomGreetingAnsweringRuleInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of an answering rule"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an answering rule"
                    }
                }
            },
            "CompanyAnsweringRuleCallersInfoRequest": {
                "type": "object",
                "properties": {
                    "callerId": {
                        "type": "string",
                        "description": "Phone number of a caller"
                    },
                    "name": {
                        "type": "string",
                        "description": "Displayed name for a caller ID"
                    }
                }
            },
            "CompanyAnsweringRuleScheduleInfoRequest": {
                "type": "object",
                "properties": {
                    "weeklyRanges": {
                        "$ref": "#/components/schemas/CompanyAnsweringRuleWeeklyScheduleInfoRequest"
                    },
                    "ranges": {
                        "description": "Specific data ranges. If specified, weeklyRanges cannot be specified",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RangesInfo"
                        }
                    },
                    "ref": {
                        "type": "string",
                        "description": "Reference to Business Hours or After Hours schedule",
                        "enum": [
                            "BusinessHours",
                            "AfterHours"
                        ]
                    }
                }
            },
            "CallRecordingExtensionResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    },
                    "uri": {
                        "type": "string"
                    },
                    "extensionNumber": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "callDirection": {
                        "type": "string",
                        "description": "Direction of call",
                        "enum": [
                            "Outbound",
                            "Inbound",
                            "All"
                        ]
                    }
                }
            },
            "ScheduleInfoUserBusinessHours": {
                "type": "object",
                "properties": {
                    "weeklyRanges": {
                        "$ref": "#/components/schemas/WeeklyScheduleInfo"
                    }
                }
            },
            "UserAnsweringRuleListRecord": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI to an answering rule resource",
                        "example": "https://platform.ringcentral.com/restapi/v1.0/account/240913004/extension/240972004/answering-rule/business-hours-rule"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an asnwering rule",
                        "example": "business-hours-rule"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of an answering rule",
                        "enum": [
                            "BusinessHours",
                            "AfterHours",
                            "Custom"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of an answering rule specified by user"
                    },
                    "enabled": {
                        "description": "Specifies if an answering rule is active or inactive",
                        "type": "boolean"
                    }
                }
            },
            "ScheduleInfo": {
                "type": "object",
                "properties": {
                    "weeklyRanges": {
                        "$ref": "#/components/schemas/WeeklyScheduleInfo"
                    },
                    "ranges": {
                        "description": "Specific data ranges",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RangesInfo"
                        }
                    },
                    "ref": {
                        "type": "string",
                        "description": "The user's schedule specified for business hours or after hours; it can also be set/retrieved calling the corresponding method",
                        "enum": [
                            "BusinessHours",
                            "AfterHours"
                        ]
                    }
                }
            },
            "UnconditionalForwardingInfo": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number to which the call is forwarded"
                    }
                }
            },
            "CallersInfo": {
                "type": "object",
                "properties": {
                    "callerId": {
                        "type": "string",
                        "description": "Phone number of a caller"
                    },
                    "name": {
                        "type": "string",
                        "description": "Contact name of a caller"
                    }
                }
            },
            "AudioPromptInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to an prompt audio file"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an prompt"
                    }
                }
            },
            "CallRecordingCustomGreetingLanguage": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a language"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a language"
                    },
                    "name": {
                        "type": "string",
                        "description": "Language name"
                    },
                    "localeCode": {
                        "type": "string",
                        "description": "Language locale code"
                    }
                }
            },
            "RuleInfoCreateRuleRequest": {
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "Forwarding number (or group) ordinal. Not returned for inactive numbers"
                    },
                    "ringCount": {
                        "type": "integer",
                        "description": "Number of rings for a forwarding number (or group). For inactive numbers the default value ('4') is returned"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Phone number status"
                    },
                    "forwardingNumbers": {
                        "type": "array",
                        "description": "Forwarding number (or group) data",
                        "items": {
                            "$ref": "#/components/schemas/ForwardingNumberInfoRulesCreateRuleRequest"
                        }
                    }
                }
            },
            "RuleInfo": {
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "Forwarding number (or group) ordinal"
                    },
                    "ringCount": {
                        "type": "integer",
                        "description": "Number of rings for a forwarding number (or group)"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Forwarding number status. Returned only if `showInactiveNumbers` is set to `true`"
                    },
                    "forwardingNumbers": {
                        "type": "array",
                        "description": "Forwarding number (or group) data",
                        "items": {
                            "$ref": "#/components/schemas/CreateAnsweringRuleForwardingNumberInfo"
                        }
                    }
                }
            },
            "CallHandlingNavigationInfoUri": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string"
                    }
                }
            },
            "UserAnsweringRuleListNavigationPage": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "example": "https://platform.ringcentral.com/restapi/v1.0/account/240913004/extension/240972004/answering-rule?page=1&perPage=100"
                    }
                }
            },
            "RecipientInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a recipient extension resource"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a recipient extension"
                    }
                }
            },
            "IVRMenuExtensionInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to an extension resource"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    }
                }
            },
            "PromptLanguageInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a prompt language"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a language"
                    },
                    "name": {
                        "type": "string",
                        "description": "Language name"
                    },
                    "localeCode": {
                        "type": "string",
                        "description": "Language locale code"
                    }
                }
            },
            "CallRecordingCustomGreetingData": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a custom company greeting"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a custom company greeting"
                    }
                }
            },
            "FixedOrderAgents": {
                "type": "object",
                "properties": {
                    "extension": {
                        "$ref": "#/components/schemas/ExtensionInfo"
                    },
                    "index": {
                        "type": "integer",
                        "description": "Ordinal of an agent (call queue member)"
                    }
                }
            },
            "WeeklyScheduleInfo": {
                "type": "object",
                "properties": {
                    "monday": {
                        "type": "array",
                        "description": "Time intervals for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/TimeInterval"
                        }
                    },
                    "tuesday": {
                        "type": "array",
                        "description": "Time intervals for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/TimeInterval"
                        }
                    },
                    "wednesday": {
                        "type": "array",
                        "description": "Time intervals for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/TimeInterval"
                        }
                    },
                    "thursday": {
                        "type": "array",
                        "description": "Time intervals for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/TimeInterval"
                        }
                    },
                    "friday": {
                        "type": "array",
                        "description": "Time intervals for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/TimeInterval"
                        }
                    },
                    "saturday": {
                        "type": "array",
                        "description": "Time intervals for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/TimeInterval"
                        }
                    },
                    "sunday": {
                        "type": "array",
                        "description": "Time intervals for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/TimeInterval"
                        }
                    }
                }
            },
            "CompanyAnsweringRuleWeeklyScheduleInfoRequest": {
                "type": "object",
                "properties": {
                    "monday": {
                        "type": "array",
                        "description": "Time interval for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAnsweringRuleTimeIntervalRequest"
                        }
                    },
                    "tuesday": {
                        "type": "array",
                        "description": "Time interval for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAnsweringRuleTimeIntervalRequest"
                        }
                    },
                    "wednesday": {
                        "type": "array",
                        "description": "Time interval for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAnsweringRuleTimeIntervalRequest"
                        }
                    },
                    "thursday": {
                        "type": "array",
                        "description": "Time interval for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAnsweringRuleTimeIntervalRequest"
                        }
                    },
                    "friday": {
                        "type": "array",
                        "description": "Time interval for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAnsweringRuleTimeIntervalRequest"
                        }
                    },
                    "saturday": {
                        "type": "array",
                        "description": "Time interval for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAnsweringRuleTimeIntervalRequest"
                        }
                    },
                    "sunday": {
                        "type": "array",
                        "description": "Time interval for a particular day",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAnsweringRuleTimeIntervalRequest"
                        }
                    }
                }
            },
            "RangesInfo": {
                "type": "object",
                "properties": {
                    "from": {
                        "type": "string",
                        "description": "Starting datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*"
                    },
                    "to": {
                        "type": "string",
                        "description": "Ending datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), for example *2018-10-29T14:00:00*, *2018-10-29T14:00:00Z*, *2018-10-29T14:00:00+0100*"
                    }
                }
            },
            "PresetInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a greeting resource"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a greeting"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a greeting"
                    }
                }
            },
            "ExtensionInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of an extension"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Number of department extension"
                    },
                    "partnerId": {
                        "type": "string",
                        "description": "For Partner Applications Internal identifier of an extension created by partner. The RingCentral supports the mapping of accounts and stores the corresponding account ID/extension ID for each partner ID of a client application. In request URIs partner IDs are accepted instead of regular RingCentral native IDs as path parameters using pid = XXX clause. Though in response URIs contain the corresponding account IDs and extension IDs. In all request and response bodies these values are reflected via partnerId attributes of account and extension"
                    }
                }
            },
            "TimeInterval": {
                "type": "object",
                "properties": {
                    "from": {
                        "type": "string",
                        "description": "Time in format hh:mm"
                    },
                    "to": {
                        "type": "string",
                        "description": "Time in format hh:mm"
                    }
                }
            },
            "CompanyAnsweringRuleTimeIntervalRequest": {
                "type": "object",
                "properties": {
                    "from": {
                        "type": "string",
                        "description": "Time in format hh:mm"
                    },
                    "to": {
                        "type": "string",
                        "description": "Time in format hh:mm"
                    }
                }
            },
            "ForwardingNumberInfoRulesCreateRuleRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a forwarding number"
                    },
                    "type": {
                        "type": "string",
                        "description": "Forwarding phone number type",
                        "enum": [
                            "Home",
                            "Mobile",
                            "Work",
                            "PhoneLine",
                            "Outage",
                            "Other"
                        ]
                    }
                }
            },
            "CreateAnsweringRuleForwardingNumberInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a forwarding number"
                    }
                }
            },
            "CreateSipRegistrationRequest": {
                "type": "object",
                "required": [
                    "device",
                    "sipInfo"
                ],
                "properties": {
                    "device": {
                        "$ref": "#/components/schemas/DeviceInfoRequest"
                    },
                    "sipInfo": {
                        "type": "array",
                        "description": "SIP settings for device",
                        "items": {
                            "$ref": "#/components/schemas/SIPInfoRequest"
                        }
                    }
                }
            },
            "CreateSipRegistrationResponse": {
                "type": "object",
                "required": [
                    "sipFlags",
                    "sipInfo"
                ],
                "properties": {
                    "pollingInterval": {
                        "type": "integer",
                        "description": "Suggested interval in seconds to periodically call SIP-provision API and update the local cache"
                    },
                    "sipErrorCodes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sipInfo": {
                        "type": "array",
                        "description": "SIP settings for device",
                        "items": {
                            "$ref": "#/components/schemas/SIPInfoResponse"
                        }
                    },
                    "sipFlags": {
                        "type": "array",
                        "description": "SIP flags data",
                        "items": {
                            "$ref": "#/components/schemas/SIPFlagsResponse"
                        }
                    }
                }
            },
            "DeviceInfoRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Device unique identifier, retrieved on previous session (if any)"
                    },
                    "appExternalId": {
                        "type": "string",
                        "description": "For iOS devices only Certificate name (used by iOS applications for APNS subscription)"
                    },
                    "computerName": {
                        "type": "string",
                        "description": "For SoftPhone only Computer name"
                    }
                }
            },
            "SIPInfoRequest": {
                "type": "object",
                "properties": {
                    "transport": {
                        "type": "string",
                        "description": "Supported transport. SIP info will be returned for this transport if supported",
                        "enum": [
                            "UDP",
                            "TCP",
                            "TLS",
                            "WS",
                            "WSS"
                        ]
                    }
                }
            },
            "SIPInfoResponse": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "User credentials"
                    },
                    "password": {
                        "type": "string",
                        "description": "User password"
                    },
                    "authorizationId": {
                        "type": "string",
                        "description": "Identifier for SIP authorization"
                    },
                    "domain": {
                        "type": "string",
                        "description": "SIP domain"
                    },
                    "outboundProxy": {
                        "type": "string",
                        "description": "SIP outbound proxy"
                    },
                    "transport": {
                        "type": "string",
                        "description": "Preferred transport. SIP info will be returned for this transport if supported",
                        "enum": [
                            "UDP",
                            "TCP",
                            "TLS",
                            "WS",
                            "WSS"
                        ]
                    },
                    "certificate": {
                        "type": "string",
                        "description": "For TLS transport only Base64 encoded certificate"
                    },
                    "switchBackInterval": {
                        "type": "integer",
                        "description": "The interval in seconds after which the app must try to switch back to primary proxy if it was previously switched to backup. If this parameter is not returned, the app must stay on backup proxy and try to switch to primary proxy after the next SIP-provision call."
                    }
                }
            },
            "SIPFlagsResponse": {
                "type": "object",
                "properties": {
                    "voipFeatureEnabled": {
                        "type": "string",
                        "description": "If 'True' VoIP calling feature is enabled",
                        "enum": [
                            "True",
                            "False"
                        ]
                    },
                    "voipCountryBlocked": {
                        "type": "string",
                        "description": "If 'True' the request is sent from IP address of a country blocked for VoIP calling",
                        "enum": [
                            "True",
                            "False"
                        ]
                    },
                    "outboundCallsEnabled": {
                        "type": "string",
                        "description": "If 'True' outbound calls are enabled",
                        "enum": [
                            "True",
                            "False"
                        ]
                    }
                }
            },
            "GetConferencingInfoResponse": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a conferencing"
                    },
                    "allowJoinBeforeHost": {
                        "type": "boolean",
                        "description": "Determines if host user allows conference participants to join before the host"
                    },
                    "hostCode": {
                        "type": "string",
                        "description": "Access code for a host user"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Internal parameter specifying conferencing engine"
                    },
                    "participantCode": {
                        "type": "string",
                        "description": "Access code for any participant"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Primary conference phone number for user's home country returned in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format"
                    },
                    "tapToJoinUri": {
                        "type": "string",
                        "description": "Short URL leading to the service web page Tap to Join for audio conference bridge"
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "description": "List of multiple dial-in phone numbers to connect to audio conference service, relevant for user's brand. Each number is given with the country and location information, in order to let the user choose the less expensive way to connect to a conference. The first number in the list is the primary conference number, that is default and domestic",
                        "items": {
                            "$ref": "#/components/schemas/PhoneNumberInfoConferencing"
                        }
                    }
                }
            },
            "LanguageList": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of the language list resource"
                    },
                    "records": {
                        "type": "array",
                        "description": "Language data",
                        "items": {
                            "$ref": "#/components/schemas/LanguageInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "LanguageInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a language"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a language"
                    },
                    "greeting": {
                        "type": "boolean",
                        "description": "Indicates whether a language is available as greeting language"
                    },
                    "formattingLocale": {
                        "type": "boolean",
                        "description": "Indicates whether a language is available as formatting locale"
                    },
                    "localeCode": {
                        "type": "string",
                        "description": "Localization code of a language"
                    },
                    "name": {
                        "type": "string",
                        "description": "Official name of a language"
                    },
                    "ui": {
                        "type": "boolean",
                        "description": "Indicates whether a language is available as UI language"
                    }
                }
            },
            "PagingOnlyGroupDevices": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of paging devices assigned to this group",
                        "items": {
                            "$ref": "#/components/schemas/PagingDeviceInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "ExtensionUpdateRequest": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "Disabled",
                            "Enabled",
                            "NotActivated"
                        ]
                    },
                    "statusInfo": {
                        "$ref": "#/components/schemas/ExtensionStatusInfo"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Type of suspension"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Free Form user comment"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Extension number available"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ContactInfoUpdateRequest"
                    },
                    "regionalSettings": {
                        "$ref": "#/components/schemas/ExtensionRegionalSettingRequest"
                    },
                    "setupWizardState": {
                        "type": "string",
                        "enum": [
                            "NotStarted",
                            "Incomplete",
                            "Completed"
                        ]
                    },
                    "partnerId": {
                        "type": "string",
                        "description": " Extension partner identifier"
                    },
                    "ivrPin": {
                        "type": "string",
                        "description": "IVR PIN"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for extension"
                    },
                    "callQueueInfo": {
                        "$ref": "#/components/schemas/CallQueueInfoRequest"
                    },
                    "transition": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserTransitionInfo"
                        }
                    }
                }
            },
            "BulkAssignAutomaticaLocationUpdatesUsers": {
                "type": "object",
                "properties": {
                    "enabledUserIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "disabledUserIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "SwitchInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a network switch"
                    },
                    "chassisId": {
                        "type": "string",
                        "description": "Unique identifier of a network switch"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a network switch"
                    },
                    "site": {
                        "$ref": "#/components/schemas/SwitchSiteInfo"
                    },
                    "emergencyAddress": {
                        "$ref": "#/components/schemas/LocationUpdatesEmergencyAddressInfo"
                    },
                    "emergencyLocationId": {
                        "type": "string",
                        "description": "Emergency response location (address) internal identifier. Only one of a pair `emergencyAddress` or `emergencyLocationId` should be specified, otherwise the error is returned"
                    }
                }
            },
            "UpdateMultipleWirelessPointsResponse": {
                "type": "object",
                "properties": {
                    "task": {
                        "$ref": "#/components/schemas/BulkTaskInfo"
                    }
                }
            },
            "CallMonitoringGroupMemberList": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records",
                    "uri"
                ],
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a call monitoring group members resource"
                    },
                    "records": {
                        "type": "array",
                        "description": "List of a call monitoring group members",
                        "items": {
                            "$ref": "#/components/schemas/CallMonitoringGroupMemberInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "GetCountryInfoDictionaryResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a country"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a country"
                    },
                    "callingCode": {
                        "type": "string",
                        "description": "Country calling code defined by ITU-T recommendations [E.123](https://www.itu.int/rec/T-REC-E.123-200102-I/en) and [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I)"
                    },
                    "emergencyCalling": {
                        "type": "boolean",
                        "description": "Emergency calling feature availability/emergency address requirement indicator"
                    },
                    "isoCode": {
                        "type": "string",
                        "description": "Country code according to the ISO standard, see [ISO 3166](https://www.iso.org/iso-3166-country-codes.html)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Official name of a country"
                    },
                    "numberSelling": {
                        "type": "boolean",
                        "description": "Determines whether phone numbers are available for a country"
                    },
                    "loginAllowed": {
                        "type": "boolean",
                        "description": "Specifies whether login with the phone numbers of this country is enabled or not"
                    },
                    "signupAllowed": {
                        "type": "boolean",
                        "description": "Indicates whether signup/billing is allowed for a country"
                    },
                    "freeSoftphoneLine": {
                        "type": "boolean",
                        "description": "Specifies if free phone line for softphone is available for a country or not"
                    }
                }
            },
            "GetStateListResponse": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of states",
                        "items": {
                            "$ref": "#/components/schemas/GetStateInfoResponse"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "GetStateInfoResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a state"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a state"
                    },
                    "country": {
                        "$ref": "#/components/schemas/GetCountryInfoState"
                    },
                    "isoCode": {
                        "type": "string",
                        "description": "Short code for a state (2-letter usually)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Official name of a state"
                    }
                }
            },
            "NetworkInfo": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "site": {
                        "$ref": "#/components/schemas/AutomaticLocationUpdatesSiteInfo"
                    },
                    "publicIpRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublicIpRangeInfo"
                        }
                    },
                    "privateIpRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PrivateIpRangeInfo"
                        }
                    }
                }
            },
            "AssignMultipleDevicesAutomaticLocationUpdates": {
                "type": "object",
                "properties": {
                    "enabledDeviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of common devices for feature activation"
                        }
                    },
                    "disabledDeviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of common devices for feature disabling"
                        }
                    }
                }
            },
            "UserTemplates": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records"
                ],
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to user templates resource"
                    },
                    "records": {
                        "type": "array",
                        "description": "List of user templates",
                        "items": {
                            "$ref": "#/components/schemas/TemplateInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "ListDevicesAutomaticLocationUpdates": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to devices resource"
                    },
                    "records": {
                        "type": "array",
                        "description": "List of users' devices with the current status of Emergency Address Auto Update Feature",
                        "items": {
                            "$ref": "#/components/schemas/AutomaticLocationUpdatesDeviceInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "UpdateSwitchInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "internal identifier of a switch"
                    },
                    "chassisId": {
                        "type": "string",
                        "description": "Unique identifier of a network switch. The supported formats are: XX:XX:XX:XX:XX:XX (symbols 0-9 and A-F) for MAC address and X.X.X.X for IP address (symbols 0-255)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a network switch"
                    },
                    "site": {
                        "$ref": "#/components/schemas/SwitchSiteInfo"
                    },
                    "emergencyAddress": {
                        "$ref": "#/components/schemas/LocationUpdatesEmergencyAddressInfoRequest"
                    },
                    "emergencyLocationId": {
                        "type": "string",
                        "description": "Emergency response location (address) internal identifier. Only one of a pair `emergencyAddress` or `emergencyLocationId` should be specified, otherwise the error is returned"
                    }
                }
            },
            "NotificationSettingsUpdateRequest": {
                "type": "object",
                "properties": {
                    "emailAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of notification recipient email addresses"
                    },
                    "smsEmailAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of notification recipient email addresses"
                    },
                    "advancedMode": {
                        "type": "boolean",
                        "description": "Specifies notifications settings mode. If 'True' then advanced mode is on, it allows using different emails and/or phone numbers for each notification type. If 'False' then basic mode is on. Advanced mode settings are returned in both modes, if specified once, but if basic mode is switched on, they are not applied "
                    },
                    "voicemails": {
                        "$ref": "#/components/schemas/VoicemailsInfo"
                    },
                    "inboundFaxes": {
                        "$ref": "#/components/schemas/InboundFaxesInfo"
                    },
                    "outboundFaxes": {
                        "$ref": "#/components/schemas/OutboundFaxesInfo"
                    },
                    "inboundTexts": {
                        "$ref": "#/components/schemas/InboundTextsInfo"
                    },
                    "missedCalls": {
                        "$ref": "#/components/schemas/MissedCallsInfo"
                    }
                }
            },
            "ExtensionCreationRequest": {
                "type": "object",
                "required": [
                    "type",
                    "contact"
                ],
                "properties": {
                    "contact": {
                        "$ref": "#/components/schemas/ContactInfoCreationRequest"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Number of extension"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for extension. If not specified, the password is auto-generated"
                    },
                    "references": {
                        "type": "array",
                        "description": "List of non-RC internal identifiers assigned to an extension",
                        "items": {
                            "$ref": "#/components/schemas/ReferenceInfo"
                        }
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Roles"
                        }
                    },
                    "regionalSettings": {
                        "$ref": "#/components/schemas/RegionalSettings"
                    },
                    "setupWizardState": {
                        "type": "string",
                        "description": "Specifies extension configuration wizard state (web service setup).",
                        "default": "NotStarted",
                        "enum": [
                            "NotStarted",
                            "Incomplete",
                            "Completed"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "description": "Extension current state",
                        "enum": [
                            "Enabled",
                            "Disabled",
                            "NotActivated",
                            "Unassigned"
                        ]
                    },
                    "statusInfo": {
                        "$ref": "#/components/schemas/ExtensionStatusInfo"
                    },
                    "type": {
                        "type": "string",
                        "description": "Extension type",
                        "enum": [
                            "User",
                            "VirtualUser",
                            "DigitalUser",
                            "Department",
                            "Announcement",
                            "Voicemail",
                            "SharedLinesGroup",
                            "PagingOnlyGroup",
                            "ParkLocation"
                        ]
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "Hides extension from showing in company directory. Supported for extensions of User type only. For unassigned extensions the value is set to 'True' by default. For assigned extensions the value is set to 'False' by default"
                    }
                }
            },
            "SwitchesList": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "Switches map",
                        "items": {
                            "$ref": "#/components/schemas/SwitchInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "ValidateMultipleWirelessPointsRequest": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WirelessPointInfoRequest"
                        }
                    }
                }
            },
            "GetTimezoneInfoResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a timezone"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a timezone"
                    },
                    "name": {
                        "type": "string",
                        "description": "Short name of a timezone"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of a timezone"
                    }
                }
            },
            "AccountPhoneNumbers": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of account phone numbers",
                        "items": {
                            "$ref": "#/components/schemas/CompanyPhoneNumberInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "CallQueues": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records",
                    "uri"
                ],
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a call queues resource"
                    },
                    "records": {
                        "type": "array",
                        "description": "List of call queues",
                        "items": {
                            "$ref": "#/components/schemas/CallQueueInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "ExtensionInfoEvent": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Universally unique identifier of a notification"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event filter URI"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Datetime of sending a notification in [ISO 8601](shttps://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "body": {
                        "$ref": "#/components/schemas/ExtensionInfoEventBody"
                    }
                }
            },
            "EmergencyLocationInfoRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the emergency response location"
                    },
                    "address": {
                        "$ref": "#/components/schemas/EmergencyLocationAddressInfoRequest"
                    }
                }
            },
            "GetAccountInfoResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an account"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of an account"
                    },
                    "mainNumber": {
                        "type": "string",
                        "description": "Main phone number of the current account"
                    },
                    "operator": {
                        "$ref": "#/components/schemas/GetExtensionInfoResponse"
                    },
                    "partnerId": {
                        "type": "string",
                        "description": "Additional account identifier, developed and applied by the client"
                    },
                    "serviceInfo": {
                        "$ref": "#/components/schemas/ServiceInfo"
                    },
                    "setupWizardState": {
                        "type": "string",
                        "description": "Specifies account configuration wizard state (web service setup). The default value is 'NotStarted'",
                        "enum": [
                            "NotStarted",
                            "Incomplete",
                            "Completed"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the current account",
                        "enum": [
                            "Confirmed",
                            "Disabled"
                        ]
                    },
                    "statusInfo": {
                        "$ref": "#/components/schemas/AccountStatusInfo"
                    },
                    "regionalSettings": {
                        "$ref": "#/components/schemas/RegionalSettings"
                    },
                    "federated": {
                        "description": "Specifies whether an account is included into any federation of accounts or not",
                        "type": "boolean"
                    },
                    "outboundCallPrefix": {
                        "type": "integer",
                        "description": "If outbound call prefix is not specified, or set to null (0), then the parameter is not returned; the supported value range is 2-9"
                    },
                    "cfid": {
                        "type": "string",
                        "description": "Customer facing identifier. Returned for accounts with the turned off PBX features. Equals to main company number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) (without '+' sign)format "
                    },
                    "limits": {
                        "$ref": "#/components/schemas/AccountLimits"
                    }
                }
            },
            "GetCountryListResponse": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of countries with the country data",
                        "items": {
                            "$ref": "#/components/schemas/GetCountryInfoDictionaryResponse"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "CreateMultipleWirelessPointsRequest": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreateWirelessPoint"
                        }
                    }
                }
            },
            "GetServiceInfoResponse": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of the account Service Info resource"
                    },
                    "servicePlanName": {
                        "type": "string",
                        "description": "Account Service Plan name"
                    },
                    "serviceFeatures": {
                        "type": "array",
                        "description": "Service features information, see Service Feature List",
                        "items": {
                            "$ref": "#/components/schemas/ServiceFeatureInfo"
                        }
                    },
                    "limits": {
                        "$ref": "#/components/schemas/AccountLimits"
                    }
                }
            },
            "GetTimezoneListResponse": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of timezones",
                        "items": {
                            "$ref": "#/components/schemas/GetTimezoneInfoResponse"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "AutomaticLocationUpdatesUserList": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to the users list resource"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutomaticLocationUpdatesUserInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "CompanyPhoneNumberInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a phone number"
                    },
                    "country": {
                        "$ref": "#/components/schemas/CountryInfo"
                    },
                    "extension": {
                        "$ref": "#/components/schemas/ExtensionInfo"
                    },
                    "label": {
                        "type": "string",
                        "description": "Custom user name of a phone number, if any"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location (City, State). Filled for local US numbers"
                    },
                    "paymentType": {
                        "type": "string",
                        "description": "Payment type. 'External' is returned for forwarded numbers which are not terminated in the RingCentral phone system",
                        "enum": [
                            "External",
                            "TollFree",
                            "Local"
                        ]
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a phone number. If the value is 'Normal', the phone number is ready to be used. Otherwise it is an external number not yet ported to RingCentral"
                    },
                    "type": {
                        "type": "string",
                        "description": "Phone number type",
                        "enum": [
                            "VoiceFax",
                            "FaxOnly",
                            "VoiceOnly"
                        ]
                    },
                    "usageType": {
                        "type": "string",
                        "description": "Usage type of a phone number. Usage type of a phone number. Numbers of 'NumberPool' type wont't be returned for phone number list requests",
                        "enum": [
                            "MainCompanyNumber",
                            "AdditionalCompanyNumber",
                            "CompanyNumber",
                            "DirectNumber",
                            "CompanyFaxNumber",
                            "ForwardedNumber",
                            "ForwardedCompanyNumber",
                            "ContactCenterNumber",
                            "ConferencingNumber",
                            "MeetingsNumber",
                            "NumberPool"
                        ]
                    },
                    "temporaryNumber": {
                        "$ref": "#/components/schemas/TemporaryNumberInfo"
                    },
                    "contactCenterProvider": {
                        "$ref": "#/components/schemas/ContactCenterProvider"
                    }
                }
            },
            "DepartmentMemberList": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of department members extensions",
                        "items": {
                            "$ref": "#/components/schemas/ExtensionInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "PagingOnlyGroupUsers": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of users allowed to page this group",
                        "items": {
                            "$ref": "#/components/schemas/PagingGroupExtensionInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "CreateNetworkRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "site": {
                        "$ref": "#/components/schemas/AutomaticLocationUpdatesSiteInfo"
                    },
                    "publicIpRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublicIpRangeInfo"
                        }
                    },
                    "privateIpRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PrivateIpRangeInfoRequest"
                        }
                    }
                }
            },
            "AutomaticLocationUpdatesTaskInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a task"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Accepted",
                            "InProgress",
                            "Completed",
                            "Failed"
                        ],
                        "description": "Status of a task"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Task creation time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Time of the task latest modification"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of a task",
                        "enum": [
                            "WirelessPointsBulkCreate",
                            "WirelessPointsBulkUpdate",
                            "SwitchesBulkCreate",
                            "SwitchesBulkUpdate"
                        ]
                    },
                    "result": {
                        "$ref": "#/components/schemas/TaskResultInfo"
                    }
                }
            },
            "CallMonitoringBulkAssign": {
                "type": "object",
                "properties": {
                    "updatedExtensions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CallMonitoringExtensionUpdate"
                        }
                    }
                }
            },
            "CreateSwitchInfo": {
                "type": "object",
                "required": [
                    "chassisId",
                    "emergencyAddress"
                ],
                "properties": {
                    "chassisId": {
                        "type": "string",
                        "description": "Unique identifier of a network switch. The supported formats are: XX:XX:XX:XX:XX:XX (symbols 0-9 and A-F) for MAC address and X.X.X.X for IP address (symbols 0-255)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a network switch"
                    },
                    "site": {
                        "$ref": "#/components/schemas/SwitchSiteInfo"
                    },
                    "emergencyAddress": {
                        "$ref": "#/components/schemas/LocationUpdatesEmergencyAddressInfoRequest"
                    },
                    "emergencyLocationId": {
                        "type": "string",
                        "description": "Emergency response location (address) internal identifier. Only one of a pair `emergencyAddress` or `emergencyLocationId` should be specified, otherwise the error is returned"
                    }
                }
            },
            "ExtensionCreationResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Internal identifier of an extension"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of an extension"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ContactInfo"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Number of department extension"
                    },
                    "name": {
                        "type": "string",
                        "description": "Extension user name"
                    },
                    "partnerId": {
                        "type": "string",
                        "description": "For Partner Applications Internal identifier of an extension created by partner. The RingCentral supports the mapping of accounts and stores the corresponding account ID/extension ID for each partner ID of a client application. In request URIs partner IDs are accepted instead of regular RingCentral native IDs as path parameters using pid = XXX clause. Though in response URIs contain the corresponding account IDs and extension IDs. In all request and response bodies these values are reflected via partnerId attributes of account and extension"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/ExtensionPermissions"
                    },
                    "profileImage": {
                        "$ref": "#/components/schemas/ProfileImageInfo"
                    },
                    "references": {
                        "type": "array",
                        "description": "List of non-RC internal identifiers assigned to an extension",
                        "items": {
                            "$ref": "#/components/schemas/ReferenceInfo"
                        }
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Roles"
                        }
                    },
                    "regionalSettings": {
                        "$ref": "#/components/schemas/RegionalSettings"
                    },
                    "serviceFeatures": {
                        "type": "array",
                        "description": "Extension service features returned in response only when the logged-in user requests his/her own extension info, see also Extension Service Features",
                        "items": {
                            "$ref": "#/components/schemas/ExtensionServiceFeatureInfo"
                        }
                    },
                    "setupWizardState": {
                        "type": "string",
                        "description": "Specifies extension configuration wizard state (web service setup). The default value is 'NotStarted'",
                        "enum": [
                            "NotStarted",
                            "Incomplete",
                            "Completed"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "description": "Extension current state. If the status is 'Unassigned'. Returned for all extensions",
                        "enum": [
                            "Enabled",
                            "Disabled",
                            "NotActivated",
                            "Unassigned"
                        ]
                    },
                    "statusInfo": {
                        "$ref": "#/components/schemas/ExtensionStatusInfo"
                    },
                    "type": {
                        "type": "string",
                        "description": "Extension type",
                        "enum": [
                            "User",
                            "VirtualUser",
                            "DigitalUser",
                            "Department",
                            "Announcement",
                            "Voicemail",
                            "SharedLinesGroup",
                            "PagingOnlyGroup",
                            "ParkLocation"
                        ]
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "Hides extension from showing in company directory. Supported for extensions of User type only"
                    }
                }
            },
            "CreateMultipleSwitchesResponse": {
                "type": "object",
                "description": "Information on the task for multiple switches creation",
                "properties": {
                    "task": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BulkTaskInfo"
                        }
                    }
                }
            },
            "ValidateMultipleWirelessPointsResponse": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WirelessPointValidated"
                        }
                    }
                }
            },
            "EmergencyLocationList": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmergencyLocationInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "NotificationSettings": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of notifications settings resource"
                    },
                    "emailAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of notification recipient email addresses"
                    },
                    "smsEmailAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of notification recipient email addresses"
                    },
                    "advancedMode": {
                        "type": "boolean",
                        "description": "Specifies notifications settings mode. If 'True' then advanced mode is on, it allows using different emails and/or phone numbers for each notification type. If 'False' then basic mode is on. Advanced mode settings are returned in both modes, if specified once, but if basic mode is switched on, they are not applied "
                    },
                    "voicemails": {
                        "$ref": "#/components/schemas/VoicemailsInfo"
                    },
                    "inboundFaxes": {
                        "$ref": "#/components/schemas/InboundFaxesInfo"
                    },
                    "outboundFaxes": {
                        "$ref": "#/components/schemas/OutboundFaxesInfo"
                    },
                    "inboundTexts": {
                        "$ref": "#/components/schemas/InboundTextsInfo"
                    },
                    "missedCalls": {
                        "$ref": "#/components/schemas/MissedCallsInfo"
                    }
                }
            },
            "GetExtensionGrantListResponse": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of extension grants with details",
                        "items": {
                            "$ref": "#/components/schemas/GrantInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "UpdateNetworkRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "site": {
                        "$ref": "#/components/schemas/AutomaticLocationUpdatesSiteInfo"
                    },
                    "publicIpRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublicIpRangeInfo"
                        }
                    },
                    "privateIpRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PrivateIpRangeInfoRequest"
                        }
                    }
                }
            },
            "CreateMultipleWirelessPointsResponse": {
                "type": "object",
                "properties": {
                    "task": {
                        "$ref": "#/components/schemas/BulkTaskInfo"
                    }
                }
            },
            "ValidateMultipleSwitchesResponse": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SwitchValidated"
                        }
                    }
                }
            },
            "ExtensionListEvent": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Universally unique identifier of a notification"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event filter URI"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Datetime of sending a notification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "body": {
                        "$ref": "#/components/schemas/ExtensionListEventBody"
                    }
                }
            },
            "CallQueueMembers": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records",
                    "uri"
                ],
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a call queue members resource"
                    },
                    "records": {
                        "type": "array",
                        "description": "List of call queue members",
                        "items": {
                            "$ref": "#/components/schemas/CallQueueMemberInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "CreateCallMonitoringGroupRequest": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a group"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a group"
                    }
                }
            },
            "CallMonitoringGroups": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records",
                    "uri"
                ],
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a call monitoring groups resource"
                    },
                    "records": {
                        "type": "array",
                        "description": "List of call monitoring group members",
                        "items": {
                            "$ref": "#/components/schemas/CallMonitoringGroup"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "ValidateMultipleSwitchesRequest": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SwitchInfo"
                        }
                    }
                }
            },
            "UpdateConferencingInfoRequest": {
                "type": "object",
                "properties": {
                    "phoneNumbers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConferencePhoneNumberInfo"
                        },
                        "description": "Multiple dial-in phone numbers to connect to audio conference service, relevant for user's brand. Each number is given with the country and location information, in order to let the user choose the less expensive way to connect to a conference. The first number in the list is the primary conference number, that is default and domestic"
                    },
                    "allowJoinBeforeHost": {
                        "type": "boolean",
                        "description": "Determines if host user allows conference participants to join before the host"
                    }
                }
            },
            "AccountBusinessAddressResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "businessAddress": {
                        "$ref": "#/components/schemas/ContactBusinessAddressInfo"
                    },
                    "company": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    }
                }
            },
            "GetExtensionListResponse": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of extensions with extension information",
                        "items": {
                            "$ref": "#/components/schemas/GetExtensionInfoResponse"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "GetLocationListResponse": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of locations",
                        "items": {
                            "$ref": "#/components/schemas/LocationInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "EditPagingGroupRequest": {
                "type": "object",
                "properties": {
                    "addedUserIds": {
                        "type": "array",
                        "description": "List of users that will be allowed to page a group specified",
                        "items": {
                            "type": "string"
                        }
                    },
                    "removedUserIds": {
                        "type": "array",
                        "description": "List of users that will be unallowed to page a group specified",
                        "items": {
                            "type": "string"
                        }
                    },
                    "addedDeviceIds": {
                        "type": "array",
                        "description": "List of account devices that will be assigned to a paging group specified",
                        "items": {
                            "type": "string"
                        }
                    },
                    "removedDeviceIds": {
                        "type": "array",
                        "description": "List of account devices that will be unassigned from a paging group specified",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "GetExtensionInfoResponse": {
                "type": "object",
                "required": [
                    "id",
                    "profileImage",
                    "status",
                    "type",
                    "uri"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Internal identifier of an extension"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of an extension"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ContactInfo"
                    },
                    "departments": {
                        "type": "array",
                        "description": "Information on department extension(s), to which the requested extension belongs. Returned only for user extensions, members of department, requested by single extensionId",
                        "items": {
                            "$ref": "#/components/schemas/DepartmentInfo"
                        }
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Number of department extension"
                    },
                    "name": {
                        "type": "string",
                        "description": "Extension user name"
                    },
                    "partnerId": {
                        "type": "string",
                        "description": "For Partner Applications Internal identifier of an extension created by partner. The RingCentral supports the mapping of accounts and stores the corresponding account ID/extension ID for each partner ID of a client application. In request URIs partner IDs are accepted instead of regular RingCentral native IDs as path parameters using pid = XXX clause. Though in response URIs contain the corresponding account IDs and extension IDs. In all request and response bodies these values are reflected via partnerId attributes of account and extension"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/ExtensionPermissions"
                    },
                    "profileImage": {
                        "$ref": "#/components/schemas/ProfileImageInfo"
                    },
                    "references": {
                        "type": "array",
                        "description": "List of non-RC internal identifiers assigned to an extension",
                        "items": {
                            "$ref": "#/components/schemas/ReferenceInfo"
                        }
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Roles"
                        }
                    },
                    "regionalSettings": {
                        "$ref": "#/components/schemas/RegionalSettings"
                    },
                    "serviceFeatures": {
                        "type": "array",
                        "description": "Extension service features returned in response only when the logged-in user requests his/her own extension info, see also Extension Service Features",
                        "items": {
                            "$ref": "#/components/schemas/ExtensionServiceFeatureInfo"
                        }
                    },
                    "setupWizardState": {
                        "type": "string",
                        "description": "Specifies extension configuration wizard state (web service setup).",
                        "default": "NotStarted",
                        "enum": [
                            "NotStarted",
                            "Incomplete",
                            "Completed"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "description": "Extension current state. If the status is 'Unassigned'. Returned for all extensions",
                        "enum": [
                            "Enabled",
                            "Disabled",
                            "NotActivated",
                            "Unassigned"
                        ]
                    },
                    "statusInfo": {
                        "$ref": "#/components/schemas/ExtensionStatusInfo"
                    },
                    "type": {
                        "type": "string",
                        "description": "Extension type",
                        "enum": [
                            "User",
                            "FaxUser",
                            "VirtualUser",
                            "DigitalUser",
                            "Department",
                            "Announcement",
                            "Voicemail",
                            "SharedLinesGroup",
                            "PagingOnlyGroup",
                            "IvrMenu",
                            "ApplicationExtension",
                            "ParkLocation"
                        ]
                    },
                    "callQueueExtensionInfo": {
                        "$ref": "#/components/schemas/CallQueueExtensionInfo"
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "Hides extension from showing in company directory. Supported for extensions of User type only"
                    }
                }
            },
            "ExtensionGrantListEvent": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Universally unique identifier of a notification"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event filter URI"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Datetime of sending a notification in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z*"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription"
                    },
                    "body": {
                        "$ref": "#/components/schemas/ExtensionGrantListEventBody"
                    }
                }
            },
            "CreateMultipleSwitchesRequest": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreateSwitchInfo"
                        }
                    }
                }
            },
            "EmergencyLocationInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the emergency response location"
                    },
                    "address": {
                        "$ref": "#/components/schemas/EmergencyLocationAddressInfo"
                    }
                }
            },
            "DepartmentBulkAssignResource": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BulkAssignItem"
                        }
                    }
                }
            },
            "GetExtensionPhoneNumbersResponse": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of phone numbers",
                        "items": {
                            "$ref": "#/components/schemas/UserPhoneNumberInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "WirelessPointsList": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to the wireless points resource"
                    },
                    "records": {
                        "type": "array",
                        "description": "List of wireless points with assigned emergency addresses",
                        "items": {
                            "$ref": "#/components/schemas/WirelessPointInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "UpdateWirelessPoint": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a wireless point"
                    },
                    "bssid": {
                        "type": "string",
                        "description": "Unique 48-bit identifier of wireless access point complying with MAC address conventions. Mask: XX:XX:XX:XX:XX:XX, where X can be a symbol in the range of 0-9 or A-F"
                    },
                    "name": {
                        "type": "string",
                        "description": "Wireless access point name"
                    },
                    "site": {
                        "$ref": "#/components/schemas/AutomaticLocationUpdatesSiteInfo"
                    },
                    "emergencyAddress": {
                        "$ref": "#/components/schemas/LocationUpdatesEmergencyAddressInfoRequest"
                    },
                    "emergencyLocationId": {
                        "type": "string",
                        "description": "Internal identifier of the emergency response location (address). Only one of a pair `emergencyAddress` or `emergencyLocationId` should be specified, otherwise the error is returned"
                    }
                }
            },
            "NetworksList": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a networks resource"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NetworkInfo"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/ProvisioningPagingInfo"
                    }
                }
            },
            "UpdateMultipleSwitchesRequest": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UpdateSwitchInfo"
                        }
                    }
                }
            },
            "UpdateMultipleWirelessPointsRequest": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UpdateWirelessPoint"
                        }
                    }
                }
            },
            "ModifyAccountBusinessAddressRequest": {
                "required": [
                    "businessAddress"
                ],
                "type": "object",
                "properties": {
                    "company": {
                        "type": "string",
                        "description": "Company business name"
                    },
                    "email": {
                        "type": "string",
                        "description": "Company business email address"
                    },
                    "businessAddress": {
                        "$ref": "#/components/schemas/BusinessAddressInfo"
                    }
                }
            },
            "TemplateInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a template"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a template"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "UserSettings",
                            "CallHandling"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a template"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Time of a template creation"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Time of the last template modification"
                    }
                }
            },
            "ExtensionCallerIdInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URL of a caller ID resource"
                    },
                    "byDevice": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CallerIdByDevice"
                        }
                    },
                    "byFeature": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CallerIdByFeature"
                        }
                    },
                    "extensionNameForOutboundCalls": {
                        "type": "boolean",
                        "description": "If 'True', then user first name and last name will be used as caller ID when making outbound calls from extension"
                    },
                    "extensionNumberForInternalCalls": {
                        "type": "boolean",
                        "description": "If 'True', then extension number will be used as caller ID when making internal calls"
                    }
                }
            },
            "CreateWirelessPoint": {
                "type": "object",
                "required": [
                    "bssid",
                    "name",
                    "emergencyAddress"
                ],
                "properties": {
                    "bssid": {
                        "type": "string",
                        "description": "Unique 48-bit identifier of wireless access point complying with MAC address conventions. The Mask is XX:XX:XX:XX:XX:XX, where X can be a symbol in the range of 0-9 or A-F"
                    },
                    "name": {
                        "type": "string",
                        "description": "Wireless access point name"
                    },
                    "site": {
                        "$ref": "#/components/schemas/AutomaticLocationUpdatesSiteInfo"
                    },
                    "emergencyAddress": {
                        "$ref": "#/components/schemas/LocationUpdatesEmergencyAddressInfoRequest"
                    },
                    "emergencyLocationId": {
                        "type": "string",
                        "description": "Internal identifier of the emergency response location (address). Only one of a pair `emergencyAddress` or `emergencyLocationId` should be specified, otherwise the error is returned"
                    }
                }
            },
            "WirelessPointInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a wireless point"
                    },
                    "bssid": {
                        "type": "string",
                        "description": "Unique 48-bit identifier of the wireless access point complying with MAC address conventions"
                    },
                    "name": {
                        "type": "string",
                        "description": "Wireless access point name"
                    },
                    "site": {
                        "$ref": "#/components/schemas/AutomaticLocationUpdatesSiteInfo"
                    },
                    "emergencyAddress": {
                        "$ref": "#/components/schemas/LocationUpdatesEmergencyAddressInfo"
                    },
                    "emergencyLocationId": {
                        "type": "string",
                        "description": "Emergency response location (address) internal identifier. Only one of a pair `emergencyAddress` or `emergencyLocationId` should be specified, otherwise the error is returned"
                    }
                }
            },
            "UpdateMultipleSwitchesResponse": {
                "type": "object",
                "properties": {
                    "task": {
                        "$ref": "#/components/schemas/BulkTaskInfo"
                    }
                }
            },
            "CallQueueBulkAssignResource": {
                "type": "object",
                "properties": {
                    "addedExtensionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "removedExtensionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "CallMonitoringGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a group"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a group"
                    }
                }
            },
            "ExtensionRegionalSettingRequest": {
                "type": "object",
                "properties": {
                    "homeCountry": {
                        "$ref": "#/components/schemas/ExtensionCountryInfoRequest"
                    },
                    "timezone": {
                        "$ref": "#/components/schemas/ExtensionTimezoneInfoRequest"
                    },
                    "language": {
                        "$ref": "#/components/schemas/ExtensionLanguageInfoRequest"
                    },
                    "greetingLanguage": {
                        "$ref": "#/components/schemas/ExtensionGreetingLanguageInfoRequest"
                    },
                    "formattingLocale": {
                        "$ref": "#/components/schemas/ExtensionFormattingLocaleInfoRequest"
                    },
                    "timeFormat": {
                        "type": "string",
                        "enum": [
                            "12h",
                            "24h"
                        ],
                        "default": "12h",
                        "description": "Time format setting"
                    }
                }
            },
            "LocationUpdatesEmergencyAddressInfo": {
                "type": "object",
                "properties": {
                    "country": {
                        "type": "string",
                        "description": "Country name"
                    },
                    "countryId": {
                        "type": "string",
                        "description": "Internal identifier of a country"
                    },
                    "countryIsoCode": {
                        "type": "string",
                        "description": "ISO code of a country"
                    },
                    "countryName": {
                        "type": "string",
                        "description": "Full name of a country"
                    },
                    "state": {
                        "type": "string",
                        "description": "State/Province name. Mandatory for the USA, the UK and Canada"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "Internal identifier of a state"
                    },
                    "stateIsoCode": {
                        "type": "string",
                        "description": "ISO code of a state"
                    },
                    "stateName": {
                        "type": "string",
                        "description": "Full name of a state"
                    },
                    "city": {
                        "type": "string",
                        "description": "City name"
                    },
                    "street": {
                        "type": "string",
                        "description": "First line address"
                    },
                    "street2": {
                        "type": "string",
                        "description": "Second line address (apartment, suite, unit, building, floor, etc.)"
                    },
                    "zip": {
                        "type": "string",
                        "description": "Postal (Zip) code"
                    }
                }
            },
            "AccountStatusInfo": {
                "type": "object",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "A free-form user comment, describing the status change reason"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Type of suspension",
                        "enum": [
                            "Voluntarily",
                            "Involuntarily"
                        ]
                    },
                    "till": {
                        "type": "string",
                        "description": "Date until which the account will get deleted. The default value is 30 days since current date"
                    }
                }
            },
            "ExtensionServiceFeatureInfo": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Feature status; shows feature availability for an extension"
                    },
                    "featureName": {
                        "type": "string",
                        "enum": [
                            "AccountFederation",
                            "Archiver",
                            "AutomaticCallRecordingMute",
                            "AutomaticInboundCallRecording",
                            "AutomaticOutboundCallRecording",
                            "BlockedMessageForwarding",
                            "Calendar",
                            "CallerIdControl",
                            "CallForwarding",
                            "CallPark",
                            "CallParkLocations",
                            "CallSupervision",
                            "CallSwitch",
                            "CallQualitySurvey",
                            "Conferencing",
                            "ConfigureDelegates",
                            "DeveloperPortal",
                            "DND",
                            "DynamicConference",
                            "EmergencyAddressAutoUpdate",
                            "EmergencyCalling",
                            "EncryptionAtRest",
                            "ExternalDirectoryIntegration",
                            "Fax",
                            "FaxReceiving",
                            "FreeSoftPhoneLines",
                            "HDVoice",
                            "HipaaCompliance",
                            "Intercom",
                            "InternationalCalling",
                            "InternationalSMS",
                            "LinkedSoftphoneLines",
                            "MMS",
                            "OnDemandCallRecording",
                            "Pager",
                            "PagerReceiving",
                            "Paging",
                            "PasswordAuth",
                            "PromoMessage",
                            "Reports",
                            "Presence",
                            "RCTeams",
                            "RingOut",
                            "SalesForce",
                            "SharedLines",
                            "SingleExtensionUI",
                            "SiteCodes",
                            "SMS",
                            "SMSReceiving",
                            "SoftPhoneUpdate",
                            "TelephonySessions",
                            "UserManagement",
                            "VideoConferencing",
                            "VoipCalling",
                            "VoipCallingOnMobile",
                            "Voicemail",
                            "VoicemailToText",
                            "WebPhone"
                        ],
                        "description": "Feature name"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Reason for limitation of a particular service feature. Returned only if the enabled parameter value is 'False', see Service Feature Limitations and Reasons. When retrieving service features for an extension, the reasons for the limitations, if any, are returned in response"
                    }
                }
            },
            "ContactBusinessAddressInfo": {
                "type": "object",
                "properties": {
                    "country": {
                        "type": "string",
                        "description": "Country name of an extension user company"
                    },
                    "state": {
                        "type": "string",
                        "description": "State/province name of an extension user company. Mandatory for the USA, UK and Canada"
                    },
                    "city": {
                        "type": "string",
                        "description": "City name of an extension user company"
                    },
                    "street": {
                        "type": "string",
                        "description": "Street address of an extension user company"
                    },
                    "zip": {
                        "type": "string",
                        "description": "Zip code of an extension user company"
                    }
                }
            },
            "EmergencyLocationAddressInfo": {
                "type": "object",
                "properties": {
                    "country": {
                        "type": "string",
                        "description": "Country name"
                    },
                    "countryId": {
                        "type": "string",
                        "description": "Internal identifier of a country"
                    },
                    "countryIsoCode": {
                        "type": "string",
                        "description": "ISO code of a country"
                    },
                    "countryName": {
                        "type": "string",
                        "description": "Full name of a country"
                    },
                    "state": {
                        "type": "string",
                        "description": "State/Province name. Mandatory for the USA, the UK and Canada"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "Internal identifier of a state"
                    },
                    "stateIsoCode": {
                        "type": "string",
                        "description": "ISO code of a state"
                    },
                    "stateName": {
                        "type": "string",
                        "description": "Full name of a state"
                    },
                    "city": {
                        "type": "string",
                        "description": "City name"
                    },
                    "street": {
                        "type": "string",
                        "description": "First line address"
                    },
                    "street2": {
                        "type": "string",
                        "description": "Second line address (apartment, suite, unit, building, floor, etc.)"
                    },
                    "zip": {
                        "type": "string",
                        "description": "Postal (Zip) code"
                    }
                }
            },
            "LocationUpdatesEmergencyAddressInfoRequest": {
                "type": "object",
                "properties": {
                    "country": {
                        "type": "string",
                        "description": "Country name"
                    },
                    "state": {
                        "type": "string",
                        "description": "State/Province name. Mandatory for the USA, the UK and Canada"
                    },
                    "city": {
                        "type": "string",
                        "description": "City name"
                    },
                    "street": {
                        "type": "string",
                        "description": "First line address"
                    },
                    "street2": {
                        "type": "string",
                        "description": "Second line address (apartment, suite, unit, building, floor, etc.)"
                    },
                    "zip": {
                        "type": "string",
                        "description": "Postal (Zip) code"
                    }
                }
            },
            "PagingGroupExtensionInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a paging group user extension"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Link to a paging group user extension"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Extension number of a paging group user"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a paging group user"
                    }
                }
            },
            "ContactInfo": {
                "type": "object",
                "required": [
                    "firstName",
                    "email"
                ],
                "properties": {
                    "firstName": {
                        "type": "string",
                        "description": "For User extension type only. Extension user first name"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "For User extension type only. Extension user last name"
                    },
                    "company": {
                        "type": "string",
                        "description": "Extension user company name"
                    },
                    "jobTitle": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of extension user"
                    },
                    "businessPhone": {
                        "type": "string",
                        "description": "Extension user contact phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) (with '+' sign) format"
                    },
                    "mobilePhone": {
                        "type": "string",
                        "description": "Extension user mobile (**non** Toll Free) phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) (with '+' sign) format"
                    },
                    "businessAddress": {
                        "$ref": "#/components/schemas/ContactBusinessAddressInfo"
                    },
                    "emailAsLoginName": {
                        "type": "boolean",
                        "description": "If 'True' then contact email is enabled as login name for this user. Please note that email should be unique in this case.",
                        "default": "False"
                    },
                    "pronouncedName": {
                        "$ref": "#/components/schemas/PronouncedNameInfo"
                    },
                    "department": {
                        "type": "string",
                        "description": "Extension user department, if any"
                    }
                }
            },
            "CallMonitoringGroupMemberInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a call monitoring group member"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a call monitoring group member"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Extension number of a call monitoring group member"
                    },
                    "permissions": {
                        "type": "string",
                        "enum": [
                            "Monitoring",
                            "Monitored"
                        ],
                        "description": "Call monitoring permission; mltiple values allowed: * \"Monitoring\" - User can monitor a group * \"Monitored\" - User can be monitored\n"
                    }
                }
            },
            "MissedCallsInfo": {
                "type": "object",
                "properties": {
                    "notifyByEmail": {
                        "type": "boolean",
                        "description": "Email notification flag"
                    },
                    "notifyBySms": {
                        "type": "boolean",
                        "description": "SMS notification flag"
                    },
                    "advancedEmailAddresses": {
                        "type": "array",
                        "description": "List of recipient email addresses for missed call notifications. Returned if specified, in both modes (advanced/basic). Applied in advanced mode only",
                        "items": {
                            "type": "string"
                        }
                    },
                    "advancedSmsEmailAddresses": {
                        "type": "array",
                        "description": "List of recipient phone numbers for missed call notifications. Returned if specified, in both modes (advanced/basic). Applied in advanced mode only",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "EmergencyLocationAddressInfoRequest": {
                "type": "object",
                "properties": {
                    "country": {
                        "type": "string",
                        "description": "Country name"
                    },
                    "state": {
                        "type": "string",
                        "description": "State/Province name. Mandatory for the USA, the UK and Canada"
                    },
                    "city": {
                        "type": "string",
                        "description": "City name"
                    },
                    "street": {
                        "type": "string",
                        "description": "First line address"
                    },
                    "street2": {
                        "type": "string",
                        "description": "Second line address (apartment, suite, unit, building, floor, etc.)"
                    },
                    "zip": {
                        "type": "string",
                        "description": "Postal (Zip) code"
                    }
                }
            },
            "AutomaticLocationUpdatesUserInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a device"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "User name"
                    },
                    "extensionNumber": {
                        "type": "string"
                    },
                    "featureEnabled": {
                        "type": "boolean",
                        "description": "Specifies if Automatic Location Updates feature is enabled"
                    },
                    "type": {
                        "type": "string",
                        "description": "User extension type",
                        "enum": [
                            "User",
                            "Limited"
                        ]
                    },
                    "site": {
                        "$ref": "#/components/schemas/AutomaticLocationUpdatesSiteInfo"
                    },
                    "department": {
                        "type": "string",
                        "description": "Department name"
                    }
                }
            },
            "ExtensionListEventBody": {
                "type": "object",
                "properties": {
                    "extensionId": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    },
                    "eventType": {
                        "type": "string",
                        "description": "Type of extension info change",
                        "enum": [
                            "Create",
                            "Update",
                            "Delete"
                        ]
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    }
                }
            },
            "ExtensionGrantListEventBody": {
                "type": "object",
                "properties": {
                    "extensionId": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    }
                }
            },
            "AccountLimits": {
                "type": "object",
                "properties": {
                    "freeSoftPhoneLinesPerExtension": {
                        "type": "integer",
                        "description": "Max number of free softphone phone lines per user extension"
                    },
                    "meetingSize": {
                        "type": "integer",
                        "description": "Max number of participants in RingCentral meeting hosted by this account's user"
                    },
                    "cloudRecordingStorage": {
                        "type": "integer",
                        "description": "Meetings recording cloud storage limitaion in Gb"
                    },
                    "maxMonitoredExtensionsPerUser": {
                        "type": "integer",
                        "description": "Max number of extensions which can be included in the list of users monitored for Presence"
                    },
                    "maxExtensionNumberLength": {
                        "type": "integer",
                        "description": "Max length of extension numbers of an account; the supported value is up to 8 symbols, depends on account type",
                        "default": 5
                    },
                    "siteCodeLength": {
                        "type": "integer",
                        "description": "Length of a site code"
                    },
                    "shortExtensionNumberLength": {
                        "type": "integer",
                        "description": "Length of a short extension number"
                    }
                }
            },
            "TemporaryNumberInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Temporary phone number identifier"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Temporary phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) (with '+' sign) format"
                    }
                }
            },
            "GrantInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a grant"
                    },
                    "extension": {
                        "$ref": "#/components/schemas/ExtensionInfoGrants"
                    },
                    "callPickup": {
                        "type": "boolean",
                        "description": "Specifies if picking up of other extensions' calls is allowed for the extension. If 'Presence' feature is disabled for the given extension, the flag is not returned"
                    },
                    "callMonitoring": {
                        "type": "boolean",
                        "description": "Specifies if monitoring of other extensions' calls is allowed for the extension. If 'CallMonitoring' feature is disabled for the given extension, the flag is not returned"
                    },
                    "callOnBehalfOf": {
                        "type": "boolean",
                        "description": "Specifies whether the current extension is able to make or receive calls on behalf of the user referenced in extension object"
                    },
                    "callDelegation": {
                        "type": "boolean",
                        "description": "Specifies whether the current extension can delegate a call to the user referenced in extension object"
                    },
                    "groupPaging": {
                        "type": "boolean",
                        "description": "Specifies whether the current extension is allowed to call Paging Only group referenced to in extension object"
                    }
                }
            },
            "BulkAssignItem": {
                "type": "object",
                "properties": {
                    "departmentId": {
                        "type": "string"
                    },
                    "addedExtensionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "removedExtensionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "UserPhoneNumberInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a phone number"
                    },
                    "country": {
                        "$ref": "#/components/schemas/CountryInfo"
                    },
                    "extension": {
                        "$ref": "#/components/schemas/ExtensionInfo"
                    },
                    "label": {
                        "type": "string",
                        "description": "Custom user name of a phone number, if any"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location (City, State). Filled for local US numbers"
                    },
                    "paymentType": {
                        "type": "string",
                        "description": "Payment type. 'External' is returned for forwarded numbers which are not terminated in the RingCentral phone system",
                        "enum": [
                            "External",
                            "TollFree",
                            "Local"
                        ]
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a phone number. If the value is 'Normal', the phone number is ready to be used. Otherwise it is an external number not yet ported to RingCentral"
                    },
                    "type": {
                        "type": "string",
                        "description": "Phone number type",
                        "enum": [
                            "VoiceFax",
                            "FaxOnly",
                            "VoiceOnly"
                        ]
                    },
                    "usageType": {
                        "type": "string",
                        "description": "Usage type of a phone number. Numbers of 'NumberPool' type wont't be returned for phone number list requests",
                        "enum": [
                            "MainCompanyNumber",
                            "AdditionalCompanyNumber",
                            "CompanyNumber",
                            "DirectNumber",
                            "CompanyFaxNumber",
                            "ForwardedNumber",
                            "ForwardedCompanyNumber",
                            "ContactCenterNumber",
                            "ConferencingNumber",
                            "NumberPool"
                        ]
                    },
                    "features": {
                        "type": "array",
                        "description": "List of features of a phone number",
                        "items": {
                            "type": "string",
                            "enum": [
                                "CallerId",
                                "SmsSender",
                                "MmsSender",
                                "InternationalSmsSender",
                                "TollFreeSmsSender",
                                "Delegated"
                            ]
                        }
                    }
                }
            },
            "GetCountryInfoState": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a state"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a state"
                    }
                }
            },
            "AutomaticLocationUpdatesSiteInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a site"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a site"
                    }
                }
            },
            "OutboundFaxesInfo": {
                "type": "object",
                "properties": {
                    "notifyByEmail": {
                        "type": "boolean",
                        "description": "Email notification flag"
                    },
                    "notifyBySms": {
                        "type": "boolean",
                        "description": "SMS notification flag"
                    },
                    "advancedEmailAddresses": {
                        "type": "array",
                        "description": "List of recipient email addresses for outbound fax notifications. Returned if specified, in both modes (advanced/basic). Applied in advanced mode only",
                        "items": {
                            "type": "string"
                        }
                    },
                    "advancedSmsEmailAddresses": {
                        "type": "array",
                        "description": "List of recipient phone numbers for outbound fax notifications. Returned if specified, in both modes (advanced/basic). Applied in advanced mode only",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ContactCenterProvider": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the provider"
                    },
                    "name": {
                        "type": "string",
                        "description": "Provider's name"
                    }
                }
            },
            "BusinessAddressInfo": {
                "type": "object",
                "properties": {
                    "country": {
                        "type": "string",
                        "description": "Name of a country"
                    },
                    "state": {
                        "type": "string",
                        "description": "Name of a state/province"
                    },
                    "city": {
                        "type": "string",
                        "description": "Name of a city"
                    },
                    "street": {
                        "type": "string",
                        "description": "Street address"
                    },
                    "zip": {
                        "type": "string",
                        "description": "Zip code"
                    }
                }
            },
            "CallerIdByDevice": {
                "type": "object",
                "properties": {
                    "device": {
                        "$ref": "#/components/schemas/CallerIdDeviceInfo"
                    },
                    "callerId": {
                        "$ref": "#/components/schemas/CallerIdByDeviceInfo"
                    }
                }
            },
            "UserTransitionInfo": {
                "type": "object",
                "properties": {
                    "sendWelcomeEmailsToUsers": {
                        "type": "boolean",
                        "description": "Specifies if an activation email is automatically sent to new users (Not Activated extensions) or not"
                    },
                    "sendWelcomeEmail": {
                        "type": "boolean",
                        "description": "Supported for account confirmation. Specifies whether welcome email is sent"
                    }
                }
            },
            "AutomaticLocationUpdatesDeviceInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a device"
                    },
                    "type": {
                        "type": "string",
                        "description": "Device type",
                        "default": "HardPhone",
                        "enum": [
                            "HardPhone",
                            "SoftPhone",
                            "OtherPhone"
                        ]
                    },
                    "serial": {
                        "type": "string",
                        "description": "Serial number for HardPhone (is returned only when the phone is shipped and provisioned)"
                    },
                    "featureEnabled": {
                        "type": "boolean",
                        "description": "Specifies if Automatic Location Updates feature is enabled"
                    },
                    "name": {
                        "type": "string",
                        "description": "Device name"
                    },
                    "model": {
                        "$ref": "#/components/schemas/AutomaticLocationUpdatesModelInfo"
                    },
                    "site": {
                        "$ref": "#/components/schemas/AutomaticLocationUpdatesSiteInfo"
                    },
                    "phoneLines": {
                        "description": "Phone lines information",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AutomaticLocationUpdatesPhoneLine"
                        }
                    }
                }
            },
            "CountryInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a home country"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a home country"
                    },
                    "name": {
                        "type": "string",
                        "description": "Official name of a home country"
                    },
                    "isoCode": {
                        "type": "string",
                        "description": "ISO code of a country"
                    },
                    "callingCode": {
                        "type": "string",
                        "description": "Calling code of a country"
                    }
                }
            },
            "CallQueueExtensionInfo": {
                "type": "object",
                "properties": {
                    "slaGoal": {
                        "type": "integer",
                        "description": "Target percentage of calls that must be answered by agents within the service level time threshold"
                    },
                    "slaThresholdSeconds": {
                        "type": "integer",
                        "description": "Period of time in seconds that is considered to be an acceptable service level"
                    },
                    "includeAbandonedCalls": {
                        "type": "boolean",
                        "description": "If 'True' abandoned calls (hanged up prior to being served) are included into service level calculation"
                    },
                    "abandonedThresholdSeconds": {
                        "type": "integer",
                        "description": "Period of time in seconds specifying abandoned calls duration - calls that are shorter will not be included into the calculation of service level.; zero value means that abandoned calls of any duration will be included into calculation"
                    }
                }
            },
            "ConferencePhoneNumberInfo": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "Dial-in phone number to connect to a conference"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "'True' if the number is default for the conference. Default conference number is a domestic number that can be set by user (otherwise it is set by the system). Only one default number per country is allowed"
                    }
                }
            },
            "PagingDeviceInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a paging device"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Link to a paging device resource"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a paging device"
                    }
                }
            },
            "ContactInfoCreationRequest": {
                "type": "object",
                "required": [
                    "firstName",
                    "lastName",
                    "email"
                ],
                "properties": {
                    "firstName": {
                        "type": "string",
                        "description": "For User extension type only. Extension user first name"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "For User extension type only. Extension user last name"
                    },
                    "company": {
                        "type": "string",
                        "description": "Extension user company name"
                    },
                    "jobTitle": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of extension user"
                    },
                    "businessPhone": {
                        "type": "string",
                        "description": "Extension user contact phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format"
                    },
                    "mobilePhone": {
                        "type": "string",
                        "description": "Extension user mobile (**non** Toll Free) phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) (with '+' sign) format"
                    },
                    "businessAddress": {
                        "$ref": "#/components/schemas/ContactBusinessAddressInfo"
                    },
                    "emailAsLoginName": {
                        "type": "boolean",
                        "description": " If 'True' then contact email is enabled as login name for this user. Please note that email should be unique in this case. The default value is 'False'"
                    },
                    "pronouncedName": {
                        "$ref": "#/components/schemas/PronouncedNameInfo"
                    },
                    "department": {
                        "type": "string",
                        "description": "Extension user department, if any"
                    }
                }
            },
            "WirelessPointInfoRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a wireless point"
                    },
                    "bssid": {
                        "type": "string",
                        "description": "Unique 48-bit identifier of the wireless access point complying with MAC address conventions"
                    },
                    "name": {
                        "type": "string",
                        "description": "Wireless access point name"
                    },
                    "site": {
                        "$ref": "#/components/schemas/AutomaticLocationUpdatesSiteInfo"
                    },
                    "emergencyAddress": {
                        "$ref": "#/components/schemas/LocationUpdatesEmergencyAddressInfoRequest"
                    },
                    "emergencyLocationId": {
                        "type": "string",
                        "description": "Emergency response location (address) internal identifier. Only one of a pair `emergencyAddress` or `emergencyLocationId` should be specified, otherwise the error is returned"
                    }
                }
            },
            "CallMonitoringExtensionUpdate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Only the following extension types are allowed: User, DigitalUser, VirtualUser, FaxUser, Limited"
                    },
                    "permissions": {
                        "description": "Set of call monitoring group permissions granted to the specified extension. In order to remove the specified extension from a call monitoring group use an empty value",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "Monitoring",
                                "Monitored"
                            ]
                        }
                    }
                }
            },
            "SwitchValidated": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a switch"
                    },
                    "chassisId": {
                        "type": "string",
                        "description": "Unique identifier of a network switch"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Valid",
                            "Invalid"
                        ],
                        "description": "Validation result status"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            },
            "CallQueueMemberInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a call queue member"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a call queue member"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Extension number of a call queue member"
                    }
                }
            },
            "CallQueueInfoRequest": {
                "type": "object",
                "properties": {
                    "slaGoal": {
                        "type": "integer",
                        "description": "Target percentage of calls that must be answered by agents within the service level time threshold"
                    },
                    "slaThresholdSeconds": {
                        "type": "integer"
                    },
                    "includeAbandonedCalls": {
                        "type": "boolean"
                    },
                    "abandonedThresholdSeconds": {
                        "type": "integer"
                    }
                }
            },
            "TaskResultInfo": {
                "type": "object",
                "properties": {
                    "records": {
                        "description": "Detailed task results by elements from initial request",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskResultRecord"
                        }
                    }
                }
            },
            "ExtensionPermissions": {
                "type": "object",
                "description": "Extension permissions, corresponding to the Service Web permissions 'Admin' and 'InternationalCalling'",
                "properties": {
                    "admin": {
                        "$ref": "#/components/schemas/PermissionInfo"
                    },
                    "internationalCalling": {
                        "$ref": "#/components/schemas/PermissionInfo"
                    }
                }
            },
            "WirelessPointValidated": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a wireless point"
                    },
                    "bssid": {
                        "type": "string",
                        "description": "Unique 48-bit identifier of the wireless access point complying with MAC address conventions"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Valid",
                            "Invalid"
                        ],
                        "description": "Validation result status"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            },
            "InboundFaxesInfo": {
                "type": "object",
                "properties": {
                    "notifyByEmail": {
                        "type": "boolean",
                        "description": "Email notification flag"
                    },
                    "notifyBySms": {
                        "type": "boolean",
                        "description": "SMS notification flag"
                    },
                    "advancedEmailAddresses": {
                        "type": "array",
                        "description": "List of recipient email addresses for inbound fax notifications. Returned if specified, in both modes (advanced/basic). Applied in advanced mode only",
                        "items": {
                            "type": "string"
                        }
                    },
                    "advancedSmsEmailAddresses": {
                        "type": "array",
                        "description": "List of recipient phone numbers for inbound fax notifications. Returned if specified, in both modes (advanced/basic). Applied in advanced mode only",
                        "items": {
                            "type": "string"
                        }
                    },
                    "includeAttachment": {
                        "type": "boolean",
                        "description": "Indicates whether fax should be attached to email"
                    },
                    "markAsRead": {
                        "type": "boolean",
                        "description": "Indicates whether email should be automatically marked as read"
                    }
                }
            },
            "InboundTextsInfo": {
                "type": "object",
                "properties": {
                    "notifyByEmail": {
                        "type": "boolean",
                        "description": "Email notification flag"
                    },
                    "notifyBySms": {
                        "type": "boolean",
                        "description": "SMS notification flag"
                    },
                    "advancedEmailAddresses": {
                        "type": "array",
                        "description": "List of recipient email addresses for inbound text message notifications. Returned if specified, in both modes (advanced/basic). Applied in advanced mode only",
                        "items": {
                            "type": "string"
                        }
                    },
                    "advancedSmsEmailAddresses": {
                        "type": "array",
                        "description": "List of recipient phone numbers for inbound text message notifications. Returned if specified, in both modes (advanced/basic). Applied in advanced mode only",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "VoicemailsInfo": {
                "type": "object",
                "properties": {
                    "notifyByEmail": {
                        "type": "boolean",
                        "description": "Email notification flag"
                    },
                    "notifyBySms": {
                        "type": "boolean",
                        "description": "SMS notification flag"
                    },
                    "advancedEmailAddresses": {
                        "type": "array",
                        "description": "List of recipient email addresses for voicemail notifications. Returned if specified, in both modes (advanced/basic). Applied in advanced mode only",
                        "items": {
                            "type": "string"
                        }
                    },
                    "advancedSmsEmailAddresses": {
                        "type": "array",
                        "description": "List of recipient phone numbers for voicemail notifications. Returned if specified, in both modes (advanced/basic). Applied in advanced mode only",
                        "items": {
                            "type": "string"
                        }
                    },
                    "includeAttachment": {
                        "type": "boolean",
                        "description": "Indicates whether voicemail should be attached to email"
                    },
                    "markAsRead": {
                        "type": "boolean",
                        "description": "Indicates whether email should be automatically marked as read"
                    }
                }
            },
            "RegionalSettings": {
                "type": "object",
                "properties": {
                    "homeCountry": {
                        "$ref": "#/components/schemas/CountryInfo"
                    },
                    "timezone": {
                        "$ref": "#/components/schemas/TimezoneInfo"
                    },
                    "language": {
                        "$ref": "#/components/schemas/LanguageInfo"
                    },
                    "greetingLanguage": {
                        "$ref": "#/components/schemas/GreetingLanguageInfo"
                    },
                    "formattingLocale": {
                        "$ref": "#/components/schemas/FormattingLocaleInfo"
                    },
                    "timeFormat": {
                        "type": "string",
                        "description": "Time format setting. The default value is '12h' = ['12h', '24h']",
                        "enum": [
                            "12h",
                            "24h"
                        ]
                    }
                }
            },
            "ExtensionStatusInfo": {
                "type": "object",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "A free-form user comment, describing the status change reason"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Type of suspension",
                        "enum": [
                            "Voluntarily",
                            "Involuntarily"
                        ]
                    }
                }
            },
            "Roles": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a role"
                    }
                }
            },
            "ServiceInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a service info resource"
                    },
                    "billingPlan": {
                        "$ref": "#/components/schemas/BillingPlanInfo"
                    },
                    "brand": {
                        "$ref": "#/components/schemas/BrandInfo"
                    },
                    "servicePlan": {
                        "$ref": "#/components/schemas/ServicePlanInfo"
                    },
                    "targetServicePlan": {
                        "$ref": "#/components/schemas/TargetServicePlanInfo"
                    }
                }
            },
            "LocationInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a location"
                    },
                    "areaCode": {
                        "type": "string",
                        "description": "Area code of the location"
                    },
                    "city": {
                        "type": "string",
                        "description": "Official name of the city, belonging to the certain state"
                    },
                    "npa": {
                        "type": "string",
                        "description": "Area code of the location (3-digit usually), according to the NANP number format, that can be summarized as NPA-NXX-xxxx and covers Canada, the United States, parts of the Caribbean Sea, and some Atlantic and Pacific islands. See for details North American Numbering Plan"
                    },
                    "nxx": {
                        "type": "string",
                        "description": "Central office code of the location, according to the NANP number format, that can be summarized as NPA-NXX-xxxx and covers Canada, the United States, parts of the Caribbean Sea, and some Atlantic and Pacific islands. See for details North American Numbering Plan"
                    },
                    "state": {
                        "type": "string",
                        "description": "ID and URI of the state this location belongs to, see State Info"
                    }
                }
            },
            "CallerIdByFeature": {
                "type": "object",
                "properties": {
                    "feature": {
                        "type": "string",
                        "enum": [
                            "RingOut",
                            "RingMe",
                            "CallFlip",
                            "FaxNumber",
                            "AdditionalSoftphone",
                            "Alternate",
                            "CommonPhone",
                            "MobileApp",
                            "Delegated"
                        ]
                    },
                    "callerId": {
                        "$ref": "#/components/schemas/CallerIdByFeatureInfo"
                    }
                }
            },
            "ProvisioningNavigationInfo": {
                "type": "object",
                "properties": {
                    "firstPage": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfoUri"
                    },
                    "nextPage": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfoUri"
                    },
                    "previousPage": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfoUri"
                    },
                    "lastPage": {
                        "$ref": "#/components/schemas/ProvisioningNavigationInfoUri"
                    }
                }
            },
            "ProvisioningPagingInfo": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result is empty (because non-existent page was specified or perPage=0 was requested)"
                    },
                    "perPage": {
                        "type": "integer",
                        "description": "Current page size, describes how many items are in each page. Default value is 100. Maximum value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000) is applied"
                    },
                    "pageStart": {
                        "type": "integer",
                        "description": "The zero-based number of the first element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "pageEnd": {
                        "type": "integer",
                        "description": "The zero-based index of the last element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "totalPages": {
                        "type": "integer",
                        "description": "The total number of pages in a dataset. May be omitted for some resources due to performance reasons"
                    },
                    "totalElements": {
                        "type": "integer",
                        "description": "The total number of elements in a dataset. May be omitted for some resource due to performance reasons"
                    }
                }
            },
            "SwitchSiteInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a site. The company identifier value is 'main-site'"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a site"
                    }
                }
            },
            "BulkTaskInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a task for multiple switches creation"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Accepted",
                            "Failed"
                        ],
                        "description": "Status of a task"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Task creation time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Time of the task latest modification"
                    }
                }
            },
            "ReferenceInfo": {
                "type": "object",
                "properties": {
                    "ref": {
                        "type": "string",
                        "description": "Non-RC identifier of an extension"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of external identifier",
                        "enum": [
                            "PartnerId",
                            "CustomerDirectoryId"
                        ]
                    }
                }
            },
            "ServiceFeatureInfo": {
                "type": "object",
                "properties": {
                    "featureName": {
                        "type": "string",
                        "description": "Feature name",
                        "enum": [
                            "AccountFederation",
                            "Archiver",
                            "AutomaticCallRecordingMute",
                            "AutomaticInboundCallRecording",
                            "AutomaticOutboundCallRecording",
                            "BlockedMessageForwarding",
                            "Calendar",
                            "CallerIdControl",
                            "CallForwarding",
                            "CallPark",
                            "CallParkLocations",
                            "CallSupervision",
                            "CallSwitch",
                            "CallQualitySurvey",
                            "Conferencing",
                            "ConfigureDelegates",
                            "DeveloperPortal",
                            "DND",
                            "DynamicConference",
                            "EmergencyAddressAutoUpdate",
                            "EmergencyCalling",
                            "EncryptionAtRest",
                            "ExternalDirectoryIntegration",
                            "Fax",
                            "FaxReceiving",
                            "FreeSoftPhoneLines",
                            "HDVoice",
                            "HipaaCompliance",
                            "Intercom",
                            "InternationalCalling",
                            "InternationalSMS",
                            "LinkedSoftphoneLines",
                            "MMS",
                            "OnDemandCallRecording",
                            "Pager",
                            "PagerReceiving",
                            "Paging",
                            "PasswordAuth",
                            "PromoMessage",
                            "Reports",
                            "Presence",
                            "RCTeams",
                            "RingOut",
                            "SalesForce",
                            "SharedLines",
                            "SingleExtensionUI",
                            "SiteCodes",
                            "SMS",
                            "SMSReceiving",
                            "SoftPhoneUpdate",
                            "TelephonySessions",
                            "UserManagement",
                            "VideoConferencing",
                            "VoipCalling",
                            "VoipCallingOnMobile",
                            "Voicemail",
                            "VoicemailToText",
                            "WebPhone"
                        ]
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Feature status, shows feature availability for the extension"
                    }
                }
            },
            "PhoneNumberInfoConferencing": {
                "type": "object",
                "properties": {
                    "country": {
                        "$ref": "#/components/schemas/GetCountryInfoConferencing"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "'True' if the number is default for the conference. Default conference number is a domestic number that can be set by user (otherwise it is set by the system). Only one default number per country is allowed"
                    },
                    "hasGreeting": {
                        "type": "boolean",
                        "description": "'True' if the greeting message is played on this number"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location (city, region, state) of a conference phone number"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Dial-in phone number to connect to a conference"
                    },
                    "premium": {
                        "type": "boolean",
                        "description": "Indicates if the number is 'premium' (account phone number with the `ConferencingNumber` usageType)"
                    }
                }
            },
            "PrivateIpRangeInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "startIp": {
                        "type": "string"
                    },
                    "endIp": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Network name"
                    },
                    "emergencyAddress": {
                        "$ref": "#/components/schemas/LocationUpdatesEmergencyAddressInfo"
                    },
                    "emergencyLocationId": {
                        "type": "string",
                        "description": "Emergency response location (address) internal identifier. Only one of a pair `emergencyAddress` or `emergencyLocationId` should be specified, otherwise the error is returned"
                    }
                }
            },
            "CallQueueInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a call queue"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a call queue"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Extension number of a call queue"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a call queue"
                    }
                }
            },
            "PrivateIpRangeInfoRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "startIp": {
                        "type": "string"
                    },
                    "endIp": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Network name"
                    },
                    "emergencyAddress": {
                        "$ref": "#/components/schemas/LocationUpdatesEmergencyAddressInfoRequest"
                    },
                    "emergencyLocationId": {
                        "type": "string",
                        "description": "Emergency response location (address) internal identifier. Only one of a pair `emergencyAddress` or `emergencyLocationId` should be specified, otherwise the error is returned"
                    }
                }
            },
            "ContactInfoUpdateRequest": {
                "type": "object",
                "properties": {
                    "firstName": {
                        "type": "string",
                        "description": "For User extension type only. Extension user first name"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "For User extension type only. Extension user last name"
                    },
                    "company": {
                        "type": "string",
                        "description": "Extension user company name"
                    },
                    "jobTitle": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of extension user"
                    },
                    "businessPhone": {
                        "type": "string",
                        "description": "Extension user contact phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format"
                    },
                    "mobilePhone": {
                        "type": "string",
                        "description": "Extension user mobile (**non** Toll Free) phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) (with '+' sign) format"
                    },
                    "businessAddress": {
                        "$ref": "#/components/schemas/ContactBusinessAddressInfo"
                    },
                    "emailAsLoginName": {
                        "type": "boolean",
                        "description": " If 'True' then contact email is enabled as login name for this user. Please note that email should be unique in this case. The default value is 'False'"
                    },
                    "pronouncedName": {
                        "$ref": "#/components/schemas/PronouncedNameInfo"
                    },
                    "department": {
                        "type": "string",
                        "description": "Extension user department, if any"
                    }
                }
            },
            "ProfileImageInfo": {
                "type": "object",
                "required": [
                    "uri"
                ],
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Link to a profile image. If an image is not uploaded for an extension, only uri is returned"
                    },
                    "etag": {
                        "type": "string",
                        "description": "Identifier of an image"
                    },
                    "lastModified": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The datetime when an image was last updated in ISO 8601 format, for example 2016-03-10T18:07:52.534Z"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The type of an image"
                    },
                    "scales": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProfileImageInfoURI"
                        },
                        "description": "List of URIs to profile images in different dimensions"
                    }
                }
            },
            "PublicIpRangeInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "startIp": {
                        "type": "string"
                    },
                    "endIp": {
                        "type": "string"
                    }
                }
            },
            "ExtensionInfoEventBody": {
                "type": "object",
                "properties": {
                    "extensionId": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    },
                    "eventType": {
                        "type": "string",
                        "description": "Type of extension info change",
                        "enum": [
                            "Update",
                            "Delete"
                        ]
                    },
                    "hints": {
                        "type": "array",
                        "description": "Returned for 'Update' event type only. The possible values are: /nAccountInfo - change of account parameters/nExtensionInfo - change of contact info, service features, departments, status/nPhoneNumber - change of phone numbers/nRole - change of permissions/nProfileImage - change of profile image",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Internal identifier of a subscription owner extension"
                    }
                }
            },
            "DepartmentInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a department extension"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a department extension"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Number of a department extension"
                    }
                }
            },
            "ExtensionLanguageInfoRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "internal Identifier of a language"
                    }
                }
            },
            "AutomaticLocationUpdatesModelInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Device model identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Device name"
                    },
                    "features": {
                        "description": "Device feature or multiple features supported",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "BLA",
                                "Intercom",
                                "Paging",
                                "HELD"
                            ]
                        }
                    }
                }
            },
            "TaskResultRecord": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the created/updated element - wireless point or network switch"
                    },
                    "bssid": {
                        "type": "string",
                        "description": "Unique 48-bit identifier of the wireless access point complying with MAC address conventions. Returned only for 'Wireless Points Bulk Create' tasks"
                    },
                    "chassisId": {
                        "type": "string",
                        "description": "Unique identifier of a network switch. Returned only for 'Switches Bulk Create' tasks"
                    },
                    "status": {
                        "type": "string",
                        "description": "Operation status"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/TaskResultRecordErrorsInfo"
                    }
                }
            },
            "ProfileImageInfoURI": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string"
                    }
                }
            },
            "ExtensionFormattingLocaleInfoRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal Identifier of a formatting language"
                    }
                }
            },
            "PronouncedNameInfo": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Voice name type. 'Default' - default extension name; first name and last name specified in user profile; 'TextToSpeech' - custom text; user name spelled the way it sounds and specified by user; 'Recorded' - custom audio, user name recorded in user's own voice (supported only for extension retrieval)",
                        "enum": [
                            "Default",
                            "TextToSpeech",
                            "Recorded"
                        ]
                    },
                    "text": {
                        "type": "string",
                        "description": "Custom text"
                    }
                }
            },
            "TimezoneInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a timezone"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a timezone"
                    },
                    "name": {
                        "type": "string",
                        "description": "Short name of a timezone"
                    },
                    "description": {
                        "type": "string",
                        "description": "Meaningful description of the timezone"
                    }
                }
            },
            "BillingPlanInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a billing plan"
                    },
                    "name": {
                        "type": "string",
                        "description": "Billing plan name"
                    },
                    "durationUnit": {
                        "type": "string",
                        "description": "Duration period",
                        "enum": [
                            "Month",
                            "Day"
                        ]
                    },
                    "duration": {
                        "type": "string",
                        "description": "Number of duration units"
                    },
                    "type": {
                        "type": "string",
                        "description": "Billing plan type",
                        "enum": [
                            "Initial",
                            "Regular",
                            "Suspended",
                            "Trial",
                            "TrialNoCC",
                            "Free"
                        ]
                    }
                }
            },
            "TargetServicePlanInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a target service plan"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a target service plan"
                    }
                }
            },
            "ProvisioningNavigationInfoUri": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string"
                    }
                }
            },
            "ExtensionGreetingLanguageInfoRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "internal Identifier of a greeting language"
                    }
                }
            },
            "CallerIdDeviceInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a device"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Link to a device resource"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Name of a device"
                    }
                }
            },
            "CallerIdByDeviceInfo": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "If 'PhoneNumber' value is specified, then a certain phone number is shown as a caller ID when using this telephony feature. If 'Blocked' value is specified, then a caller ID is hidden. The value 'CurrentLocation' can be specified for 'RingOut' feature only. The default is 'PhoneNumber' = ['PhoneNumber', 'Blocked', 'CurrentLocation']"
                    },
                    "phoneInfo": {
                        "$ref": "#/components/schemas/CallerIdPhoneInfo"
                    }
                }
            },
            "GreetingLanguageInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a greeting language"
                    },
                    "localeCode": {
                        "type": "string",
                        "description": "Localization code of a greeting language"
                    },
                    "name": {
                        "type": "string",
                        "description": "Official name of a greeting language"
                    }
                }
            },
            "CallerIdByFeatureInfo": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "If 'PhoneNumber' value is specified, then a certain phone number is shown as a caller ID when using this telephony feature. If 'Blocked' value is specified, then a caller ID is hidden. The value 'CurrentLocation' can be specified for 'RingOut' feature only. The default is 'PhoneNumber' = ['PhoneNumber', 'Blocked', 'CurrentLocation']"
                    },
                    "phoneInfo": {
                        "$ref": "#/components/schemas/CallerIdPhoneInfo"
                    }
                }
            },
            "FormattingLocaleInfo": {
                "type": "object",
                "description": "Official name of a formatting language",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a formatting language"
                    },
                    "localeCode": {
                        "type": "string",
                        "description": "Localization code of a formatting language"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "BrandInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a brand"
                    },
                    "name": {
                        "type": "string",
                        "description": "Brand name, for example  RingCentral UK ,  ClearFax "
                    },
                    "homeCountry": {
                        "$ref": "#/components/schemas/CountryInfo"
                    }
                }
            },
            "ExtensionCountryInfoRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "internal Identifier of a country"
                    }
                }
            },
            "ExtensionTimezoneInfoRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "internal Identifier of a timezone"
                    }
                }
            },
            "ExtensionInfoGrants": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of an extension"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Extension short number (usually 3 or 4 digits)"
                    },
                    "type": {
                        "type": "string",
                        "description": "Extension type",
                        "enum": [
                            "User",
                            "Fax User",
                            "VirtualUser",
                            "DigitalUser",
                            "Department",
                            "Announcement",
                            "Voicemail",
                            "SharedLinesGroup",
                            "PagingOnly",
                            "IvrMenu",
                            "ApplicationExtension",
                            "Park Location"
                        ]
                    }
                }
            },
            "AutomaticLocationUpdatesPhoneLine": {
                "type": "object",
                "properties": {
                    "lineType": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "Standalone",
                            "StandaloneFree",
                            "BlaPrimary",
                            "BlaSecondary",
                            "BLF"
                        ]
                    },
                    "phoneInfo": {
                        "$ref": "#/components/schemas/AutomaticLocationUpdatesPhoneNumberInfo"
                    }
                }
            },
            "ValidationError": {
                "type": "object",
                "properties": {
                    "errorCode": {
                        "type": "string",
                        "description": "Error code"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message"
                    },
                    "parameterName": {
                        "type": "string",
                        "description": "Name of invalid parameter"
                    }
                }
            },
            "PermissionInfo": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies if a permission is enabled or not"
                    }
                }
            },
            "ServicePlanInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a service plan"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a service plan"
                    },
                    "edition": {
                        "type": "string",
                        "description": "Edition of a service plan"
                    }
                }
            },
            "GetCountryInfoConferencing": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a country"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a country"
                    },
                    "callingCode": {
                        "type": "string",
                        "description": "Country calling code defined by ITU-T recommendations [E.123](https://www.itu.int/rec/T-REC-E.123-200102-I/en) and [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I)"
                    },
                    "emergencyCalling": {
                        "type": "boolean",
                        "description": "Emergency calling feature availability/emergency address requirement indicator"
                    },
                    "isoCode": {
                        "type": "string",
                        "description": "Country code according to the ISO standard, see [ISO 3166](https://www.iso.org/iso-3166-country-codes.html)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Official name of a country"
                    }
                }
            },
            "CallerIdPhoneInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a phone number"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Link to a phone number resource"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) (with '+' sign) format"
                    }
                }
            },
            "AutomaticLocationUpdatesPhoneNumberInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Internal identifier of a phone number"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number"
                    }
                }
            },
            "TaskResultRecordErrorsInfo": {
                "type": "object",
                "properties": {
                    "errorCode": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "parameterName": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "ParsePhoneNumberRequest": {
                "type": "object",
                "properties": {
                    "originalStrings": {
                        "type": "array",
                        "description": "Phone numbers passed in a string. The maximum value of phone numbers is limited to 64. The maximum number of symbols in each phone number in a string is 64",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ParsePhoneNumberResponse": {
                "type": "object",
                "required": [
                    "homeCountry",
                    "phoneNumbers"
                ],
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a resource"
                    },
                    "homeCountry": {
                        "$ref": "#/components/schemas/GetCountryInfoNumberParser"
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "description": "Parsed phone numbers data",
                        "items": {
                            "$ref": "#/components/schemas/PhoneNumberInfoNumberParser"
                        }
                    }
                }
            },
            "GetCountryInfoNumberParser": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a country"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a country"
                    },
                    "callingCode": {
                        "type": "string",
                        "description": "Country calling code defined by ITU-T recommendations E.123 and E.164, see Calling Codes"
                    },
                    "emergencyCalling": {
                        "type": "boolean",
                        "description": "Emergency calling feature availability/emergency address requirement indicator"
                    },
                    "isoCode": {
                        "type": "string",
                        "description": "Country code according to the ISO standard, see ISO 3166"
                    },
                    "name": {
                        "type": "string",
                        "description": "Official name of a country"
                    }
                }
            },
            "PhoneNumberInfoNumberParser": {
                "type": "object",
                "properties": {
                    "areaCode": {
                        "type": "string",
                        "description": "Area code of location. The portion of the [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) number that identifies a specific geographic region/numbering area of the national numbering plan (NANP); that can be summarized as `NPA-NXX-xxxx` and covers Canada, the United States, parts of the Caribbean Sea, and some Atlantic and Pacific islands. See [North American Numbering Plan] (https://en.wikipedia.org/wiki/North_American_Numbering_Plan) for details"
                    },
                    "country": {
                        "$ref": "#/components/schemas/GetCountryInfoNumberParser"
                    },
                    "dialable": {
                        "type": "string",
                        "description": "Dialing format of a phone number"
                    },
                    "e164": {
                        "type": "string",
                        "description": "Phone number [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format"
                    },
                    "formattedInternational": {
                        "type": "string",
                        "description": "International format of a phone number"
                    },
                    "formattedNational": {
                        "type": "string",
                        "description": "Domestic format of a phone number"
                    },
                    "originalString": {
                        "type": "string",
                        "description": "One of the numbers to be parsed, passed as a string in response"
                    },
                    "special": {
                        "type": "boolean",
                        "description": "'True' if the number is in a special format (for example N11 code)"
                    },
                    "normalized": {
                        "type": "string",
                        "description": "Phone number [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format without plus sign ('+')"
                    },
                    "tollFree": {
                        "type": "boolean",
                        "description": "Specifies if a phone number is toll free or not"
                    },
                    "subAddress": {
                        "type": "string",
                        "description": "Sub-Address. The portion of the number that identifies a subscriber into the subscriber internal (non-public) network."
                    },
                    "subscriberNumber": {
                        "type": "string",
                        "description": " Subscriber number. The portion of the [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) number that identifies a subscriber in a network or numbering area."
                    },
                    "dtmfPostfix": {
                        "type": "string",
                        "description": "DTMF (Dual Tone Multi-Frequency) postfix"
                    }
                }
            },
            "GetDeviceInfoResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a device"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a device"
                    },
                    "sku": {
                        "type": "string",
                        "description": "Device identification number (stock keeping unit) in the format TP-ID [-AT-AC], where TP is device type (HP for RC HardPhone, DV for all other devices including softphone); ID - device model ID; AT -addon type ID; AC - addon count (if any). For example 'HP-56-2-2'"
                    },
                    "type": {
                        "type": "string",
                        "description": "Device type",
                        "default": "HardPhone",
                        "enum": [
                            "SoftPhone",
                            "OtherPhone",
                            "HardPhone"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Device name. Mandatory if ordering  SoftPhone  or  OtherPhone . Optional for  HardPhone . If not specified for HardPhone, then device  model  name is used as device  name "
                    },
                    "serial": {
                        "type": "string",
                        "description": "Serial number for HardPhone (is returned only when the phone is shipped and provisioned); endpoint_id for softphone and mobile applications"
                    },
                    "computerName": {
                        "type": "string",
                        "description": "PC name for softphone"
                    },
                    "model": {
                        "$ref": "#/components/schemas/ModelInfo"
                    },
                    "extension": {
                        "$ref": "#/components/schemas/ExtensionInfoIntId"
                    },
                    "emergencyServiceAddress": {
                        "$ref": "#/components/schemas/EmergencyServiceAddressResource"
                    },
                    "phoneLines": {
                        "description": "Phone lines information",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhoneLinesInfo"
                        }
                    },
                    "shipping": {
                        "$ref": "#/components/schemas/ShippingInfo"
                    },
                    "boxBillingId": {
                        "type": "integer",
                        "description": "Box billing identifier of a device. Applicable only for HardPhones. It is an alternative way to identify the device to be ordered. EitherT? model  structure, or  boxBillingId  must be specified forT?HardPhone"
                    },
                    "useAsCommonPhone": {
                        "type": "boolean",
                        "description": "Supported only for devices assigned to Limited extensions. If true, enables users to log in to this phone as a common phone."
                    },
                    "inCompanyNet": {
                        "type": "boolean",
                        "description": "Network location status. 'True' if the device is located in the configured corporate network (On-Net); 'False' for Off-Net location. Parameter is not returned if `EmergencyAddressAutoUpdate` feature is not enabled for the account/user, or if device network location is not determined"
                    },
                    "site": {
                        "$ref": "#/components/schemas/DeviceSiteInfo"
                    },
                    "lastLocationReportTime": {
                        "type": "string",
                        "description": "Datetime of receiving last location report in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z"
                    }
                }
            },
            "AccountDeviceUpdate": {
                "type": "object",
                "properties": {
                    "emergencyServiceAddress": {
                        "$ref": "#/components/schemas/EmergencyServiceAddressResourceRequest"
                    },
                    "extension": {
                        "$ref": "#/components/schemas/DeviceUpdateExtensionInfo"
                    },
                    "phoneLines": {
                        "$ref": "#/components/schemas/DeviceUpdatePhoneLinesInfo"
                    },
                    "useAsCommonPhone": {
                        "type": "boolean",
                        "description": "Supported only for devices assigned to Limited extensions. If true, enables users to log in to this phone as a common phone."
                    }
                }
            },
            "DeviceResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a device"
                    },
                    "uri": {
                        "type": "string",
                        "format": "uri",
                        "description": "Canonical URI of a device"
                    },
                    "sku": {
                        "type": "string",
                        "description": "Device identification number (stock keeping unit) in the format TP-ID [-AT-AC], where TP is device type (HP for RC HardPhone, DV for all other devices including softphone); ID - device model ID; AT -addon type ID; AC - addon count (if any). For example 'HP-56-2-2'"
                    },
                    "type": {
                        "type": "string",
                        "description": "Device type",
                        "default": "HardPhone",
                        "enum": [
                            "HardPhone",
                            "SoftPhone",
                            "OtherPhone",
                            "Paging",
                            "WebPhone"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a device",
                        "enum": [
                            "Online",
                            "Offline"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Device name. Mandatory if ordering SoftPhone or OtherPhone . Optional for HardPhone . If not specified for HardPhone, then device model name is used as device name"
                    },
                    "serial": {
                        "type": "string",
                        "description": "Serial number for HardPhone (is returned only when the phone is shipped and provisioned); endpoint_id for softphone and mobile applications"
                    },
                    "computerName": {
                        "type": "string",
                        "description": "PC name for softphone"
                    },
                    "model": {
                        "$ref": "#/components/schemas/ModelInfo"
                    },
                    "extension": {
                        "$ref": "#/components/schemas/ExtensionResourceIntId"
                    },
                    "phoneLines": {
                        "description": "Phone lines information",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhoneLineResource"
                        }
                    },
                    "emergencyServiceAddress": {
                        "$ref": "#/components/schemas/EmergencyServiceAddressResource"
                    },
                    "shipping": {
                        "$ref": "#/components/schemas/ShippingResource"
                    },
                    "boxBillingId": {
                        "type": "integer",
                        "description": "Box billing identifier of a device. Applicable only for HardPhones. It is an alternative way to identify the device to be ordered. Either  model structure, or boxBillingId must be specified for HardPhone"
                    },
                    "linePooling": {
                        "type": "string",
                        "description": "Pooling type of a deviceHost - device with standalone paid phone line which can be linked to Glip/Softphone instanceGuest - device with a linked phone lineNone - device without a phone line or with specific line (free, BLA, etc.) = ['Host', 'Guest', 'None']",
                        "enum": [
                            "Host",
                            "Guest",
                            "None"
                        ]
                    },
                    "useAsCommonPhone": {
                        "type": "boolean",
                        "description": "Supported only for devices assigned to Limited extensions. If true, enables users to log in to this phone as a common phone."
                    }
                }
            },
            "GetExtensionDevicesResponse": {
                "type": "object",
                "required": [
                    "navigation",
                    "paging",
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "List of extension devices",
                        "items": {
                            "$ref": "#/components/schemas/ExtensionDeviceResponse"
                        }
                    },
                    "navigation": {
                        "$ref": "#/components/schemas/DeviceProvisioningNavigationInfo"
                    },
                    "paging": {
                        "$ref": "#/components/schemas/DeviceProvisioningPagingInfo"
                    }
                }
            },
            "ModelInfo": {
                "type": "object",
                "required": [
                    "addons"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Addon identifier. For HardPhones of certain types, which are compatible with this addon identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Device name"
                    },
                    "addons": {
                        "description": "Addons description",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AddonInfo"
                        }
                    },
                    "features": {
                        "description": "Device feature or multiple features supported",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "BLA",
                                "Intercom",
                                "Paging",
                                "HELD"
                            ]
                        }
                    }
                }
            },
            "DeviceUpdateExtensionInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    }
                }
            },
            "ShippingInfo": {
                "type": "object",
                "required": [
                    "address",
                    "method"
                ],
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Shipping status of the order item. It is set to 'Initial' when the order is submitted. Then it is changed to 'Accepted' when a distributor starts processing the order. Finally it is changed to Shipped which means that distributor has shipped the device.",
                        "enum": [
                            "Initial",
                            "Accepted",
                            "Shipped"
                        ]
                    },
                    "carrier": {
                        "type": "string",
                        "description": "Shipping carrier name. Appears only if the device status is 'Shipped'"
                    },
                    "trackingNumber": {
                        "type": "string",
                        "description": "Carrier-specific tracking number. Appears only if the device status is 'Shipped'"
                    },
                    "method": {
                        "$ref": "#/components/schemas/MethodInfo"
                    },
                    "address": {
                        "$ref": "#/components/schemas/ShippingAddressInfo"
                    }
                }
            },
            "EmergencyServiceAddressResourceRequest": {
                "type": "object",
                "properties": {
                    "street": {
                        "type": "string"
                    },
                    "street2": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "zip": {
                        "type": "string"
                    },
                    "customerName": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "State/province name"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country name"
                    }
                }
            },
            "ExtensionResourceIntId": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "partnerId": {
                        "type": "string",
                        "minLength": 0,
                        "maxLength": 128,
                        "pattern": "^[\\p{Alnum}\\.\\-_]*$"
                    },
                    "extensionNumber": {
                        "type": "string"
                    },
                    "loginName": {
                        "type": "string"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ExtensionContactInfo"
                    },
                    "references": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Reference"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "User",
                            "Department",
                            "Announcement",
                            "Voicemail",
                            "DigitalUser",
                            "VirtualUser",
                            "FaxUser",
                            "PagingOnly",
                            "SharedLinesGroup",
                            "IvrMenu",
                            "ApplicationExtension",
                            "ParkLocation"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Enabled",
                            "Disabled",
                            "Frozen",
                            "NotActivated",
                            "Unassigned"
                        ]
                    },
                    "statusInfo": {
                        "$ref": "#/components/schemas/StatusInfo"
                    },
                    "departments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DepartmentResource"
                        }
                    },
                    "serviceFeatures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceFeatureValue"
                        }
                    },
                    "regionalSettings": {
                        "$ref": "#/components/schemas/RegionalSettingsInfo"
                    },
                    "setupWizardState": {
                        "type": "string",
                        "enum": [
                            "NotStarted",
                            "Incomplete",
                            "Completed",
                            "Unknown"
                        ]
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/ExtensionPermissionsResource"
                    },
                    "password": {
                        "type": "string"
                    },
                    "ivrPin": {
                        "type": "string"
                    },
                    "profileImage": {
                        "$ref": "#/components/schemas/ProfileImageResource"
                    }
                }
            },
            "PhoneLinesInfo": {
                "type": "object",
                "properties": {
                    "lineType": {
                        "type": "string",
                        "description": "Type of phone line",
                        "enum": [
                            "Standalone",
                            "StandaloneFree",
                            "BlaPrimary",
                            "BlaSecondary"
                        ]
                    },
                    "phoneInfo": {
                        "$ref": "#/components/schemas/PhoneNumberInfoIntId"
                    }
                }
            },
            "DeviceSiteInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a site"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a site"
                    }
                }
            },
            "DeviceUpdatePhoneLinesInfo": {
                "type": "object",
                "properties": {
                    "phoneLines": {
                        "type": "array",
                        "description": "Information on phone lines added to a device",
                        "items": {
                            "$ref": "#/components/schemas/UpdateDevicePhoneInfo"
                        }
                    }
                }
            },
            "ShippingResource": {
                "type": "object",
                "properties": {
                    "address": {
                        "$ref": "#/components/schemas/EmergencyServiceAddressResource"
                    },
                    "method": {
                        "$ref": "#/components/schemas/MethodResource"
                    },
                    "status": {
                        "type": "string"
                    },
                    "carrier": {
                        "type": "string"
                    },
                    "trackingNumber": {
                        "type": "string"
                    }
                }
            },
            "DeviceProvisioningNavigationInfo": {
                "type": "object",
                "properties": {
                    "firstPage": {
                        "$ref": "#/components/schemas/DeviceProvisioningNavigationInfoUri"
                    },
                    "nextPage": {
                        "$ref": "#/components/schemas/DeviceProvisioningNavigationInfoUri"
                    },
                    "previousPage": {
                        "$ref": "#/components/schemas/DeviceProvisioningNavigationInfoUri"
                    },
                    "lastPage": {
                        "$ref": "#/components/schemas/DeviceProvisioningNavigationInfoUri"
                    }
                }
            },
            "DeviceProvisioningPagingInfo": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result is empty (because non-existent page was specified or perPage=0 was requested)"
                    },
                    "perPage": {
                        "type": "integer",
                        "description": "Current page size, describes how many items are in each page. Default value is 100. Maximum value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000) is applied"
                    },
                    "pageStart": {
                        "type": "integer",
                        "description": "The zero-based number of the first element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "pageEnd": {
                        "type": "integer",
                        "description": "The zero-based index of the last element on the current page. Omitted if the page is omitted or result is empty"
                    },
                    "totalPages": {
                        "type": "integer",
                        "description": "The total number of pages in a dataset. May be omitted for some resources due to performance reasons"
                    },
                    "totalElements": {
                        "type": "integer",
                        "description": "The total number of elements in a dataset. May be omitted for some resource due to performance reasons"
                    }
                }
            },
            "ExtensionInfoIntId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Internal identifier of an extension"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of an extension"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Number of department extension"
                    },
                    "partnerId": {
                        "type": "string",
                        "description": "For Partner Applications Internal identifier of an extension created by partner. The RingCentral supports the mapping of accounts and stores the corresponding account ID/extension ID for each partner ID of a client application. In request URIs partner IDs are accepted instead of regular RingCentral native IDs as path parameters using pid = XXX clause. Though in response URIs contain the corresponding account IDs and extension IDs. In all request and response bodies these values are reflected via partnerId attributes of account and extension"
                    }
                }
            },
            "EmergencyServiceAddressResource": {
                "type": "object",
                "properties": {
                    "street": {
                        "type": "string"
                    },
                    "street2": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "zip": {
                        "type": "string"
                    },
                    "customerName": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "State/province name"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "Internal identifier of a state"
                    },
                    "stateIsoCode": {
                        "type": "string",
                        "description": "ISO code of a state"
                    },
                    "stateName": {
                        "type": "string",
                        "description": "Full name of a state"
                    },
                    "countryId": {
                        "type": "string",
                        "description": "Internal identifier of a country"
                    },
                    "countryIsoCode": {
                        "type": "string",
                        "description": "ISO code of a country"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country name"
                    },
                    "countryName": {
                        "type": "string",
                        "description": "Full name of a country"
                    },
                    "outOfCountry": {
                        "type": "boolean",
                        "description": "Specifies if emergency address is out of country"
                    }
                }
            },
            "PhoneLineResource": {
                "type": "object",
                "properties": {
                    "lineType": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "Standalone",
                            "StandaloneFree",
                            "BlaPrimary",
                            "BlaSecondary",
                            "BLF"
                        ]
                    },
                    "phoneInfo": {
                        "$ref": "#/components/schemas/PhoneNumberResourceIntId"
                    },
                    "emergencyAddress": {
                        "$ref": "#/components/schemas/EmergencyAddress"
                    }
                }
            },
            "ExtensionDeviceResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a device"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a device"
                    },
                    "sku": {
                        "type": "string",
                        "description": "Device identification number (stock keeping unit) in the format TP-ID [-AT-AC], where TP is device type (HP for RC HardPhone, DV for all other devices including softphone); ID - device model ID; AT -addon type ID; AC - addon count (if any). For example 'HP-56-2-2'"
                    },
                    "type": {
                        "type": "string",
                        "description": "Device type",
                        "default": "HardPhone",
                        "enum": [
                            "SoftPhone",
                            "OtherPhone",
                            "HardPhone"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Device name. Mandatory if ordering  SoftPhone  or  OtherPhone. Optional for  HardPhone . If not specified for HardPhone, then device model name is used as device name "
                    },
                    "status": {
                        "type": "string",
                        "description": "Device status",
                        "enum": [
                            "Offline",
                            "Online"
                        ]
                    },
                    "serial": {
                        "type": "string",
                        "description": "Serial number for HardPhone (is returned only when the phone is shipped and provisioned); endpoint_id for softphone and mobile applications"
                    },
                    "computerName": {
                        "type": "string",
                        "description": "PC name for softphone"
                    },
                    "model": {
                        "$ref": "#/components/schemas/ModelInfo"
                    },
                    "extension": {
                        "$ref": "#/components/schemas/ExtensionInfoIntId"
                    },
                    "emergencyServiceAddress": {
                        "$ref": "#/components/schemas/EmergencyServiceAddressResource"
                    },
                    "phoneLines": {
                        "description": "Phone lines information",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhoneLinesInfo"
                        }
                    },
                    "shipping": {
                        "$ref": "#/components/schemas/ShippingInfo"
                    },
                    "boxBillingId": {
                        "type": "integer",
                        "description": "Box billing identifier of a device. Applicable only for HardPhones. It is an alternative way to identify the device to be ordered. EitherT? model  structure, or  boxBillingId  must be specified forT?HardPhone"
                    },
                    "useAsCommonPhone": {
                        "type": "boolean",
                        "description": "Supported only for devices assigned to Limited extensions. If true, enables users to log in to this phone as a common phone."
                    },
                    "linePooling": {
                        "type": "string",
                        "description": "Pooling type of a deviceHost - device with standalone paid phone line which can be linked to Glip/Softphone instanceGuest - device with a linked phone lineNone - device without a phone line or with specific line (free, BLA, etc.) = ['Host', 'Guest', 'None']",
                        "enum": [
                            "Host",
                            "Guest",
                            "None"
                        ]
                    },
                    "inCompanyNet": {
                        "type": "boolean",
                        "description": "Network location status. 'True' if the device is located in the configured corporate network (On-Net); 'False' for Off-Net location. Parameter is not returned if `EmergencyAddressAutoUpdate` feature is not enabled for the account/user, or if device network location is not determined"
                    },
                    "site": {
                        "$ref": "#/components/schemas/DeviceSiteInfo"
                    },
                    "lastLocationReportTime": {
                        "type": "string",
                        "description": "Datetime of receiving last location report in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format including timezone, for example *2016-03-10T18:07:52.534Z"
                    }
                }
            },
            "RegionalSettingsInfo": {
                "type": "object",
                "properties": {
                    "timezone": {
                        "$ref": "#/components/schemas/TimezoneResource"
                    },
                    "homeCountry": {
                        "$ref": "#/components/schemas/CountryResource"
                    },
                    "language": {
                        "$ref": "#/components/schemas/LanguageResource"
                    },
                    "greetingLanguage": {
                        "$ref": "#/components/schemas/LanguageResource"
                    },
                    "formattingLocale": {
                        "$ref": "#/components/schemas/LanguageResource"
                    }
                }
            },
            "ProfileImageResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "lastModified": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "scales": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScaledProfileImageResource"
                        }
                    }
                }
            },
            "MethodResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "DeviceProvisioningNavigationInfoUri": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string"
                    }
                }
            },
            "MethodInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Method identifier. The default value is 1 (Ground)",
                        "enum": [
                            "1",
                            "2",
                            "3"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Method name, corresponding to the identifier",
                        "enum": [
                            "Ground",
                            "2 Day",
                            "Overnight"
                        ]
                    }
                }
            },
            "ShippingAddressInfo": {
                "type": "object",
                "properties": {
                    "customerName": {
                        "type": "string",
                        "description": "Name of a receiver"
                    },
                    "street": {
                        "type": "string",
                        "description": "Street address, line 1 - street address, P.O. box, company name, c/o"
                    },
                    "street2": {
                        "type": "string",
                        "description": "Street address, line 2 - apartment, suite, unit, building, floor, etc."
                    },
                    "city": {
                        "type": "string",
                        "description": "City name"
                    },
                    "state": {
                        "type": "string",
                        "description": "State/province name"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "Internal identifier of a state"
                    },
                    "stateIsoCode": {
                        "type": "string",
                        "description": "ISO code of a state"
                    },
                    "stateName": {
                        "type": "string",
                        "description": "Full name of a state"
                    },
                    "countryId": {
                        "type": "string",
                        "description": "Internal identifier of a country"
                    },
                    "countryIsoCode": {
                        "type": "string",
                        "description": "ISO code of a country"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country name"
                    },
                    "countryName": {
                        "type": "string",
                        "description": "Full name of a country"
                    },
                    "zip": {
                        "type": "string",
                        "description": "Zip code"
                    }
                }
            },
            "ExtensionContactInfo": {
                "type": "object",
                "properties": {
                    "firstName": {
                        "type": "string",
                        "description": "For User extension type only. Extension user first name"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "For User extension type only. Extension user last name"
                    },
                    "company": {
                        "type": "string",
                        "description": "Extension user company name"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of extension user"
                    },
                    "businessPhone": {
                        "type": "string",
                        "description": "Extension user contact phone number"
                    },
                    "businessAddress": {
                        "$ref": "#/components/schemas/ContactAddressInfoDevices"
                    }
                }
            },
            "ExtensionPermissionsResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "admin": {
                        "$ref": "#/components/schemas/Permission"
                    },
                    "internationalCalling": {
                        "$ref": "#/components/schemas/Permission"
                    },
                    "freeSoftPhoneDigitalLine": {
                        "$ref": "#/components/schemas/Permission"
                    }
                }
            },
            "UpdateDevicePhoneInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a phone number"
                    }
                }
            },
            "AddonInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "count": {
                        "type": "string",
                        "format": "int32"
                    }
                }
            },
            "Reference": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "PartnerId",
                            "CustomerDirectoryId"
                        ]
                    },
                    "ref": {
                        "type": "string"
                    }
                }
            },
            "DepartmentResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "id": {
                        "type": "string"
                    },
                    "extensionNumber": {
                        "type": "string"
                    }
                }
            },
            "PhoneNumberInfoIntId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Internal identifier of a phone number"
                    },
                    "country": {
                        "$ref": "#/components/schemas/PhoneNumberCountryInfo"
                    },
                    "extension": {
                        "$ref": "#/components/schemas/ExtensionInfo"
                    },
                    "label": {
                        "type": "string",
                        "description": "Custom user name of a phone number, if any"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location (City, State). Filled for local US numbers"
                    },
                    "paymentType": {
                        "type": "string",
                        "description": "Payment type. 'External' is returned for forwarded numbers which are not terminated in the RingCentral phone system",
                        "enum": [
                            "External",
                            "TollFree",
                            "Local"
                        ]
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a phone number. If the value is 'Normal', the phone number is ready to be used. Otherwise it is an external number not yet ported to RingCentral"
                    },
                    "type": {
                        "type": "string",
                        "description": "Phone number type",
                        "enum": [
                            "VoiceFax",
                            "FaxOnly",
                            "VoiceOnly"
                        ]
                    },
                    "usageType": {
                        "type": "string",
                        "description": "Usage type of the phone number",
                        "enum": [
                            "MainCompanyNumber",
                            "AdditionalCompanyNumber",
                            "CompanyNumber",
                            "DirectNumber",
                            "CompanyFaxNumber",
                            "ForwardedNumber",
                            "ForwardedCompanyNumber",
                            "ContactCenterNumber"
                        ]
                    }
                }
            },
            "PhoneNumberResourceIntId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Internal identifier of a phone number"
                    },
                    "country": {
                        "$ref": "#/components/schemas/CountryResource"
                    },
                    "extension": {
                        "$ref": "#/components/schemas/PhoneNumberExtensionInfo"
                    },
                    "label": {
                        "type": "string",
                        "description": "Custom user name of a phone number, if any"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location (City, State). Filled for local US numbers"
                    },
                    "paymentType": {
                        "type": "string",
                        "description": "Payment type. 'External' is returned for forwarded numbers which are not terminated in the RingCentral phone system = ['External', 'TollFree', 'Local'],",
                        "enum": [
                            "External",
                            "TollFree",
                            "Local"
                        ]
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number",
                        "minLength": 0,
                        "maxLength": 128
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a phone number. If the value is 'Normal', the phone number is ready to be used. Otherwise it is an external number not yet ported to RingCentral ,"
                    },
                    "usageType": {
                        "type": "string",
                        "enum": [
                            "CompanyNumber",
                            "MainCompanyNumber",
                            "AdditionalCompanyNumber",
                            "DirectNumber",
                            "CompanyFaxNumber",
                            "ForwardedNumber",
                            "ForwardedCompanyNumber",
                            "ContactCenterNumber"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of a phone number",
                        "enum": [
                            "VoiceFax",
                            "FaxOnly",
                            "VoiceOnly"
                        ]
                    },
                    "reservationId": {
                        "type": "string",
                        "description": "Internal identifier of a phone number reservation; encoded data including reservation type (by brand, by account, by session), particular brand/account/session data, and reservation date and time"
                    }
                }
            },
            "StatusInfo": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string"
                    },
                    "till": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "comment": {
                        "type": "string"
                    }
                }
            },
            "ServiceFeatureValue": {
                "type": "object",
                "properties": {
                    "featureName": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "reason": {
                        "type": "string",
                        "enum": [
                            "Available",
                            "AccountTypeLimitation",
                            "ExtensionTypeLimitation",
                            "AccountLimitation",
                            "ExtensionLimitation",
                            "InsufficientPermissions",
                            "ApplicationLimitation"
                        ]
                    }
                }
            },
            "EmergencyAddress": {
                "type": "object",
                "properties": {
                    "required": {
                        "type": "boolean",
                        "description": " 'True' if specifying of emergency address is required"
                    },
                    "localOnly": {
                        "type": "boolean",
                        "description": " 'True' if only local emergency address can be specified"
                    }
                }
            },
            "PhoneNumberCountryInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a home country"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a home country"
                    },
                    "name": {
                        "type": "string",
                        "description": "Official name of a home country"
                    }
                }
            },
            "LanguageResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "localeCode": {
                        "type": "string"
                    }
                }
            },
            "Permission": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "PhoneNumberExtensionInfo": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "id": {
                        "type": "string"
                    },
                    "partnerId": {
                        "type": "string",
                        "minLength": 0,
                        "maxLength": 128,
                        "pattern": "^[\\p{Alnum}\\.\\-_]*$"
                    },
                    "extensionNumber": {
                        "type": "string"
                    },
                    "loginName": {
                        "type": "string"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ExtensionContactInfo"
                    },
                    "references": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Reference"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "User",
                            "Department",
                            "Announcement",
                            "Voicemail",
                            "DigitalUser",
                            "VirtualUser",
                            "FaxUser",
                            "PagingOnly",
                            "SharedLinesGroup",
                            "IvrMenu",
                            "ApplicationExtension",
                            "ParkLocation"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Enabled",
                            "Disabled",
                            "Frozen",
                            "NotActivated",
                            "Unassigned"
                        ]
                    },
                    "statusInfo": {
                        "$ref": "#/components/schemas/StatusInfo"
                    },
                    "departments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DepartmentResource"
                        }
                    },
                    "serviceFeatures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceFeatureValue"
                        }
                    },
                    "regionalSettings": {
                        "$ref": "#/components/schemas/RegionalSettingsInfo"
                    },
                    "setupWizardState": {
                        "type": "string",
                        "enum": [
                            "NotStarted",
                            "Incomplete",
                            "Completed",
                            "Unknown"
                        ]
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/ExtensionPermissionsResource"
                    },
                    "password": {
                        "type": "string"
                    },
                    "ivrPin": {
                        "type": "string"
                    },
                    "profileImage": {
                        "$ref": "#/components/schemas/ProfileImageResource"
                    }
                }
            },
            "ScaledProfileImageResource": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "ContactAddressInfoDevices": {
                "type": "object",
                "properties": {
                    "country": {
                        "type": "string",
                        "description": "Country name of extension user company. Not returned for Address Book"
                    },
                    "state": {
                        "type": "string",
                        "description": "State/province name of extension user company"
                    },
                    "city": {
                        "type": "string",
                        "description": "City name of extension user company"
                    },
                    "street": {
                        "type": "string",
                        "description": "Street address of extension user company"
                    },
                    "zip": {
                        "type": "string",
                        "description": "Zip code of extension user company"
                    }
                }
            },
            "ServiceProviderConfig": {
                "type": "object",
                "properties": {
                    "authenticationSchemes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthenticationScheme"
                        }
                    },
                    "bulk": {
                        "$ref": "#/components/schemas/BulkSupported"
                    },
                    "changePassword": {
                        "$ref": "#/components/schemas/Supported"
                    },
                    "etag": {
                        "$ref": "#/components/schemas/Supported"
                    },
                    "filter": {
                        "$ref": "#/components/schemas/FilterSupported"
                    },
                    "patch": {
                        "$ref": "#/components/schemas/Supported"
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig"
                            ]
                        }
                    },
                    "sort": {
                        "$ref": "#/components/schemas/Supported"
                    },
                    "xmlDataFormat": {
                        "$ref": "#/components/schemas/Supported"
                    }
                }
            },
            "ScimErrorResponse": {
                "type": "object",
                "properties": {
                    "detail": {
                        "type": "string",
                        "description": "detail error message"
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "urn:ietf:params:scim:api:messages:2.0:Error"
                            ]
                        }
                    },
                    "scimType": {
                        "type": "string",
                        "description": "bad request type when status code is 400",
                        "enum": [
                            "uniqueness",
                            "tooMany",
                            "mutability",
                            "sensitive",
                            "invalidSyntax",
                            "invalidFilter",
                            "invalidPath",
                            "invalidValue",
                            "invalidVers",
                            "noTarget"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "description": "same as HTTP status code, e.g. 400, 401, etc."
                    }
                }
            },
            "User": {
                "type": "object",
                "required": [
                    "emails",
                    "name",
                    "schemas",
                    "userName"
                ],
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "user status",
                        "default": false
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserAddress"
                        }
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Email"
                        }
                    },
                    "externalId": {
                        "type": "string",
                        "description": "external unique resource id defined by provisioning client"
                    },
                    "id": {
                        "type": "string",
                        "description": "unique resource id defined by RingCentral"
                    },
                    "name": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhoneNumber"
                        }
                    },
                    "photos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Photo"
                        }
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "urn:ietf:params:scim:schemas:core:2.0:User"
                            ]
                        }
                    },
                    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
                        "$ref": "#/components/schemas/EnterpriseUser"
                    },
                    "userName": {
                        "type": "string",
                        "description": "MUST be same as work type email address"
                    }
                }
            },
            "UserResponse": {
                "type": "object",
                "required": [
                    "emails",
                    "name",
                    "schemas",
                    "userName"
                ],
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "user status",
                        "default": false
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserAddress"
                        }
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Email"
                        }
                    },
                    "externalId": {
                        "type": "string",
                        "description": "external unique resource id defined by provisioning client"
                    },
                    "id": {
                        "type": "string",
                        "description": "unique resource id defined by RingCentral"
                    },
                    "name": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhoneNumber"
                        }
                    },
                    "photos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Photo"
                        }
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "urn:ietf:params:scim:schemas:core:2.0:User"
                            ]
                        }
                    },
                    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
                        "$ref": "#/components/schemas/EnterpriseUser"
                    },
                    "userName": {
                        "type": "string",
                        "description": "MUST be same as work type email address"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/Meta"
                    }
                }
            },
            "UserSearchResponse": {
                "type": "object",
                "properties": {
                    "Resources": {
                        "type": "array",
                        "description": "user list",
                        "items": {
                            "$ref": "#/components/schemas/UserResponse"
                        }
                    },
                    "itemsPerPage": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "urn:ietf:params:scim:api:messages:2.0:ListResponse"
                            ]
                        }
                    },
                    "startIndex": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "SearchRequest": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "page size"
                    },
                    "filter": {
                        "type": "string",
                        "description": "only support 'userName' or 'email' filter expressions for now"
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "urn:ietf:params:scim:api:messages:2.0:SearchRequest"
                            ]
                        }
                    },
                    "startIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "start index (1-based)"
                    }
                }
            },
            "UserPatch": {
                "type": "object",
                "required": [
                    "Operations",
                    "schemas"
                ],
                "properties": {
                    "Operations": {
                        "type": "array",
                        "description": "patch operations list",
                        "items": {
                            "$ref": "#/components/schemas/PatchOperation"
                        }
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "urn:ietf:params:scim:api:messages:2.0:PatchOp"
                            ]
                        }
                    }
                }
            },
            "BulkSupported": {
                "type": "object",
                "properties": {
                    "maxOperations": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxPayloadSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "supported": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "Email": {
                "type": "object",
                "required": [
                    "type",
                    "value"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "work"
                        ]
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "Name": {
                "type": "object",
                "required": [
                    "familyName",
                    "givenName"
                ],
                "properties": {
                    "familyName": {
                        "type": "string"
                    },
                    "givenName": {
                        "type": "string"
                    }
                }
            },
            "PhoneNumber": {
                "type": "object",
                "required": [
                    "type",
                    "value"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "work",
                            "mobile",
                            "other"
                        ]
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "EnterpriseUser": {
                "type": "object",
                "properties": {
                    "department": {
                        "type": "string"
                    }
                }
            },
            "Meta": {
                "type": "object",
                "properties": {
                    "created": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModified": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "location": {
                        "type": "string",
                        "description": "resource location URI"
                    },
                    "resourceType": {
                        "type": "string",
                        "enum": [
                            "User",
                            "Group"
                        ]
                    }
                },
                "description": "resource metadata"
            },
            "AuthenticationScheme": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "documentationUri": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "specUri": {
                        "type": "string"
                    },
                    "primary": {
                        "type": "boolean"
                    }
                }
            },
            "Supported": {
                "type": "object",
                "properties": {
                    "supported": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "FilterSupported": {
                "type": "object",
                "properties": {
                    "maxResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "supported": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "UserAddress": {
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "country": {
                        "type": "string"
                    },
                    "locality": {
                        "type": "string"
                    },
                    "postalCode": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "streetAddress": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "work"
                        ]
                    }
                }
            },
            "Photo": {
                "type": "object",
                "required": [
                    "type",
                    "value"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "photo"
                        ]
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "PatchOperation": {
                "type": "object",
                "required": [
                    "op"
                ],
                "properties": {
                    "op": {
                        "type": "string",
                        "enum": [
                            "add",
                            "replace",
                            "remove"
                        ]
                    },
                    "path": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string",
                        "description": "corresponding 'value' of that field specified by 'path'"
                    }
                }
            },
            "IgnoreRequestBody": {
                "type": "object",
                "required": [
                    "deviceId"
                ],
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "Internal device identifier",
                        "example": "400020454008"
                    }
                }
            },
            "PickupTarget": {
                "type": "object",
                "required": [
                    "deviceId"
                ],
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "Device identifier that is used to pick up the parked call.",
                        "example": "400018633008"
                    }
                }
            },
            "ForwardTarget": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "description": "Phone number",
                        "type": "string"
                    },
                    "voicemail": {
                        "description": "Voicemail owner extension identifier",
                        "type": "string"
                    }
                }
            },
            "ReplyParty": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Internal identifier of a party",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/CallStatusInfo"
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Specifies if a call participant is muted or not. **Note:** If a call is also controlled via Hard phone or RingCentral App (not only through the API by calling call control methods) then it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via Hard phone/RC App interfaces"
                    },
                    "standAlone": {
                        "type": "boolean",
                        "description": "If 'True' then the party is not connected to a session voice conference, 'False' means the party is connected to other parties in a session"
                    },
                    "park": {
                        "$ref": "#/components/schemas/ParkInfo"
                    },
                    "from": {
                        "$ref": "#/components/schemas/PartyInfo"
                    },
                    "to": {
                        "$ref": "#/components/schemas/PartyInfo"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/OwnerInfo"
                    },
                    "direction": {
                        "description": "Direction of a call",
                        "type": "string",
                        "enum": [
                            "Inbound",
                            "Outbound"
                        ]
                    }
                }
            },
            "MakeCallOutRequest": {
                "type": "object",
                "required": [
                    "from",
                    "to"
                ],
                "properties": {
                    "from": {
                        "$ref": "#/components/schemas/MakeCallOutCallerInfoRequestFrom"
                    },
                    "to": {
                        "$ref": "#/components/schemas/MakeCallOutCallerInfoRequestTo"
                    }
                }
            },
            "CallParty": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Internal identifier of a party",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/CallStatusInfo"
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Specifies if a call participant is muted or not. **Note:** If a call is also controlled via Hard phone or RingCentral App (not only through the API by calling call control methods) then it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via Hard phone/RC App interfaces"
                    },
                    "standAlone": {
                        "type": "boolean",
                        "description": "If 'True' then the party is not connected to a session voice conference, 'False' means the party is connected to other parties in a session"
                    },
                    "park": {
                        "$ref": "#/components/schemas/ParkInfo"
                    },
                    "from": {
                        "$ref": "#/components/schemas/PartyInfo"
                    },
                    "to": {
                        "$ref": "#/components/schemas/PartyInfo"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/OwnerInfo"
                    },
                    "direction": {
                        "description": "Direction of a call",
                        "type": "string",
                        "enum": [
                            "Inbound",
                            "Outbound"
                        ]
                    },
                    "conferenceRole": {
                        "description": "A party's role in the conference scenarios. For calls of 'Conference' type only",
                        "type": "string",
                        "enum": [
                            "Host",
                            "Participant"
                        ]
                    },
                    "ringOutRole": {
                        "description": "A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only",
                        "type": "string",
                        "enum": [
                            "Initiator",
                            "Target"
                        ]
                    },
                    "ringMeRole": {
                        "description": "A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only",
                        "type": "string",
                        "enum": [
                            "Initiator",
                            "Target"
                        ]
                    },
                    "recordings": {
                        "description": "Active recordings list",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecordingInfo"
                        }
                    }
                }
            },
            "SuperviseCallSession": {
                "type": "object",
                "properties": {
                    "from": {
                        "$ref": "#/components/schemas/PartyInfo"
                    },
                    "to": {
                        "$ref": "#/components/schemas/PartyInfo"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Direction of a call",
                        "enum": [
                            "Outbound",
                            "Inbound"
                        ]
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a party that monitors a call"
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Specifies if a call participant is muted or not. **Note:** If a call is also controlled via Hard phone or RingCentral App (not only through the API by calling call control methods) then it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via Hard phone/RC App interfaces"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/OwnerInfo"
                    },
                    "standAlone": {
                        "type": "boolean",
                        "description": "If 'True' then the party is not connected to a session voice conference, 'False' means the party is connected to other parties in a session"
                    },
                    "status": {
                        "$ref": "#/components/schemas/CallStatusInfo"
                    }
                }
            },
            "CallPartyReply": {
                "type": "object",
                "properties": {
                    "replyWithText": {
                        "description": "Text to reply",
                        "type": "string"
                    },
                    "replyWithPattern": {
                        "$ref": "#/components/schemas/ReplyWithPattern"
                    }
                }
            },
            "CallPartyFlip": {
                "type": "object",
                "properties": {
                    "callFlipId": {
                        "description": "Call flip id",
                        "type": "string"
                    }
                }
            },
            "CallRecording": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a call recording"
                    },
                    "active": {
                        "description": "Call recording status",
                        "type": "boolean"
                    }
                }
            },
            "CallRecordingUpdate": {
                "type": "object",
                "properties": {
                    "active": {
                        "description": "Recording status",
                        "type": "boolean"
                    }
                }
            },
            "SuperviseCallSessionRequest": {
                "type": "object",
                "required": [
                    "mode",
                    "deviceId",
                    "supervisorDeviceId"
                ],
                "properties": {
                    "mode": {
                        "type": "string",
                        "description": "Supervising mode",
                        "enum": [
                            "Listen"
                        ],
                        "example": "Listen"
                    },
                    "supervisorDeviceId": {
                        "type": "string",
                        "description": "Internal identifier of a supervisor's device which will be used for call session monitoring",
                        "example": "191888004"
                    },
                    "agentExtensionNumber": {
                        "type": "string",
                        "description": "Extension number of the user that will be monitored",
                        "example": "13035311020"
                    },
                    "agentExtensionId": {
                        "type": "string",
                        "description": "Extension identifier of the user that will be monitored",
                        "example": "400378008008"
                    }
                }
            },
            "CallSession": {
                "type": "object",
                "properties": {
                    "session": {
                        "$ref": "#/components/schemas/CallSessionObject"
                    }
                }
            },
            "TransferTarget": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "description": "Phone number",
                        "type": "string"
                    },
                    "voicemail": {
                        "description": "Voicemail owner extension identifier",
                        "type": "string"
                    },
                    "parkOrbit": {
                        "description": "Park orbit identifier",
                        "type": "string"
                    }
                }
            },
            "AnswerTarget": {
                "type": "object",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "Device identifier that is used to answer the incoming call.",
                        "example": "400018633008"
                    }
                }
            },
            "PartyUpdateRequest": {
                "type": "object",
                "properties": {
                    "party": {
                        "$ref": "#/components/schemas/PartyUpdateInfo"
                    }
                }
            },
            "MakeCallOutCallerInfoRequestFrom": {
                "type": "object",
                "description": "Instance id of the caller. It corresponds to the 1st leg of the CallOut call.",
                "properties": {
                    "deviceId": {
                        "description": "Internal identifier of a device",
                        "type": "string",
                        "example": "59474004"
                    }
                }
            },
            "MakeCallOutCallerInfoRequestTo": {
                "type": "object",
                "description": "Phone number of the called party. This number corresponds to the 2nd leg of a CallOut call",
                "properties": {
                    "phoneNumber": {
                        "description": "Phone number in E.164 format",
                        "type": "string",
                        "example": "+16502223366"
                    },
                    "extensionNumber": {
                        "type": "string",
                        "description": "Extension number",
                        "example": "103"
                    }
                }
            },
            "ReplyWithPattern": {
                "type": "object",
                "properties": {
                    "pattern": {
                        "description": "Predefined reply pattern name.",
                        "type": "string",
                        "example": "OnMyWay",
                        "enum": [
                            "WillCallYouBack",
                            "CallMeBack",
                            "OnMyWay",
                            "OnTheOtherLine",
                            "WillCallYouBackLater",
                            "CallMeBackLater",
                            "InAMeeting",
                            "OnTheOtherLineNoCall"
                        ]
                    },
                    "time": {
                        "description": "Number of time units. Applicable only to WillCallYouBack, CallMeBack patterns.",
                        "type": "integer",
                        "example": 5
                    },
                    "timeUnit": {
                        "description": "Time unit name.",
                        "type": "string",
                        "example": "Minute",
                        "enum": [
                            "Minute",
                            "Hour",
                            "Day"
                        ]
                    }
                }
            },
            "CallSessionObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Internal identifier of a call session",
                        "type": "string"
                    },
                    "origin": {
                        "$ref": "#/components/schemas/OriginInfo"
                    },
                    "voiceCallToken": {
                        "type": "string",
                        "description": "For calls of 'Conference' type only"
                    },
                    "parties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CallParty"
                        }
                    },
                    "creationTime": {
                        "description": "Date and time of the latest session update represented in Unix time format",
                        "type": "string"
                    }
                }
            },
            "PartyUpdateInfo": {
                "type": "object",
                "properties": {
                    "muted": {
                        "description": "Specifies if a call participant is muted or not. **Note:** If a call is also controlled via Hard phone or RingCentral App (not only through the API by calling call control methods) then it cannot be fully muted/unmuted via API only, in this case the action should be duplicated via Hard phone/RC App interfaces",
                        "type": "boolean"
                    },
                    "standAlone": {
                        "description": "If 'True' then the party is not connected to a session voice conference, 'False' means the party is connected to other parties in a session",
                        "type": "boolean"
                    }
                }
            },
            "CallStatusInfo": {
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Status code of a call",
                        "type": "string",
                        "enum": [
                            "Setup",
                            "Proceeding",
                            "Answered",
                            "Disconnected",
                            "Gone",
                            "Parked",
                            "Hold",
                            "VoiceMail",
                            "FaxReceive",
                            "VoiceMailScreening"
                        ]
                    },
                    "peerId": {
                        "$ref": "#/components/schemas/PeerInfo"
                    },
                    "reason": {
                        "description": "Reason of call termination. For 'Disconnected' code only",
                        "type": "string",
                        "enum": [
                            "Pickup",
                            "Supervising",
                            "TakeOver",
                            "Timeout",
                            "BlindTransfer",
                            "RccTransfer",
                            "AttendedTransfer",
                            "CallerInputRedirect",
                            "CallFlip",
                            "ParkLocation",
                            "DtmfTransfer",
                            "AgentAnswered",
                            "AgentDropped",
                            "Rejected",
                            "Cancelled",
                            "InternalError",
                            "NoAnswer",
                            "TargetBusy",
                            "InvalidNumber",
                            "InternationalDisabled",
                            "DestinationBlocked",
                            "NotEnoughFunds",
                            "NoSuchUser",
                            "CallRedirected",
                            "CallReplied",
                            "CallFinished",
                            "CallDropped"
                        ]
                    },
                    "description": {
                        "description": "Optional message",
                        "type": "string"
                    }
                }
            },
            "ParkInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Call park identifier"
                    }
                }
            },
            "PartyInfo": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "description": "Phone number of a party",
                        "type": "string"
                    },
                    "extensionId": {
                        "description": "Internal identifier of an extension",
                        "type": "string"
                    },
                    "name": {
                        "description": "Displayed name of a party",
                        "type": "string"
                    },
                    "deviceId": {
                        "description": "Internal identifier of a device",
                        "type": "string"
                    }
                }
            },
            "OwnerInfo": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "description": "Internal identifier of an account",
                        "type": "string"
                    },
                    "extensionId": {
                        "description": "Internal identifier of an extension",
                        "type": "string"
                    }
                }
            },
            "RecordingInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a Recording resource"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "True if the recording is active. False if the recording is paused."
                    }
                }
            },
            "OriginInfo": {
                "type": "object",
                "properties": {
                    "type": {
                        "description": "Session origin type",
                        "type": "string",
                        "enum": [
                            "RingOut",
                            "RingMe",
                            "Conference",
                            "GreetingRecording",
                            "VerificartionCall",
                            "Call"
                        ]
                    }
                }
            },
            "PeerInfo": {
                "type": "object",
                "description": "Peer session / party data. Valid in Gone state only",
                "properties": {
                    "sessionId": {
                        "type": "string"
                    },
                    "telephonySessionId": {
                        "type": "string"
                    },
                    "partyId": {
                        "type": "string"
                    }
                }
            },
            "CreateDataExportTaskRequest": {
                "type": "object",
                "properties": {
                    "dateFrom": {
                        "type": "string",
                        "description": "Starting time for data collection. The default value is current time minus 24 hours. If `dateTo` is not specified then its value is set to `dateFrom` plus 24 hours. The specified time range should not be greater than 7 days"
                    },
                    "dateTo": {
                        "type": "string",
                        "description": "Ending time for data collection. The default value is current time. If `dateFrom` is not specified then its value is set to `dateTo` minus 24 hours. The specified time range should not be greater than 7 days"
                    },
                    "userIds": {
                        "type": "array",
                        "description": "List of users which data is collected. The following data will be exported: posts, tasks, events, etc. posted by the user(s); posts addressing the user(s) via direct and @Mentions; tasks assigned to the listed user(s). The list of 30 users per request is supported.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "chatIds": {
                        "type": "array",
                        "description": "List of chats from which the data (posts, files, tasks, events, notes, etc.) will be collected",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "DataExportTask": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI of a task"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a task"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Task creation datetime"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Task last modification datetime"
                    },
                    "status": {
                        "type": "string",
                        "description": "Task status",
                        "enum": [
                            "Accepted",
                            "InProgress",
                            "Completed",
                            "Failed"
                        ]
                    },
                    "result": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExportTaskResultInfo"
                        },
                        "description": "Data collection archives. Returned by task ID"
                    }
                }
            },
            "ExportTaskResultInfo": {
                "type": "object",
                "properties": {
                    "size": {
                        "type": "integer",
                        "description": "Size of the collected data archive in bytes"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Canonical URI for downloading an archive"
                    }
                }
            },
            "MessageStoreReportArchive": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ArchiveInfo"
                        }
                    }
                }
            },
            "CreateMessageStoreReportRequest": {
                "type": "object",
                "properties": {
                    "dateFrom": {
                        "type": "string",
                        "description": "Starting time for collecting messages. The default value equals to the current time minus 24 hours"
                    },
                    "dateTo": {
                        "type": "string",
                        "description": "Ending time for collecting messages. The default value is the current time"
                    }
                }
            },
            "MessageStoreReport": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of a message store report task"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Link to a task"
                    },
                    "status": {
                        "description": "Status of a message store report task",
                        "type": "string",
                        "enum": [
                            "Accepted",
                            "Pending",
                            "InProgress",
                            "AttemptFailed",
                            "Failed",
                            "Completed",
                            "Cancelled"
                        ]
                    },
                    "accountId": {
                        "type": "string",
                        "description": "Internal identifier of an account"
                    },
                    "extensionId": {
                        "type": "string",
                        "description": "Internal identifier of an extension"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Task creation time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Time of the last task modification"
                    },
                    "dateTo": {
                        "type": "string",
                        "description": "Ending time for collecting messages"
                    },
                    "dateFrom": {
                        "type": "string",
                        "description": "Starting time for collecting messages"
                    }
                }
            },
            "ArchiveInfo": {
                "type": "object",
                "properties": {
                    "size": {
                        "type": "integer",
                        "description": "Archive size in bytes"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Link for archive download"
                    }
                }
            },
            "TokenInfo": {
                "type": "object",
                "properties": {
                    "access_token": {
                        "type": "string",
                        "description": "Access token to pass to subsequent API requests",
                        "example": "U1BCMDFUMDRKV1MwMXxzLFSvXdw5PHMsVLEn_MrtcyxUsw"
                    },
                    "expires_in": {
                        "type": "integer",
                        "description": "Issued access token TTL (time to live), in seconds",
                        "example": 7199
                    },
                    "refresh_token": {
                        "type": "string",
                        "description": "Refresh token to get a new access token, when the issued one expires",
                        "example": "U1BCMDFUMDRKV1MwMXxzLFL4ec6A0XMsUv9wLriecyxS_w"
                    },
                    "refresh_token_expires_in": {
                        "type": "integer",
                        "description": "Issued refresh token TTL (time to live), in seconds",
                        "example": 604799
                    },
                    "scope": {
                        "type": "string",
                        "description": "List of permissions allowed with this access token, white-space separated",
                        "example": "AccountInfo CallLog ExtensionInfo Messages SMS"
                    },
                    "token_type": {
                        "type": "string",
                        "description": "Type of token. The only possible value supported is Bearer. This value should be used when specifying access token in Authorization header of subsequent API requests",
                        "example": "bearer"
                    },
                    "owner_id": {
                        "type": "string",
                        "description": "Extension identifier",
                        "example": "256440016"
                    },
                    "endpoint_id": {
                        "type": "string",
                        "description": "Application instance identifier",
                        "example": "8zXq6oaLT7WvwWITlGiA1A"
                    },
                    "id_token": {
                        "type": "string"
                    }
                }
            }
        }
    }
}